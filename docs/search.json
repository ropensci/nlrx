[{"path":"https://docs.ropensci.org/nlrx/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/CONTRIBUTING.html","id":"please-contribute","dir":"","previous_headings":"","what":"Please contribute!","title":"CONTRIBUTING","text":"love collaboration. fact, one main ideas start work package. course, also welcome suggest general improvements package structure whatsoever. appreciate contribution collaboration.","code":""},{"path":"https://docs.ropensci.org/nlrx/CONTRIBUTING.html","id":"bugs","dir":"","previous_headings":"","what":"Bugs?","title":"CONTRIBUTING","text":"Submit issue Issues page ","code":""},{"path":"https://docs.ropensci.org/nlrx/CONTRIBUTING.html","id":"code-contributions","dir":"","previous_headings":"","what":"Code contributions","title":"CONTRIBUTING","text":"Fork repo Github account Clone version account machine account, e.g,. git clone https://github.com/ropensci/nlrx.git Make sure track progress upstream (.e., version nlrx ropensci/nlrx) git remote add upstream https://github.com/ropensci/nlrx.git. making changes make sure pull changes upstream either git fetch upstream merge later git pull upstream fetch merge one step Make changes (bonus points making changes new branch) alter package functionality (e.g., code , just documentation) please write tests cover new functionality Push account Submit pull request home base ropensci/nlrx","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://docs.ropensci.org/nlrx/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2018 Jan Salecker  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. nlrx Copyright (C) 2018 Jan Salecker This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"approximate-bayesian-computation-abc-with-nlrx","dir":"Articles","previous_headings":"","what":"Approximate bayesian computation (ABC) with nlrx","title":"Approximate Bayesian Computation (ABC)","text":"Approximate bayesian computation (ABC) algorithms increasingly used calibration agent-based simulation models. nlrx package provides different algorithms EasyABC package. algorithms can used attaching corresponding simdesigns (simdesign_ABCmcmc_Marjoram(), simdesign_ABCmcmc_Marjoram_original(), simdesign_ABCmcmc_Wegmann()). Example 1 shows process use ABC nlrx. Additionally, Latin Hypercube Sampling output can used calculate parameter distributions based rejection sampling local linear regression. Example 2 shows, simdesign_lhs() can used combination abc package.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"example-1-approximate-bayesian-computation-with-monte-carlo-markov-chain","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx","what":"Example 1: Approximate bayesian computation with Monte-Carlo Markov-Chain","title":"Approximate Bayesian Computation (ABC)","text":"present one example widely used Marjoram algorithm combines ABC Markov-Chain Monte-Carlo parameter sampling scheme. However, two ABCmcmc simdesigns work similar way except parameter definitions within simdesigns (see respective documentation pages help). use Wolf Sheep Predation model models library show basic example calibration workflow.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-1-create-a-nl-object","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 1: Approximate bayesian computation with Monte-Carlo Markov-Chain","what":"Step 1: Create a nl object:","title":"Approximate Bayesian Computation (ABC)","text":"","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-2-attach-an-experiment","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 1: Approximate bayesian computation with Monte-Carlo Markov-Chain","what":"Step 2: Attach an experiment","title":"Approximate Bayesian Computation (ABC)","text":"want apply calibration algorithm, need define proper variable ranges. algorithm allowed change values parameters within ranges order reach specified target values. Possible choices distribution type qunif, qnorm, qlnorm qexp. model run evaluated specified metric within metrics slot. simdesign attached (see step 3) define target values metric. Thus, enter metrics reporters used calibrating model. simple example, just want check can find parameterization leads specific number wolves sheep runtime 100 ticks. Thus, define count sheep count wolves metrics, set runtime 100 set tickmetrics false (want measure last simulation tick). one tick measured, algorithm automatically calculates mean value selected reporter measured ticks. wish apply functions aggregate temporal information one value, can use self-defined post-processing function attaching simdesign (see step 3).","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"false\",                             idsetup=\"setup\",                             idgo=\"go\",                             runtime=100,                             metrics=c(\"count sheep\", \"count wolves\"),                             variables = list(\"sheep-gain-from-food\" = list(min=2, max=6, qfun=\"qunif\"),                                              \"wolf-gain-from-food\" = list(min=10, max=30, qfun=\"qunif\")),                             constants = list('initial-number-sheep' = 100,                                              'initial-number-wolves' = 50,                                              \"grass-regrowth-time\" = 30,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-3-attach-a-simulation-design","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 1: Approximate bayesian computation with Monte-Carlo Markov-Chain","what":"Step 3: Attach a simulation design","title":"Approximate Bayesian Computation (ABC)","text":"use simdesign_ABCmcmc_Marjoram() function attach calibration simdesign. summary_stat_target represents vector target values want reach. values corresponds defined metrics experiment length order. n_rec defines number samples n_calibration defines number calibration runs. value low, subscript bounds error message might appear. use_seed set TRUE, algorithm automatically use newly generated seed model run. set false, user-specified seed (set run_nl_dyn() function) used instead. progress_bar gives expected runtime information execution algorithm. nseeds command allows generate vector random-seeds may used setting model seeds. important simdesign parameters, many fine control behavior algorithm. Check simdesign help page information. already mentioned , also possible define custom post-processing function. apply function model output, function name needs entered postpro_function within simdesign. example, might want use maximum value measured metrics calibrate model. maybe want run tests use test statistics calibration criterion. cases, can define function accepts nl object (simulation results attached) function input returns vector numerics. vector needs represent values defined sumary_stat_target thus length order. example custom post-processing function calculates maximum value selected metrics simulation ticks.","code":"nl@simdesign <- simdesign_ABCmcmc_Marjoram(nl=nl,                                            summary_stat_target = c(100, 80),                                            n_rec = 100,                                             n_calibration=200,                                            use_seed = TRUE,                                            progress_bar = TRUE,                                            nseeds = 1) post <- function(nl){   res <- getsim(nl, \"simoutput\") %>%      dplyr::select(getexp(nl, \"metrics\")) %>%      dplyr::summarise_each(list(max=max))   return(as.numeric(res)) }  nl@simdesign <- simdesign_ABCmcmc_Marjoram(nl=nl,                                            postpro_function = post,                                            summary_stat_target = c(100, 80),                                            n_rec = 100,                                             n_calibration=200,                                            use_seed = TRUE,                                            progress_bar = TRUE,                                            nseeds = 1)"},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-4-run-simulations","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 1: Approximate bayesian computation with Monte-Carlo Markov-Chain","what":"Step 4: Run simulations","title":"Approximate Bayesian Computation (ABC)","text":"calibration simdesigns, run_nl_dyn() function lets execute simulations. notable differences run_nl_all() run_nl_dyn(). First, parameterizations depend results previous runs, run_nl_dyn() can parallelized. Second, procedure automatically loop created random seeds simdesign. want repeat algorithm several times, just embed run_nl_dyn() function kind loop iterate nl@simdesign@simseeds vector. set use_seed parameter simdesign true, however still need define random-seed run_nl_dyn although overwritten EasyABC functions.","code":"results <- run_nl_dyn(nl, seed = nl@simdesign@simseeds[1])"},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-5-investigate-output","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 1: Approximate bayesian computation with Monte-Carlo Markov-Chain","what":"Step 5: Investigate output","title":"Approximate Bayesian Computation (ABC)","text":"output reported nested tibble can attached nl object. many possible ways inspect simulation output ABCmcmc functions. find guidance summarize output calculating parameter statistics, sampling distributions, sampling density exporting best parameter combination.","code":"setsim(nl, \"simoutput\") <- results saveRDS(nl, file.path(nl@experiment@outpath, \"ABCmcmc.rds\"))  ## Calculate descriptive statistics getsim(nl, \"simoutput\") %>% # get simulation results from nl object   dplyr::select(param) %>% # select param column   tidyr::unnest(cols=param) %>%  # unnest param column   dplyr::summarise_each(list(min=min, max=max, mean=mean, median=median)) %>% # calculate statistics   tidyr::gather(parameter, value) %>% # convert to long format   tidyr::separate(parameter, into = c(\"parameter\", \"stat\"), sep = \"_\") %>% # seperate parameter name and statistic   tidyr::spread(stat, value) # convert back to wide format  ## Plot histogram of parameter sampling distribution: getsim(nl, \"simoutput\") %>% # get simulation results from nl object   dplyr::select(param) %>% # select param column   tidyr::unnest(cols=param) %>%  # unnest param column   tidyr::gather(parameter, value) %>% # convert to long format   ggplot2::ggplot() + # plot histogram with a facet for each parameter   ggplot2::facet_wrap(~parameter, scales=\"free\") +   ggplot2::geom_histogram(ggplot2::aes(x=value), bins = 40)  ## Plot density of parameter sampling distribution: getsim(nl, \"simoutput\") %>% # get simulation results from nl object   dplyr::select(param) %>% # select param column   tidyr::unnest(cols=param) %>% # unnest param column   tidyr::gather(parameter, value) %>% # convert to long format   ggplot2::ggplot() + # plot density with a facet for each parameter   ggplot2::facet_wrap(~parameter, scales=\"free\") +   ggplot2::geom_density(ggplot2::aes(x=value, fill=parameter))  ## Get best parameter combinations and corresponding function values getsim(nl, \"simoutput\") %>%  # get simulation results from nl object   dplyr::select(dist,epsilon) %>%  # select dist and epsilon columns   tidyr::unnest(cols=c(dist,epsilon)) %>%  # unnest dist and epsilon columns   dplyr::mutate(runID=dplyr::row_number()) %>% # add row ID column   dplyr::filter(dist == epsilon) %>% # only keep runs with dist=epsilon   dplyr::left_join(getsim(nl, \"simoutput\") %>% # join parameter values of best runs                      dplyr::select(param) %>%                      tidyr::unnest(cols=param) %>%                       dplyr::mutate(runID=dplyr::row_number())) %>%    dplyr::left_join(getsim(nl, \"simoutput\") %>% # join output values best runs                      dplyr::select(stats) %>%                      tidyr::unnest(cols=stats) %>%                       dplyr::mutate(runID=dplyr::row_number())) %>%    dplyr::select(runID, dist, epsilon, dplyr::everything()) # update order of columns  ## Analyse mcmc using coda summary and plot functions: summary(coda::as.mcmc(getsim(nl, \"simoutput\") %>%                         dplyr::select(param) %>%                         tidyr::unnest(cols=param)), quantiles =c(0.05,0.95,0.5))  plot(coda::as.mcmc(getsim(nl, \"simoutput\") %>%                         dplyr::select(param) %>%                         tidyr::unnest(cols=param)))"},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-1-create-a-nl-object-1","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 2: Using Latin Hypercube Sampling for Approximate bayesian computation","what":"Step 1: Create a nl object:","title":"Approximate Bayesian Computation (ABC)","text":"","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-2-attach-an-experiment-1","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 2: Using Latin Hypercube Sampling for Approximate bayesian computation","what":"Step 2: Attach an experiment","title":"Approximate Bayesian Computation (ABC)","text":"want run Latin Hypercube sampling, thus need define proper variable ranges. also need define output metrics. metrics also used rejection sampling later .","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"false\",                             idsetup=\"setup\",                             idgo=\"go\",                             runtime=100,                             metrics=c(\"count sheep\", \"count wolves\"),                             variables = list(\"sheep-gain-from-food\" = list(min=2, max=6, qfun=\"qunif\"),                                              \"wolf-gain-from-food\" = list(min=10, max=30, qfun=\"qunif\")),                             constants = list('initial-number-sheep' = 100,                                              'initial-number-wolves' = 50,                                              \"grass-regrowth-time\" = 30,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-3-attach-a-simulation-design-1","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 2: Using Latin Hypercube Sampling for Approximate bayesian computation","what":"Step 3: Attach a simulation design","title":"Approximate Bayesian Computation (ABC)","text":"use simdesign_lhs() helper function generate Latin Hypercube Sampling 500 samples","code":"nl@simdesign <- simdesign_lhs(nl,                                samples=500,                                nseeds=1,                                precision=3)"},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-4-run-simulations-1","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 2: Using Latin Hypercube Sampling for Approximate bayesian computation","what":"Step 4: Run simulations","title":"Approximate Bayesian Computation (ABC)","text":"can simply use run_nl_all() execute simulations.","code":"results <- run_nl_all(nl)"},{"path":"https://docs.ropensci.org/nlrx/articles/abc.html","id":"step-5-investigate-output-1","dir":"Articles","previous_headings":"Approximate bayesian computation (ABC) with nlrx > Example 2: Using Latin Hypercube Sampling for Approximate bayesian computation","what":"Step 5: Investigate output","title":"Approximate Bayesian Computation (ABC)","text":"first attach output results nl object store copy nl object disk. post-processing, need tibble input parameter distributions. can easily extracted siminput slot simdesign selecting columns variable (non-constant) parameters. Next, need corresponding outputs parameters. example just take measured output tibble (simoutput) select columns metrics. course, can also perform additional post-processing outputs desired. Third, need define expected values outputs. case, just assume count sheep value 100, whereas count wolves value 80. use abc function abc package perform rejection sampling. example, perform algorithms provided function (“rejection” “loclinear”). Finally, might want compare accepted parameter distributions algorithms initial distribution Latin Hypercube sampling. Thus, reformat results tidy data format attach initial parameter distributions. dataset can now used displaying parameter distributions ggplot.","code":"setsim(nl, \"simoutput\") <- results saveRDS(nl, file.path(nl@experiment@outpath, \"ABClhs.rds\")) input <- getsim(nl, \"siminput\") %>%    dplyr::select(names(getexp(nl, \"variables\"))) output <- getsim(nl, \"simoutput\") %>%    dplyr::select(getexp(nl, \"metrics\")) target <- c(\"count sheep\"=100, \"count wolves\"=80) results.abc.reject <- abc::abc(target=target,                          param=input,                         sumstat=output,                         tol=0.3,                          method=\"rejection\")  results.abc.loclin <- abc::abc(target=target,                                 param=input,                                sumstat=output,                                tol=0.3,                                 method=\"loclinear\") results.abc.all <- tibble::as_tibble(results.abc.reject$unadj.values) %>% # results from rejection method   tidyr::gather(parameter, value) %>%    dplyr::mutate(method=\"rejection\") %>%    dplyr::bind_rows(tibble::as_tibble(results.abc.loclin$adj.values) %>% # results from local linear regression method                      tidyr::gather(parameter, value) %>%                       dplyr::mutate(method=\"loclinear\")) %>%    dplyr::bind_rows(input %>%                # initial parameter distribution (lhs)                      tidyr::gather(parameter, value) %>%                       dplyr::mutate(method=\"lhs\"))  ggplot2::ggplot(results.abc.all) +   ggplot2::facet_grid(method~parameter, scales=\"free\") +   ggplot2::geom_histogram(ggplot2::aes(x=value))  ggplot2::ggplot(results.abc.all) +   ggplot2::facet_wrap(~parameter, scales=\"free\") +   ggplot2::geom_density(ggplot2::aes(x=value, fill=method), alpha=0.1)"},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"variables-and-constants-definitions","dir":"Articles","previous_headings":"","what":"Variables and constants definitions","title":"Advanced configuration","text":"Correctly defining variables within experiment class object crucial creating simdesigns. implemented simdesigns different requirements variable definitions: Additionally, please note following restrictions order define variables constants correctly: Categorical variable values currently allowed simdesign_simple, simdesign_distinct simdesign_ff. Variable values recognized NetLogo strings need nested inside escaped quotes (e.g. \"\\\"string\\\"\"). Variable values recognized NetLogo logical need entered strings (e.g. \"false\"). allowed list variable variables constants list. NetLogo model parameters listed two lists set default value NetLogo model interface. simdesign_simple() requires least one defined constant within constants list. model globals (GUI code), please create dummy global (either create global widget GUI add dummy variable globals[] code section) model put constants list appropriate value. complete list valid NetLogo parameters can loaded committing nl object valid modelpath function report_model_parameters(). function reads GUI elements NetLogo model can set nlrx. attaching experiment nl object, validity defined experiment variables constants can checked commiting nl object function eval_variables_constants(). function report detailed warnings error messages, definitions variables constants invalid.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"print-functions","dir":"Articles","previous_headings":"","what":"Print functions","title":"Advanced configuration","text":"print(nl) can used nl class object. function print formatted overview class contents console. function also print short summary checklist may helpful debugging certain issues. Depending simdesign, summary table also prints estimated number runs.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"capturing-progress-of-model-simulations","dir":"Articles","previous_headings":"","what":"Capturing progress of model simulations","title":"Advanced configuration","text":"run_nl_all() function supports progressr framework capturing progress simulations. Following logic, function silent unless wrapped within progressr::with_progress() call. using different handlers, layout progress bar different. example, installing package progress using handler progressr::handlers(\"progress\") additionally print current row seed parameter matrix. example, run nl parameter matrix progress bar one can : run_nl_dyn() function might provide progress output depending chosen method (example ABC offers progress bar). However, dynamic experiments difficult track clear long complete experiment take beginning. run_nl_one() report progress executes one simulation. addition, NetLogo print commands redirected R console. Thus, print commands can used within NetLogo model code display current progress simulations R console. Another possibility , define print reporter procedure experiment slot “idfinal” executed end simulation. Capturing output multiple processes parallelized environments one R console straightforward. functionality needed, suggest write current progress output file directly NetLogo (example using idrunnum functionality nlrx, see section “Notes self-written output”). output files can monitored capture progress parallelized model executions.","code":"progressr::handlers(\"progress\") results <- progressr::with_progress(run_nl_all(nl))"},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"access-to-intermediate-results","dir":"Articles","previous_headings":"","what":"Access to intermediate results","title":"Advanced configuration","text":"long-running experiments simdesigns, may beneficial gain access intermediate results. especially useful obtain results successful runs, even R session crashes gets stalled. run_all_all() run_nl_one() functions provide parameter writeRDS. set TRUE, rds file, carrying current seed siminputrow written specified outpath nl object experiment. Please note, case run_all_all() function, huge number rds files may written disk (check print(nl) get estimated number runs/files) may cause issues. Another option get intermediate results, split-job smaller chunks. E.g. one create loop around run_nl_all() iteration use part nl@simdesign@siminput tibble (temporary overwrite nl@simdesign@siminput tibble copy contains specific slice parameter matrix). iteration, one can write results complete chunk rds file disk. Another option create outer loop around run_nl_all() using random seeds nl@simdesign@simseeds slot. , within loop iteration nl@simdesign@simseeds slot overwritten seed current loop iteration nl object passed run_nl_all() (don’t forget adjust split parameter case parallel execution). , iteration, one can write results complete chunk rds file disk. collect intermediate results, simply read rds files outpath loop combine tibbles, example using dplyr::bind_rows().","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"handling-netlogo-runtime-errors","dir":"Articles","previous_headings":"","what":"Handling NetLogo runtime errors","title":"Advanced configuration","text":"Usually, runtime errors NetLogo model simulations printed R console current execution run_nl_all(), run_nl_one() run_nl_dyn() breaks. However, can happen model simulation freezes due Java runtime errors. Unfortunately possible terminate Java virtual machine print error message console runtime error occurred. current R session frozen Java Virtual Machine need terminated manually. Thus, NetLogo models debugged NetLogo prior execution large experiments nlrx. Capturing progress model simulations (see section “Capturing progress model simulations”) might help debugging runtime errors freeze Java Virtual Machine.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"self-written-netlogo-output","dir":"Articles","previous_headings":"","what":"Self-written NetLogo output","title":"Advanced configuration","text":"experiment provides slot called “idrunnum”. slot can used transfer current nlrx experiment name, random seed runnumber (siminputrow) NetLogo. use functionality, string input field widget needs created GUI NetLogo model. name widget can entered “idrunnum” field experiment. simulations, value widget automatically updated generated string contains current nlrx experiment name, random seed siminputrow (“expname_seed_siminputrow”). self-written output NetLogo, suggest include global variable allows referencing self-written output files collected output nlrx simulations R.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"temporary-files-management","dir":"Articles","previous_headings":"","what":"Temporary files management","title":"Advanced configuration","text":"nlrx uses temporary files store experiment xml files, commandline batch files start NetLogo simulations csv output files. temporary files stored default temporary files directory R session. default, files deleted simulation run. However, needed look files, automatic deletion temporary files can disabled setting corresponding cleanup parameters run_nl functions (cleanup.csv, cleanup.xml, cleanup.bat function parameters). unix systems, can happen system processes delete files default temporary files folder. Thus, recommend reassign temporary files folder R-session another folder. R-package unixtools provides function reassign temporary files folder current R-session:","code":"install.packages('unixtools', repos = 'http://www.rforge.net/') unixtools::set.tempdir(\"<path-to-temp-dir>\")"},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"random-seed-and-repetitions-management","dir":"Articles","previous_headings":"","what":"random-seed and repetitions management","title":"Advanced configuration","text":"experiment provides slot called “repetition” allows run multiple simulations one parameterization. useful manually generate new random-seed setup model. default, NetLogo random-seed set simdesign attached nl object. model reset random seed manually, seed always repetition. However, concept nlrx based sensitivity analyses. , may want exclude stochasticity output instead multiple sensitivity analyses parameter matrix different random seeds. can observe effect stochasticity level final output, sensitivity indices. Thus suggest set experiment repetition 1 instead use nseeds variable desired simdesign run multiple simulations different random seeds. summary, set random-seed NetLogo model manually, can increase repitition experiment run several simulations equal parameterization different random seeds. Otherwise, set experiment repetition 1 increase nseeds variable desired simdesign.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"runtime-and-measurements","dir":"Articles","previous_headings":"","what":"Runtime and measurements","title":"Advanced configuration","text":"runtime NetLogo model simulations can controlled two slots experiment class: runtime - integer defines maximum number ticks simulated stopcond - NetLogo reporter reports true/false. Simulations automatically stopped TRUE reported. Defaults NA_character_ means, stop condition applied. Runtime can set 0 NA_integer_ allow simulations without pre-defined maximum runtime. However, done combination proper stop condition (stopcond) NetLogo models built-stop condition. Otherwise, simulations might get stuck endless loops. Two slots experiment class define measurements taken: tickmetrics - defines measurements taken end simulation (final tick) tick evalticks - applied tickmetrics = “true”; defines vector ticks output metrics reported. Set NA_integer_ report collected output. Depending evalticks definition, might happen, simulation stops output collected. cases, output still reported metrics collected defined evalticks filled NA. Four slots experiment class define measurements taken: metrics - vector valid NetLogo reporters used collect data (e.g. c(“count turtles”)) metrics.turtles - list named vectors strings defining valid turtles-variables taken output measurements (e.g. list(“turtles” = c(“”, “pxcor”, “pycor”, “color”)) metrics.patches - vector valid patches-variables used collect patches data (e.g. c(“pxcor”, “pycor”, “pcolor”)) metrics.links - list named vectors strings defining valid links-variables taken output measurements (e.g. list(“links” = c(“[] end1”, “[] end2”))) Although metrics slot accepts valid NetLogo reporter, “count patches”, reporter strings can become quite long confusing. suggest create NetLogo reporter procedures complex reporters order get nice clean results data frame. example, NetLogo reporter “count patches [pcolor = green]” written NetLogo reporter function: nlrx experiment metrics field can enter “green.patches” way intuitive “count patches [pcolor = green]”.","code":"to-report green.patches   report count patches with [pcolor = green] end"},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"netlogo-extensions","dir":"Articles","previous_headings":"","what":"NetLogo extensions","title":"Advanced configuration","text":"Usually, NetLogo extensions shipped NetLogo also work nlrx. However, depending system can happen NetLogo extensions found properly. solve problems advise put .nlogo model file app/models subdirectory NetLogo installation path. special case NetLogo r-extension needs stopped manually model runs. achieve , simply put r:stop command idfinal slot experiment: idfinal = \"r:stop\".","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"parallelisation-and-the-future-concept","dir":"Articles","previous_headings":"","what":"Parallelisation and the future concept","title":"Advanced configuration","text":"run_nl_all function uses future_map_dfr() function furrr package. simulations executed nested loop outer loop iterates random seeds simdesign, inner loop iterates rows siminput parameter matrix simdesign. loops can executed parallel setting appropriate plan future package. See examples details parallelisation local machines remote HPC clusters.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"parallelisation-on-local-machine","dir":"Articles","previous_headings":"Parallelisation and the future concept","what":"Parallelisation on local machine","title":"Advanced configuration","text":"Model simulations can distributed logical processor local machine parallel. future package provides two options parallelization, explicit futures implicit futures executed background block console running. Running parallel simulations explicit future command: running parallel simulations implicit future command need define type parallelisation level nested furrr::future_map_dfr() function individually. want parallelize actual simulations, need use multiprocess plan inner level. Note, use assignment operator implicit futures (%<-%): cases, number random seeds lower available processor cores, parallelisation may completely efficient. allow efficient parallelisation, even small number random seeds split parameter run_nl_all() function can used split parameter matrix smaller chunks, can distributed separate processor cores. example, simulation 1000 runs (rows siminput matrix) 2 random seeds distributed 8 processor cores. default, parallelisation loop consist two jobs (one random seed) 1000 simulation runs . experiment utilize 2 8 available processor cores. setting split parameter 4, increase total number jobs 2 8 (2 random-seeds * 4 parameter matrix chunks). job runs 1/4th parameter input matrix (250 rows) using one 2 defined random seeds.","code":"library(future) plan(multiprocess) results <- run_nl_all(nl = nl) library(future) plan(list(sequential, multiprocess)) results %<-% run_nl_all(nl = nl) library(future) plan(multisession) results <- run_nl_all(nl = nl, split = 4)"},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"parallelisation-on-remote-hpc-cluster","dir":"Articles","previous_headings":"Parallelisation and the future concept","what":"Parallelisation on remote HPC cluster","title":"Advanced configuration","text":"option requires access remote HPC cluster. example gives guidance examples sending jobs R session local machine HPC running slurm. Details might different depending HPC setup. settings, ssh access slurm templates need defined access remote HPC clusters local R session. Please check detailed HPC setup manual examples required settings HPC running slurm. order run NetLogo models remote HPCs, required software needs installed remote system well: java, Netlogo, R, nlrx required R-packages (future/clusterMQ, …). course NetLogo model files need available remote machine well.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"using-the-future-framework","dir":"Articles","previous_headings":"Parallelisation and the future concept > Parallelisation on remote HPC cluster","what":"Using the future framework","title":"Advanced configuration","text":"sending jobs remote HPC future framework, need install load additional R packages adjust future plan executing run_nl_all(). need define path ssh key, server address HPC, user name HPC path slurm template file HPC. Please also make sure nlpath, modelpath outpath variables within nl object point locations filesystem HPC local filesystem.","code":"# Load required packages library(future) library(future.batchtools) library(debugme) Sys.setenv(DEBUGME='batchtools') library(batchtools)  # Define the path to the ssh key for your machine: options(future.makeNodePSOCK.rshopts = c(\"-i\", \"/patch/to/id_rsa\")) # Define server and your login credentials for the remote HPC: login <- tweak(remote, workers=\"server.HPC.de\", user=\"username\")  # Define plan for future environment: bsub <- tweak(batchtools_slurm, template = \"slurm.tmpl\", # define name of slurm tmeplate on HPC filesystem               resources = list(job.name = \"jobname\", # define jobname                                log.file = \"jobname.log\", # define logfile name                                queue = \"medium\",  # define HPC queue                                service = \"normal\", # define HPC service                                walltime = \"00:30\", # define walltime                                n_jobs = \"1\",   # define number of processes per job                                mem_cpu = \"4000\") # define memory per cpu     # Load HPC plan: plan(list(login,           bsub,           multisession))  # Execute simulations results <- run_nl_all(nl = nl)"},{"path":"https://docs.ropensci.org/nlrx/articles/furthernotes.html","id":"using-the-clustermq-framework","dir":"Articles","previous_headings":"Parallelisation and the future concept > Parallelisation on remote HPC cluster","what":"Using the clusterMQ framework","title":"Advanced configuration","text":"clusterMQ framework somewhat different future framework. However, experience worked reliable combination slurm HPC. installation clustermq .Rprofile settings see also detailed HPC setup manual. clusterMQ directly support parallelisation nested furrr::future_map_dfr() loops run_nl_all() function. need define parallel simulation function, using run_nl_one() function nlrx package:","code":"library(clustermq)  # First, we set the total number of jobs for the HPC # In this example we run each simulation as an individual job (recommended). # Thus to calculate the number of jobs we just multiply the number of parameterizations of the simdesign with the number of random seeds. # If you want to group several runs into the same job you can adjust this line and choose a lower number. # However, the number must be chosen that nrow(nl@simdesign@siminput)/njobs results in an integer value njobs <- nrow(nl@simdesign@siminput) * length(nl@simdesign@simseeds)  # Second, we generate vectors for looping trough model runs. # We generate a vector for simpinputrows by repeating the sequence of parameterisations for each seed. # Then, we generate a vector of random-seeds by repeating each seed for n times, where n is the number of siminputrows. siminputrows <- rep(seq(1:nrow(nl@simdesign@siminput)), length(nl@simdesign@simseeds)) rndseeds <- rep(nl@simdesign@simseeds, each=nrow(nl@simdesign@siminput))  # Third, we define our simulation function # Please adjust the path to the temporary file directory simfun <- function(nl, siminputrow, rndseed, writeRDS=FALSE) {   unixtools::set.tempdir(\"/hpath/to/temp/dir\")   library(nlrx)   res <- run_nl_one(nl = nl, siminputrow = siminputrow, seed = rndseed, writeRDS = TRUE)   return(res) }  # Fourth, use the Q function from the clustermq package to run the jobs on the HPC: # The q function loops through our siminputrows and rndseeds vectors. # The function creates njobs jobs and distributes corresponding chunks of the input vectors to these jobs for executing the simulation function simfun. # As constants we provide our nl object and the function parameter writeRDS.  # If write RDS is true, an *.rds file will be written on the HPC after each jobs has finished. # This can be useful to gain results from completed runs after a crash has occured. results <- clustermq::Q(fun = simfun,                          siminputrow = siminputrows,                         rndseed = rndseeds,                         const = list(nl = nl,                                      writeRDS = TRUE),                         export = list(),                          seed = 42,                          n_jobs = njobs,                          template = list(job_name = \"jobname\", # define jobname                                         log.file = \"jobname.log\", # define logfile name                                         queue = \"medium\",  # define HPC queue                                         service = \"normal\", # define HPC service                                         walltime = \"00:30:00\", # define walltime                                         mem_cpu = \"4000\")) # define memory per cpu     # The Q function reports the individual results of each job as a list # Thus, we convert the list results to tibble format: results <- dplyr::bind_rows(results)"},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"nlrx","dir":"Articles","previous_headings":"","what":"nlrx","title":"Get Started","text":"nlrx package provides tools setup execute NetLogo simulations R. NetLogo free, open-source cross-platform modelling environment simulating natural social phenomena. NetLogo focusses implementation agent-based spatially explicit simulation models, although system dynamics models supported well. NetLogo developed maintained Center Connected Learning Computer-Based Modeling, Northwestern University, Evanston, IL. details NetLogo available online: NetLogo online documentation NetLogo comes built-experiment tool Behavior Space allows setup execute model simulations different settings parameter variations collect model output. experiment tool can executed via command line combination XML file contains experiment specifications, runtime, variables, output measurements, stop conditions, . One limitation Behavior Space , supports full-factorial parameter designs, may appropriate complex model analyses. Furthermore, Behavior Space experiment specifications stored within NetLogo file easily accessible R. However, many cases useful store specifications along model output analyses results order enable fully reproducible model analyses. nlrx package utilizes commandline functionality Behavior Space execute NetLogo simulations directly R. Instead defining experiments within NetLogo Behavior Space, experiments defined R using class objects nlrx package. class objects hold information needed run experiments remotely R, path NetLogo installation folder, path model file experiment specifications . nlrx provides useful helper functions generate parameter input matrices parameter range definitions cover wide range parameter exploration approaches. storing relevant information simulation experiments, including output model simulations one class object, experiments can easily stored shared. summary, nlrx package uses similar structure NetLogos Behavior Space offers flexibility additional tools running reproducible complex model analyses directly R.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"publication","dir":"Articles","previous_headings":"nlrx","what":"Publication","title":"Get Started","text":"information package functionality detailed code examples can found accompanying publication: Salecker J, Sciaini M, Meyer KM, Wiegand K. nlrx r package: next-generation framework reproducible NetLogo model analyses. Methods Ecol Evol. 2019;2041-210X. https://doi.org/10.1111/2041-210X.13286. Get citation information nlrx R citation(package = 'nlrx').","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"netlogo","dir":"Articles","previous_headings":"nlrx > Prerequirements","what":"NetLogo","title":"Get Started","text":"order use nlrx package, NetLogo (>=5.3.1) needs installed system used execute model simulations (local/remote). remote execution, NetLogo needs installed remote machines well. nlrx package provides utility function (download_netlogo()) can used download unzip (unix systems) specified NetLogo version local folder. windows machines, downloaded file needs executed order install NetLogo local system. running MacOS, please use Linux tar.gz version NetLogo (either NetLogo Homepage using download_netlogo() function). dmg version NetLogo homepage compatible nlrx. code snippets homepage compatible Netlogo <= 6.2.2. version 6.3.0, folder structure NetLogo slighlty updated, thus modelpath code snippets need adjusted accordingly (\"app/\" folder needs removed modelpath).","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"java","dir":"Articles","previous_headings":"nlrx > Prerequirements","what":"Java","title":"Get Started","text":"NetLogo executed Java virtual machine, Java needs installed local/remote system well. recommend Oracle Java SE Development Kit 8 openjdk. nlrx package might work without setting Java system path explicitly, recommend make sure JAVA_HOME points correct Java installation system.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"installation","dir":"Articles","previous_headings":"nlrx","what":"Installation","title":"Get Started","text":"can install released version nlrx CRAN : development version GitHub :","code":"install.packages(\"nlrx\") # install.packages(\"remotes\") remotes::install_github(\"ropensci/nlrx\")"},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"get-started","dir":"Articles","previous_headings":"nlrx","what":"Get started","title":"Get Started","text":"General information needed run NetLogo simulations remotely, path NetLogo installation folder stored within nl class object. Nested within nl class classes experiment simdesign. experiment class stores experiment specifications. attaching valid experiment, simdesign class object can attached nl class object, using one simdesign helper functions. helper functions create different parameter input matrices experiment variable definitions can executed run_nl_one() run_nl_all() functions. nested design allows store everything related experiment within one R object. Additionally, different simdesign helper functions can applied nl object order repeat experiment different parameter exploration methods (simdesigns).","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"step-by-step-application-example","dir":"Articles","previous_headings":"nlrx > Get started","what":"Step by step application example","title":"Get Started","text":"“Wolf Sheep Predation” model NetLogo models library used present basic example setup run NetLogo model simulations R.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"step-1-create-a-nl-object","dir":"Articles","previous_headings":"nlrx > Get started > Step by step application example","what":"Step 1: Create a nl object:","title":"Get Started","text":"nl object holds information NetLogo version, path NetLogo directory defined version, path model file, desired memory java virtual machine. Depending operation system, paths NetLogo model need adjusted.","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"step-2-attach-an-experiment","dir":"Articles","previous_headings":"nlrx > Get started > Step by step application example","what":"Step 2: Attach an experiment","title":"Get Started","text":"experiment object organized similar fashion NetLogo Behavior Space experiments. contains information needed generate simulation parameter matrix execute NetLogo simulations. Details specific slots experiment class can found package documentation (?experiment) “Advanced configuration” vignette.","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list('initial-number-sheep' = list(min=50, max=150, qfun=\"qunif\"),                                              'initial-number-wolves' = list(min=50, max=150, qfun=\"qunif\")),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"step-3-attach-a-simulation-design","dir":"Articles","previous_headings":"nlrx > Get started > Step by step application example","what":"Step 3: Attach a simulation design","title":"Get Started","text":"experiment defines variables specifications model, simulation design creates parameter input table based model specifications chosen simulation design method. nlrx provides bunch different simulation designs, full-factorial, latin-hypercube, sobol, morris eFast (see “Simdesign Examples” vignette information simdesigns). simdesign helper functions need properly defined nl object valid experiment design. simdesign helper also allows define number random seeds randomly generated can used execute repeated simulations parameter matrix different random-seeds (see “Advanced configuration” vignette information random-seed repetition management). simulation design attached nl object using one simdesign helper functions:","code":"nl@simdesign <- simdesign_lhs(nl=nl,                                samples=100,                                nseeds=3,                                precision=3)"},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"step-4-run-simulations","dir":"Articles","previous_headings":"nlrx > Get started > Step by step application example","what":"Step 4: Run simulations","title":"Get Started","text":"information needed run simulations now stored within nl object. run_nl_one() function allows run one specific simulation siminput parameter table. run_nl_all() function runs loop simseeds rows parameter input table siminput. loops constructed way allows easy parallelisation, either locally remote HPC machines (see “Advanced configuration” vignette information parallelisation). running simulations might want check current nl object setup. eval_variables_constants(nl) evaluates defined variables constants correctly defined consistent attached model. print(nl) prints complete summary provided nl object including checkmarks might help indicate potential problems.","code":"# Evaluate nl object: eval_variables_constants(nl) print(nl)  # Run all simulations (loop over all siminputrows and simseeds) results <- run_nl_all(nl)"},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"step-5-attach-results-to-nl-and-run-analysis","dir":"Articles","previous_headings":"nlrx > Get started > Step by step application example","what":"Step 5: Attach results to nl and run analysis","title":"Get Started","text":"nlrx provides method specific analysis functions simulation design. Depending chosen design, function reports tibble aggregated results sensitivity indices. order run analyze_nl function, simulation output attached nl object first. simdesign class within nl object provides slot attaching output results (simoutput). output results tibble can attached slot using simdesign setter function setsim(nl, \"simoutput\"). attaching simulation results, can also written defined outpath experiment object.","code":"# Attach results to nl object: setsim(nl, \"simoutput\") <- results  # Write output to outpath of experiment within nl write_simoutput(nl)  # Do further analysis: analyze_nl(nl)"},{"path":"https://docs.ropensci.org/nlrx/articles/getstarted.html","id":"complete-code-example","dir":"Articles","previous_headings":"nlrx","what":"Complete code example","title":"Get Started","text":"code block contains code example easy copy-pasting R script:","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  # Setup nl object nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)  # Attach experiment nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list('initial-number-sheep' = list(min=50, max=150, qfun=\"qunif\"),                                              'initial-number-wolves' = list(min=50, max=150, qfun=\"qunif\")),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))  # Attach simdesign nl@simdesign <- simdesign_lhs(nl=nl,                                samples=100,                                nseeds=3,                                precision=3)  # Evaluate nl object: eval_variables_constants(nl) print(nl)  # Run all simulations (loop over all siminputrows and simseeds) results <- run_nl_all(nl)  # Attach results to nl object: setsim(nl, \"simoutput\") <- results  # Write output to outpath of experiment within nl write_simoutput(nl)  # Do further analysis: analyze_nl(nl)"},{"path":"https://docs.ropensci.org/nlrx/articles/interfacing-different-models.html","id":"diffusion-model","dir":"Articles","previous_headings":"","what":"Diffusion model","title":"Interfacing a variety of different NetLogo models","text":"diffusion model simple example plot moving turtles patches. Turtles move lattice generate heat cells move . accumulated heat also diffuses neighboring cells. order transfer spatial information NetLogo R, measure number coordinates turtles (metrics.turtles) coordinates, patch color amount heat patches (metrics.patches). converting spatial data tibble format (unnest_simoutput()), split spatial data turtles tibble patches tibble using agent column returned tibble unnest_simoutput(). plot consist geom_tile layer, displays amount heat cell geom_point layer displays movement turtles. order render animated gifs gganimate important set group property turtles layer correctly (group=).","code":"## Step1: Create a nl obejct: nl <- nl(nlversion = \"6.0.4\",          nlpath = netlogopath,          modelpath = file.path(netlogopath, \"app/models/Sample Models/Art/Diffusion Graphics.nlogo\"),          jvmmem = 1024)  ## Step2: Add Experiment nl@experiment <- experiment(expname = \"diffusion\",                             outpath = outpath,                             repetition = 1,                                tickmetrics = \"true\",                             idsetup = \"setup\",                               idgo = \"go\",                                     runtime = 500,                             evalticks = seq(1,500),                             constants = list(\"num-turtles\" = 20,                                              \"diffusion-rate\" = 1,                                              \"turtle-heat\" = 139,                                              \"turtle-speed\" = 1.0,                                              \"wander?\" = \"TRUE\"),                             metrics.turtles = list(\"turtles\" = c(\"who\", \"xcor\", \"ycor\")),                             metrics.patches = c(\"pxcor\", \"pycor\", \"pcolor\", \"heat\"))  # Evaluate if variables and constants are valid: eval_variables_constants(nl)  ## Step3: Add a Simulation Design nl@simdesign <- simdesign_simple(nl = nl,                                  nseeds = 1)   # Step4: Run simulations: results <- run_nl_all(nl = nl)  ## Postprocessing: ## Step1: Attach results to nl: setsim(nl, \"simoutput\") <- results   # Prepare data for plotting nl_spatial <- unnest_simoutput(nl) n <- nl@experiment@runtime  turtles <- nl_spatial %>% dplyr::filter(agent == \"turtles\" & `[step]` < n) %>% dplyr::select(xcor, ycor, `[step]`, who) patches <- nl_spatial %>% dplyr::filter(agent == \"patches\"& `[step]` < n) %>% dplyr::select(pxcor, pycor, pcolor, `[step]`)  ## Plot animation: p1 <- ggplot() +   geom_tile(data = patches, aes(x=pxcor, y = pycor, fill=pcolor)) +   geom_point(data = turtles, aes(x = xcor, y = ycor, group = who), size=2) +   scale_fill_carto_c(palette = \"Prism\") +   transition_time(`[step]`) +   guides(fill=\"none\", color=\"none\") +   coord_equal() +   theme_void()   gganimate::animate(p1, nframes = n, width=800, height=800, duration=6)"},{"path":"https://docs.ropensci.org/nlrx/articles/interfacing-different-models.html","id":"fire-model","dir":"Articles","previous_headings":"","what":"Fire model","title":"Interfacing a variety of different NetLogo models","text":"Similar diffusion example, fire model displays patches moving turtles. However, model contains two turtle breeds need displayed differently. Thus, also measure turtle breed (metrics.turtles). plotting split turtle data two tibbles, one breed. allows us create two different geom_point layers different aesthetics.","code":"## Step1: Create a nl obejct: nl <- nl(nlversion = \"6.0.4\",          nlpath = netlogopath,          modelpath = file.path(netlogopath, \"app/models/Sample Models/Earth Science/Fire.nlogo\"),          jvmmem = 1024)  ## Step2: Add Experiment nl@experiment <- experiment(expname = \"fire\",                             outpath = outpath,                             repetition = 1,                                 tickmetrics = \"true\",                             idsetup = \"setup\",                              idgo = \"go\",                                    runtime = 500,                             evalticks = seq(1,500),                             metrics = c(\"count patches\"),                             metrics.turtles = list(\"turtles\" = c(\"who\", \"pxcor\", \"pycor\", \"breed\", \"color\")),                             metrics.patches = c(\"pxcor\", \"pycor\", \"pcolor\"),                             constants = list('density' = 62) )  # Evaluate if variables and constants are valid: eval_variables_constants(nl)  ## Step3: Add a Simulation Design nl@simdesign <- simdesign_simple(nl = nl,                                  nseeds = 1)   # Step4: Run simulations: results <- run_nl_all(nl = nl)  ## Postprocessing: ## Step1: Attach results to nl: setsim(nl, \"simoutput\") <- results  nl_spatial <- unnest_simoutput(nl) n <- max(nl_spatial$`[step]`)           embers <- nl_spatial %>% dplyr::filter(breed == \"embers\" & agent == \"turtles\" & `[step]` < n) %>% dplyr::select(pxcor, pycor, `[step]`, color, who) fires <- nl_spatial %>% dplyr::filter(breed == \"fires\" & agent == \"turtles\" & `[step]` < n) %>% dplyr::select(pxcor, pycor, `[step]`, color, who) patches <- nl_spatial %>% dplyr::filter(agent == \"patches\" & `[step]` < n) %>% dplyr::select(pxcor, pycor, pcolor, `[step]`)  # make same space in the memory rm(nl) rm(results) rm(nl_spatial) gc()  #---------------------------------- ## Plot animation: p1 <- ggplot(embers) +   geom_tile(data = patches, aes(x=pxcor, y=pycor, fill=factor(pcolor))) +   geom_point(data = embers, aes(x = pxcor, y = pycor, color = color, group = who), size=2) +   scale_color_gradientn(colors = rev(cartography::carto.pal(\"orange.pal\", n1 = 8))) +   geom_point(data = fires, aes(x = pxcor, y = pycor, color = color, group = who), size=3) +   scale_fill_manual(values = c(\"0\" = \"gray24\", \"55\" = \"#83B37D\", \"11.4\" = \"#B59A89\")) +   transition_time(`[step]`) +   guides(fill=\"none\", color=\"none\") +   coord_equal() +   theme_void()     g1 <- gganimate::animate(p1, nframes = n, width=800, height=800, duration = 6)"},{"path":"https://docs.ropensci.org/nlrx/articles/interfacing-different-models.html","id":"ants-model","dir":"Articles","previous_headings":"","what":"Ants model","title":"Interfacing a variety of different NetLogo models","text":"Ants model another typical example displaying patches moving turtles. Ants move across lattice order gather food food sources returning food nest center. Ants carrying food leave trail chemicals cells move . chemicals also diffuse neighboring cells time. Displaying patches output model straightforward three different groups patches exist: food sources, ants nest patches colored depending amount chemicals patch contains. order transfer spatial information NetLogo R, measure number, coordinates breed turtles (metrics.turtles) coordinates, patch color, amount chemicals, presence food food source number patches (metrics.patches). converting spatial data tibble format (unnest_simoutput()), split patches information three objects order display three groups patches: chem_dat: Contains chemical distribution patches. amount chemicals patch plotted using geom_tile layer acts base layer plot. food_dat: Contains patches coordinates patches contain food sources (food > 0). food sources plotted adding square shaped geom_point layer top chemicals distribution layer. nest_dat: Contains patches coordinates nest patch. nest plotted adding large circle geom_point layer top. turtle data plotted adding another geom_text layer, using Yen sign (￥) displays movement turtles. order render animated gifs gganimate important set group property layer correctly (group=). plot need stored object can rendered gganimate function. cases, important set number frames explicitly number steps simulation output. Otherwise, gganimate may interpolate measured steps, may lead incorrect results.","code":"## Step1: Create a nl obejct: nl <- nl(nlversion = \"6.0.4\",          nlpath = netlogopath,          modelpath = file.path(netlogopath, \"app/models/Sample Models/Biology/Ants.nlogo\"),          jvmmem = 1024)  ## Step2: Add Experiment nl@experiment <- experiment(expname = \"ants\",                             outpath = outpath,                             repetition = 1,                                   tickmetrics = \"true\",                             idsetup = \"setup\",                                idgo = \"go\",                                      runtime = 1000,                             evalticks = seq(1,1000),                             metrics.turtles = list(\"turtles\" = c(\"who\", \"pxcor\", \"pycor\", \"breed\")),                             metrics.patches = c(\"pxcor\", \"pycor\", \"pcolor\", \"chemical\", \"food\", \"food-source-number\"),                             constants = list(\"population\" = 125,                                              'diffusion-rate' = 50,                                              'evaporation-rate' = 10))  ## Step3: Add a Simulation Design nl@simdesign <- simdesign_simple(nl = nl,                                  nseeds = 1)   ## Step4: Run simulations: results <- run_nl_all(nl = nl)  ## Step5: Attach results to nl and reformat spatial data with get_nl_spatial() setsim(nl, \"simoutput\") <- results nl_spatial <- unnest_simoutput(nl)  ## Step6: Prepare data for plotting # Extract infromation on food sources and select maximum step as simulation length: food_dat <- nl_spatial %>% dplyr::filter(food > 0) %>% dplyr::select(pxcor, pycor, `[step]`) nmax <- max(food_dat$`[step]`) food_dat <- food_dat %>% dplyr::filter(`[step]` %in% 1:nmax) # Extract information on chemicals and apply minimum treshhold for coloring: chem_dat <- nl_spatial %>% dplyr::filter(`[step]` %in% 1:nmax) %>% dplyr::select(pxcor, pycor, chemical, `[step]`) chem_dat$chemical <- ifelse(chem_dat$chemical <= 0.2, NA, chem_dat$chemical) # Extract information on turtle positions: turt_dat <- nl_spatial %>% dplyr::filter(!is.na(who)) %>% dplyr::filter(`[step]` %in% 1:nmax) %>% dplyr::select(pxcor, pycor, who, `[step]`) # Create a new data frame to overlay the nest position (in this case the center of the world 0,0) nest_dat <- food_dat nest_dat$pxcor <- 0 nest_dat$pycor <- 0  ## Step7: Plotting p1 <- ggplot(food_dat) +   geom_tile(data=chem_dat, aes(x=pxcor, y=pycor, fill=sqrt(chemical))) +   geom_point(data=food_dat, aes(x=pxcor, y=pycor), color=\"black\", shape=15, size=4.5, alpha=1) +   geom_text(data=turt_dat, aes(x=pxcor, y=pycor, group=who, color=as.numeric(who)), size=5, alpha=1, label=\"￥\") +   geom_point(data=nest_dat, aes(x=pxcor, y=pycor), color=\"brown\", fill=\"white\", size=30, stroke=2, shape=21) +   scale_fill_viridis_c(direction=-1, option=\"magma\", na.value = \"white\") +   scale_color_gradient_tableau(palette=\"Orange\") +   transition_time(`[step]`) +   guides(fill=\"none\", color=\"none\") +   coord_equal() +   labs(title = 'Step: {frame_time}') +   theme_void()  ## Step8: Animate the plot and use 1 frame for each step of the model simulations gganimate::animate(p1, nframes = nmax, width=800, height=800, fps=10)"},{"path":"https://docs.ropensci.org/nlrx/articles/interfacing-different-models.html","id":"waves-model","dir":"Articles","previous_headings":"","what":"Waves model","title":"Interfacing a variety of different NetLogo models","text":"waves model contains patch information. Three types turtle agents present model: waves, edges driver. However, agents defined using breeds using turtles-variables (driver?, edge?). addition two variables measure number, turtle coordinates turtle color. , plotting split spatial data tibble unnest_simoutput() three different tibbles, one agent group. agent groups plotted using geom_point layers different aesthetics. Instead simple simdesign one parameterization, example uses distinct simdesign 4 different friction values. can use facet functionality ggplot visualize four model runs .","code":"## The models library filepath pointing to the waves model contains an ampersand which needs to be escaped on Windows but not on Linux. ## Choose the filepath according to your OS: ## Windows: modelpath <- \"app/models/Sample Models/Chemistry ^& Physics/Waves/Wave Machine.nlogo\" ## Linux: modelpath <- \"app/models/Sample Models/Chemistry & Physics/Waves/Wave Machine.nlogo\"  ## Step1: Create a nl obejct: nl <- nl(nlversion = \"6.0.4\",          nlpath = netlogopath,          modelpath = file.path(netlogopath, modelpath),          jvmmem = 1024)  ## Step2: Add Experiment nl@experiment <- experiment(expname = \"waves\",                             outpath = outpath,                             repetition = 1,                                   tickmetrics = \"true\",                             idsetup = \"setup\",                               idgo = \"go\",                             runtime = 100,                             evalticks = seq(1,100),                             variables = list('friction' = list(values = c(5,25,50,90))),                             constants = list(\"stiffness\" = 20),                             metrics.turtles = list(\"turtles\" = c(\"who\", \"xcor\", \"ycor\", \"driver?\", \"edge?\", \"color\")))  ## Step3: Add a Simulation Design nl@simdesign <- simdesign_distinct(nl = nl,                                    nseeds = 1)   # Step4: Run simulations: results <- run_nl_all(nl = nl)  ## Postprocessing: ## Step1: Attach results to nl: setsim(nl, \"simoutput\") <- results   # Prepare data for plotting nl_spatial <- unnest_simoutput(nl)  nl_spatial$friction <- factor(nl_spatial$friction) levels(nl_spatial$friction) <- c(\"Friction = 5\",                                  \"Friction = 25\",                                  \"Friction = 50\",                                  \"Friction = 90\")  n <- nl@experiment@runtime  waves  <- nl_spatial %>% dplyr::filter(`driver?` == \"false\" & `edge?` == \"false\" & `[step]` < n) %>% dplyr::select(xcor, ycor, `[step]`, who, color, friction) egde   <- nl_spatial %>% dplyr::filter(`driver?` == \"false\" & `edge?` == \"true\" & `[step]` < n) %>% dplyr::select(xcor, ycor, `[step]`, who, friction) driver <- nl_spatial %>% dplyr::filter(`driver?` == \"true\" & `edge?` == \"false\" & `[step]` < n) %>% dplyr::select(xcor, ycor, `[step]`, who, friction)  p1 <- ggplot(waves) +   geom_point(data = waves, aes(x = xcor, y = ycor, group = who, color = color), size=2) +   geom_point(data = driver, aes(x = xcor, y = ycor, group = who), size=2, color = \"grey\") +   geom_point(data = egde, aes(x = xcor, y = ycor, group = who), size=2, color = \"black\") +   facet_wrap(~friction) +   transition_time(`[step]`) +   guides(color=\"none\") +   coord_equal() +   theme_void()   gganimate::animate(p1, width=800, height=800, duration = 6)"},{"path":"https://docs.ropensci.org/nlrx/articles/interfacing-different-models.html","id":"flocking-model","dir":"Articles","previous_headings":"","what":"Flocking Model","title":"Interfacing a variety of different NetLogo models","text":"flocking model describes bird flocking formation using simplified movement rules. model, headings (=viewing angles) agents crucial. NetLogo heading system measured degree, ranging 0 359. agent heading = 0 pointing straight top border lattice. order transfer NetLogo heading system ggplot gganimate angle system, conversions need done. type conversion depends geom used plotting. present two examples heading conversion: geom_text can used plot arrows pointing heading agent. geom_text also uses degree angles, however angle 0 means text pointing right edge plotting area. Furthermore, angles counter-clockwise, whereas NetLogo headings defined clockwise direction. case use right-pointing ASCII-arrow geom_text label. Thus, need shift NetLogo headings 90 degree right invert direction multiplying headings -1. geom_spoke can used plot arrows pointing heading agent. geom_spoke uses radians angles. Similar geom_text angles, angle 0 pointing right angles defined counter-clockwise direction. Thus, need shift NetLogo headings 90 degree right, inverse direction multiplying headings -1 finally transform degree angles radians angles.","code":"## Step1: Create a nl obejct: nl <- nl(nlversion = \"6.0.4\",          nlpath = netlogopath,          modelpath = file.path(netlogopath, \"app/models/Sample Models/Biology/Flocking.nlogo\"),          jvmmem = 1024)  ## Step2: Add Experiment nl@experiment <- experiment(expname = \"flocking\",                             outpath = outpath,                             repetition = 1,                                   tickmetrics = \"true\",                             idsetup = \"setup\",                                idgo = \"go\",                                      runtime = 300,                             evalticks = seq(1,300),                             constants = list(\"population\" = 100,                                              \"vision\" = 5,                                              \"minimum-separation\" = 1,                                               \"max-align-turn\" = 4,                                              \"max-cohere-turn\" = 4,                                              \"max-separate-turn\" = 4),                             metrics.turtles = list(\"turtles\" = c(\"who\", \"xcor\", \"ycor\", \"heading\", \"color\")))  # Evaluate if variables and constants are valid: eval_variables_constants(nl)  ## Step3: Add a Simulation Design nl@simdesign <- simdesign_simple(nl = nl,                                  nseeds = 1)   # Step4: Run simulations: results <- run_nl_all(nl = nl)  setsim(nl, \"simoutput\") <- results  nl_spatial <- unnest_simoutput(nl)  ## Calculate angles for plotting: # (a) convert NetLogo degree headings (clockwise with 0 = top) to geom_text degree angle (counter-clockwise with 0 = right) # (b) convert geom_text degree angle to geom_spoke radians angle nl_spatial <- nl_spatial %>%    dplyr::select(`[step]`, who, xcor, ycor, heading, color) %>%    mutate(heading_text = ((heading * -1) + 90)) %>%    mutate(heading_radians = ((heading_text * pi) / 180))  # Plot with geom_point and geom_spoke p1 <- ggplot(nl_spatial, aes(x=xcor, y=ycor)) +   geom_point(aes(color=color, group=who)) +   geom_spoke(aes(color=color, group=who, angle=heading_radians), arrow=arrow(length=unit(0.2, \"inches\")), radius=1) +   scale_color_viridis_c() +   guides(color=FALSE) +   transition_time(`[step]`) +   coord_equal() +   theme_void()   gganimate::animate(p1, nframes=max(nl_spatial$`[step]`), width=600, height=600, fps=20) # Plot with geom_text p2 <- ggplot(nl_spatial, aes(x=xcor, y=ycor)) +   geom_text(aes(color=color, group=who, angle=heading_text), label=\"→\", size=5) +   scale_color_viridis_c() +   guides(color=FALSE) +   transition_time(`[step]`) +   coord_equal() +   theme_void()   gganimate::animate(p2, nframes=max(nl_spatial$`[step]`), width=600, height=600, fps=20)"},{"path":"https://docs.ropensci.org/nlrx/articles/interfacing-different-models.html","id":"preferential-attachment","dir":"Articles","previous_headings":"","what":"Preferential Attachment","title":"Interfacing a variety of different NetLogo models","text":"preferential attachment model NetLogo models library simple model growing network. New nodes spawn time step connect already existing network. network realized connecting turtles links. example shows link metrics can measured, using metrics.links slot experiment. Link positions NetLogo defined start end points (end1, end2) using numbers turtles connect. Thus, tick measure end1 end2 link (metrics.links) number, xcor, ycor color node turtle (metrics.turtles).","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/interfacing-different-models.html","id":"visualize-network-using-ggplot","dir":"Articles","previous_headings":"Preferential Attachment","what":"Visualize network using ggplot","title":"Interfacing a variety of different NetLogo models","text":", attaching simulation results postprocessing unnest_simoutput() split tibble turtles tibble links tibble subsetting group column. Finally, need reference number start end points links actual coordinates corresponding turtle step. can easily achieved two left_join calls, one end1 numbers one end2 numbers.","code":"## Step1: Create a nl obejct: nl <- nl(nlversion = \"6.0.4\",          nlpath = netlogopath,          modelpath = file.path(netlogopath, \"app/models/Sample Models/Networks/Preferential Attachment.nlogo\"),          jvmmem = 1024)  ## Step2: Add Experiment nl@experiment <- experiment(expname = \"networks\",                             outpath = outpath,                             repetition = 1,                                 tickmetrics = \"true\",                             idsetup = \"setup\",                              idgo = \"go\",                                    runtime = 200,                             evalticks = seq(1,200),                             constants = list(\"layout?\" = TRUE),                             metrics.turtles = list(\"turtles\" = c(\"who\",                                                                   \"xcor\",                                                                                              \"ycor\",                                                                  \"color\")),                             metrics.links = list(\"links\" = c(\"[who] of end1\",\"[who] of end2\")))  ## Step3: Add simdesign nl@simdesign <- simdesign_simple(nl=nl, nseeds = 1)  ## Run simulation: results <- run_nl_one(nl = nl,                       seed = getsim(nl, \"simseeds\")[1],                       siminputrow = 1)  ## Attach results to nl setsim(nl, \"simoutput\") <- results  ## Postprocess spatial metrics with get_nl_spatial: nl_spatial <- unnest_simoutput(nl)  ## Subset nl_spatial using the group column: nl_links <- nl_spatial %>%   dplyr::filter(agent == \"links\") %>%    dplyr::select(-who, -xcor, -ycor, -color)  nl_turtles <- nl_spatial %>%   dplyr::filter(agent == \"turtles\") %>%    dplyr::select(`[step]`, who, xcor, ycor, color)  ## Reference who numbers of link start (end1) and end (end2) points to actual coordinates: nl_links <- nl_links %>%    dplyr::left_join(nl_turtles, by=c(\"[step]\"=\"[step]\",\"end1\" = \"who\")) %>%    dplyr::left_join(nl_turtles, by=c(\"[step]\"=\"[step]\",\"end2\" = \"who\"))  ## Plot: p1 <- ggplot() +   geom_point(data=nl_turtles, aes(x = xcor, y = ycor, group=who), color=\"red\", size=2) +   geom_segment(data=nl_links, aes(x = xcor.x, y = ycor.x, xend = xcor.y, yend = ycor.y), size=0.5) +   transition_time(`[step]`) +   coord_equal() +   theme_void()  gganimate::animate(p1, nframes = max(nl_turtles$`[step]`), width=400, height=400, fps=8)"},{"path":"https://docs.ropensci.org/nlrx/articles/interfacing-different-models.html","id":"visualize-network-using-igraph-package","dir":"Articles","previous_headings":"Preferential Attachment","what":"Visualize network using igraph package","title":"Interfacing a variety of different NetLogo models","text":"also possible use igraph package visualize NetLogo network. use nl_to_graph() function nlrx package convert spatial data igraph object. want display network one simulation step, thus filter spatial data select last simulation step. , split data turtles links tibble rename columns. conversion igraph object can use power network analysis functions igraph package analyses. example perform community cluster algorithm color nodes based community membership within network.","code":"## Load igraph package and convert spatial tibbles to igraph: library(igraph) nw.all <- nl_to_graph(nl)  ## Select the last step and extract list element to get igraph object nw <- nw.all %>% dplyr::filter(`[step]` == max(`[step]`)) nw <- nw$spatial.links[[1]]  ## Perform community cluster algorithm and set community dependend colors: com <- walktrap.community(nw) V(nw)$community <- com$membership rain <- rainbow(14, alpha=.5) V(nw)$color <- rain[V(nw)$community]  ## Plot: plot(nw,      vertex.label=NA,      vertex.size=4,      edge.curved=0,      layout=layout_with_fr(nw, niter = 3000))"},{"path":"https://docs.ropensci.org/nlrx/articles/manual-output.html","id":"capturing-output-manually","dir":"Articles","previous_headings":"","what":"Capturing output manually","title":"Capturing NetLogo output manually","text":"nlrx provides metrics, metrics.turtles, metrics.patches metrics.links slots exerpiment class capture global agent related output NetLogo models, might sufficient certain circumstances. example, metrics slot track collect nested list output similar complex data structures NetLogo arrays matrices. Another example spatial output shapefiles grids, generated GIS extension. Additionally, might already implemented complex routines model write model output disk. main question vignette answer : can link self-written output nlrx experiment. show one basic example works. example write ascii raster files using GIS extension NetLogo. However, workflow can course applied types output, example text files written file-type primitives csv extension.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/manual-output.html","id":"step-1-creating-an-id-widget-on-your-model-interface","dir":"Articles","previous_headings":"Capturing output manually","what":"Step 1: Creating an ID widget on your model interface","title":"Capturing NetLogo output manually","text":"order link self-written output nlrx simulations within R session, need transfer current nlrx siminputrow seed NetLogo model. way, executing run_nl_all(), within simulation NetLogo model exactly “knows” parameter row (siminputrow) currently simulated corresponding random seed. transfer information just need create string input widget model interface. example , created widget bottom Wolf Sheep model called nlrx_id.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/manual-output.html","id":"step-2-define-idrunnum-of-the-experiment","dir":"Articles","previous_headings":"Capturing output manually","what":"Step 2: Define idrunnum of the experiment","title":"Capturing NetLogo output manually","text":"idrunnum field experiment built-feature allows transfer current experiment name, siminputrow random seed defined NetLogo gui parameter widget. case want use newly created nlrx_id string input field, just set idrunnum = nlrx_id.","code":"# Attach experiment nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             idrunnum=\"nlrx_id\",                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\"),                             variables = list('initial-number-sheep' = list(min=50, max=150, qfun=\"qunif\"),                                              'initial-number-wolves' = list(min=50, max=150, qfun=\"qunif\")),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/manual-output.html","id":"step-3-use-nlrx_id-within-netlogo-model-to-tag-self-written-output","dir":"Articles","previous_headings":"Capturing output manually","what":"Step 3: Use nlrx_id within NetLogo model to tag self-written output","title":"Capturing NetLogo output manually","text":"can now use nlrx_id field within NetLogo model tag self-written output. One way tag filenames self-written output. example raster grids created written end model run: , first create filename using string nlrx_id field (contains current experiment name, siminputrow random seed divided underscore) add current tick (containing leading zeros adding 1000 tick count removing first number afterwards). course also use different approaches utilize information within nlrx_id field tagging output.","code":"to write_final_landscape   let filename (word nlrx_id \"_\" but-first (word (1000 + ticks)) \".asc\")   if (file-exists? filename) [file-delete filename]   gis:store-dataset final_landscape filename   end"},{"path":"https://docs.ropensci.org/nlrx/articles/manual-output.html","id":"step-4-linking-self-written-output-to-nlrx-collected-output","dir":"Articles","previous_headings":"Capturing output manually","what":"Step 4: Linking self-written output to nlrx collected output","title":"Capturing NetLogo output manually","text":"Finally, want read self-written raster files, calculate landscape metrics add results table received run_nl_all() function. basically two types output now: tibble model executions, folder self-written output (defined subfolder modelpath). can now loop files folder, read content use strplit function filename identify experiment name, siminputrow, random seed tick count. example application, calculate landscapemetrics using landscapemetrics package. Finally put everything results tibble: Now identifier columns nlrx reported output self-written output tibble allows us join tibbles together:","code":"## Output from nlrx simulations: results <- run_nl_all(nl) ## Self-writte output directory: ascdir <- file.path(dirname(nl@modelpath), \"output\") results.lsm <- purrr::map_dfr(list.files(ascdir, pattern = \"asc\", full.names = TRUE), function(x) {   x.split <- strsplit(x, \"_\")[[1]]   x.tick <- as.numeric(strsplit(x.split[[length(x.split)]], \"\\\\.\")[[1]][[1]])   x.siminputrow <- as.numeric(x.split[[length(x.split) - 1]][[1]])   x.seed <- as.numeric(x.split[[length(x.split) - 2]][[1]])   x.raster <- raster(x)      ## netlogo asc files use NaN as default nodata value in the asc file header   ## this leads to problems when reading the raster because it sets ´zeros to NA   ## here we set NAs back to zertos manually:   x.raster <- reclassify(x.raster, cbind(NA, 0))      ## Calculate landscape metrics:   metrics <- c(\"lsm_l_ed\", \"lsm_l_shdi\", \"lsm_l_lsi\", \"lsm_l_lpi\", \"lsm_l_area_mn\")   x.metrics <- landscapemetrics::calculate_lsm(x.raster, what=metrics) %>%      dplyr::select(metric, value) %>%      tidyr::pivot_wider(names_from=metric, values_from = value)      x.final <- tibble::tibble(siminputrow = x.siminputrow,                             `[step]` = x.tick,                             `random-seed` = x.seed)      x.final <- cbind(x.final, x.metrics)   return(x.final) }) ## Combine results with lsm and store: results <- results %>% left_join(results.lsm, by = c(\"siminputrow\", \"random-seed\", \"[step]\"))  ## Attach output to nl object: setsim(nl, \"simoutput\") <- results saveRDS(nl, file = file.path(outpath, \"my_final_nl_object.rds\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/nlrx_nldoc.html","id":"nldoc","dir":"Articles","previous_headings":"","what":"nldoc","title":"NetLogo documentation with nlrx","text":"nldoc function within nlrx can used create NetLogo documentations using R. function searches NetLogo model files Markdown headers. documentation can created different formats (html, pdf, docx) styles. also utility functions, creation procedure network (nldoc_network()).","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/articles/nlrx_nldoc.html","id":"model-documentation","dir":"Articles","previous_headings":"nldoc > Example","what":"Model documentation","title":"NetLogo documentation with nlrx","text":"order create NetLogo model documentations nlrx, documentation tags need added NetLogo model. tags similar roxygen documentation tags called noxygen tags purpose package. Noxygen tags organized three main groups: `@model Defines title model documentation `@author Defines author model (multiple author tags can used define several authors) `@global Defines name global definitions (e.g. globals, patches-owns, breeds, …) `@details description global definition (multi line: line needs start details tag) `@code TRUE/FALSE following code included documentation `@procedure Defines name model procedure `@param Defines parameter needs provided function call `@return Description return value (case -report functions) `@details description model procedure (multi line: line needs start details tag) `@code TRUE/FALSE following code included documentation example, start NetLogo model file noxygen code look like : One, model files containing noxygen tags, can used call nldoc function nlrx package. procedure creates markdown file renders documentation specified output. example, added noxygen tags Wolf Sheep model NetLogo models library. modified model files hosted github. use files render documentation html. Example output: nldoc documentation","code":";`@model Wolf Sheep Predation (NetLogo models library) ;`@author Uri Wilenski  ;`@global Subfiles ;`@details We included a subilfe to the wolf sheep model to demonstrate that nls files are supported by nldoc ;`@code TRUE __includes[\"Wolf Sheep Predation Extra.nls\"]  ;`@global Global variables ;`@details There is only one global variable that stores the max number of sheep allowed ;`@code TRUE globals [ max-sheep ]  ; dont let sheep population grow too large  ;`@global Breeds ;`@details There are two breeds: sheep and wolves ;`@code TRUE breed [ sheep a-sheep ]  ; sheep is its own plural, so we use \"a-sheep\" as the singular. breed [ wolves wolf ]  ;`@global Agent properties ;`@details Sheep and wolves have a energy variable. Patches have a countdown variable to store the current state of the grass regrowth countdown. ;`@code TRUE turtles-own [ energy ]       ; both wolves and sheep have energy patches-own [ countdown ]  ;`@procedure Setup ;`@details The setup procedure first resets the model. ;`@details Depending on the chosen model version, grass patches are initialized. ;`@details Finally, wolves and sheep are created. ;`@code FALSE to setup   ... end # Load nlrx: library(nlrx) outpath <- tempdir()  # List model files (.nls subfiles are also supported) modelfiles <- c(\"https://raw.githubusercontent.com/nldoc/nldoc_pg/master/WSP.nlogo\",                 \"https://raw.githubusercontent.com/nldoc/nldoc_pg/master/WSP.nls\")    ## Create documentation: # Themes: \"journal\", \"cerulean\", \"flatly\", \"readable\", \"spacelab\", \"united\", \"cosmo\" # output_format: \"pdf \"html\" \"docx\" nldoc(modelfiles = modelfiles,       infotab=TRUE,       gui=TRUE,       bs=TRUE,       outpath = outpath,       output_format = \"html\",       number_sections = TRUE,       theme = \"cosmo\",       date = date(),       toc = TRUE)"},{"path":"https://docs.ropensci.org/nlrx/articles/nlrx_nldoc.html","id":"model-procedure-network","dir":"Articles","previous_headings":"nldoc > Example","what":"Model procedure network","title":"NetLogo documentation with nlrx","text":"Another useful function nlrx package creation model procedure graphs (nldoc_network()). function can used NetLogo model, even code contain noxygen tags.","code":"# Load nlrx: library(nlrx)  # List model files (.nls subfiles are also supported) modelfiles <- c(\"https://raw.githubusercontent.com/nldoc/nldoc_pg/master/WSP.nlogo\",                 \"https://raw.githubusercontent.com/nldoc/nldoc_pg/master/WSP.nls\")   ## Determine the function network with nldoc: nw <- nldoc_network(modelfiles)  ## Determine communities within the network and plot using Igraph package: library(igraph) com <- walktrap.community(nw) V(nw)$community <- com$membership rain <- rainbow(14, alpha=.5) V(nw)$color <- rain[V(nw)$community]  plot(nw,      edge.arrow.size=1,      vertex.label.color=\"black\",      vertex.label.dist=2.5,      vertex.size=10,      edge.curved=0,      vertex.label.cex=1.5,      layout=layout_with_fr(nw, niter = 2000))  ## Interactive plot using igraph::tkplot tkplot(nw, layout=layout_with_fr(nw, niter = 2000))"},{"path":"https://docs.ropensci.org/nlrx/articles/nlrx_papers.html","id":"publication-record","dir":"Articles","previous_headings":"","what":"Publication record","title":"Publication record","text":"page aim collect research papers used cited nlrx package. update database time time. article missing, please drop us email file issue.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/nlrx_papers.html","id":"share-your-nlrx-use-cases","dir":"Articles","previous_headings":"Publication record","what":"Share your nlrx use cases","title":"Publication record","text":"always interested kind use cases nlrx applied. therefore encourage share tips tricks nlrx nlrx community can benefit experience. nice way share use cases ropensci community board. use case also featured via ropensci twitter account. course can also get touch us want share work, e.g. documentation examples pages.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/nlrx_papers.html","id":"using-nlrx-in-your-research","dir":"Articles","previous_headings":"Publication record","what":"Using nlrx in your research","title":"Publication record","text":"use nlrx package research, please cite nlrx package : Salecker J, Sciaini M, Meyer KM, Wiegand K. nlrx r package: next-generation framework reproducible NetLogo model analyses. Methods Ecol Evol. 2019;2041-210X. https://doi.org/10.1111/2041-210X.13286. Citation information nlrx can also accessed R citation(package = 'nlrx').","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"optimization-with-nlrx","dir":"Articles","previous_headings":"","what":"Optimization with nlrx","title":"Optimization","text":"present two simple examples running optimization algorithm NetLogo model nlrx. example, use Simulated Annealing simdesign (simdesign_GenSA()). However, except parameter definitions simdesign function output function, genetic algorithm optimization (simdesign_GenAlg()) works way. use Wolf Sheep Predation model models library show basic example optimization workflow. Example 1 shows, NetLogo reporter can used fitness criterion optimization. Example 2 uses self-defined evaluation function calculates landscape metrics used fitness criterion.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-1-create-a-nl-object","dir":"Articles","previous_headings":"Example 1: NetLogo reporter as fitness criterion","what":"Step 1: Create a nl object:","title":"Optimization","text":"","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-2-attach-an-experiment","dir":"Articles","previous_headings":"Example 1: NetLogo reporter as fitness criterion","what":"Step 2: Attach an experiment","title":"Optimization","text":"want apply optimization algorithm, need define proper variable ranges. algorithm allowed change values parameters within ranges order minimize fitness criterion. example want use reporter metrics slot evaluating model runs. want find parameterization leads maximum number wolfs 50 ticks. algorithm automatically searches minimum values, add \"1 / count wolves\" metrics vector order find maximum number wolves. also important think settings tickmetrics, runtime evalticks. want consider last tick simulation, set tickmetrics “false” runtime 50. one tick measured, algorithm automatically calculates mean value selected reporter. wish apply functions aggregate temporal information one value, can use self-defined evaluation function (see Example 2).","code":"nl@experiment <- experiment(expname=\"wolf-sheep-GenSA1\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"false\",                             idsetup=\"setup\",                             idgo=\"go\",                             runtime=50,                             metrics=c(\"(1 / count wolves)\"),                             variables = list('initial-number-sheep' = list(min=50, max=150, qfun=\"qunif\"),                                              'initial-number-wolves' = list(min=50, max=150, qfun=\"qunif\")),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-3-attach-a-simulation-design","dir":"Articles","previous_headings":"Example 1: NetLogo reporter as fitness criterion","what":"Step 3: Attach a simulation design","title":"Optimization","text":"use simdesgin_GenSA() function attach Simulated Annealing simdesign. select evaluation criterion (evalcrit) assigning position reporter want evaluate within metrics vector experiment. case, one reporter metrics vector thus set evalcrit use first reporter (evalcrit = 1). control parameter allows us provide additional parameters GenSA function (see ?GenSA details). demonstration purposes, set maximum number iterations 20.","code":"nl@simdesign <- simdesign_GenSA(nl,                                  evalcrit = 1,                                  nseeds = 1,                                  control=list(maxit = 20))"},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-4-run-simulations","dir":"Articles","previous_headings":"Example 1: NetLogo reporter as fitness criterion","what":"Step 4: Run simulations","title":"Optimization","text":"optimization simdesign, run_nl_dyn() function lets execute simulations. notable differences run_nl_all() run_nl_dyn(). First, parameterizations depend results previous runs, run_nl_dyn() can parallelized. Second, procedure automatically loop created random seeds simdesign. want repeat algorithm several times, just embed run_nl_dyn() function kind loop iterate nl@simdesign@simseeds vector. Third, output run_nl_dyn() reported objects specific optimization procedures tibble format. order attach results nl object, output needs converted tibble format first. However, attaching optimization results nl enable post-processing functions nlrx package relevant storing results together nl object. design decision made order allow application method specific summary functions results optimization.","code":"results <- run_nl_dyn(nl, seed = nl@simdesign@simseeds[1])"},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-5-investigate-output","dir":"Articles","previous_headings":"Example 1: NetLogo reporter as fitness criterion","what":"Step 5: Investigate output","title":"Optimization","text":"output list Simulated Annealing procedure contains four elements: value reports minimum final value evaluation criterion. par reports parameter settings final parameterisation order defined experiment nl object. trace.mat gives detailed information optimization process iterations. counts indicates often optimization procedure executed total. order store results together nl object need attach results nl object first. explained , need enframe results tibble.","code":"results setsim(nl, \"simoutput\") <- tibble::enframe(results) saveRDS(nl, file.path(nl@experiment@outpath, \"genSA_1.rds\"))"},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-1-create-a-nl-object-1","dir":"Articles","previous_headings":"Example 2: Evaluation function as fitness criterion","what":"Step 1: Create a nl object:","title":"Optimization","text":"","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-2-attach-an-experiment-1","dir":"Articles","previous_headings":"Example 2: Evaluation function as fitness criterion","what":"Step 2: Attach an experiment","title":"Optimization","text":"want apply optimization algorithm, need define proper variable ranges. algorithm allowed change values parameters within ranges order minimize fitness criterion. example want use self-defined evaluation function calculate fitness criterion. Thus, add patch coordinates patch color (patch class indicator) metrics.patches vector. want use spatial data calculate landscape edge density index final tick find parameterization leads edge density. want consider last tick simulation, set tickmetrics “false” runtime 50.","code":"nl@experiment <- experiment(expname=\"wolf-sheep-GenSA2\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"false\",                             idsetup=\"setup\",                             idgo=\"go\",                             runtime=50,                             metrics.patches = c(\"pxcor\", \"pycor\", \"pcolor\"),                             variables = list('initial-number-sheep' = list(min=50, max=150),                                              'initial-number-wolves' = list(min=50, max=150)),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-3-attach-a-simulation-design-1","dir":"Articles","previous_headings":"Example 2: Evaluation function as fitness criterion","what":"Step 3: Attach a simulation design","title":"Optimization","text":"use simdesgin_GenSA() function attach Simulated Annealing simdesign. want post-process simulation results, need define evaluation function. evaluation function needs accept nl object input must return single numeric value. First load package landscapemetrics. convert spatial data raster format calculate landscape edge density index. Finally, report index value resulting tibble. simdesign_GenSA() function now provide evaluation function (critfun) evaluation criterion (evalcrit). control parameter allows us provide additional parameters GenSA function (see ?GenSA details). demonstration purposes, set maximum number iterations 20.","code":"critfun <- function(nl) {   library(landscapemetrics)   res_spat <- nl_to_raster(nl)   res_spat_raster <- res_spat$spatial.raster[[1]]   lsm <- lsm_l_ed(res_spat_raster)   crit <- lsm$value   return(crit) } nl@simdesign <- simdesign_GenSA(nl,                                  evalcrit = critfun,                                  nseeds = 1,                                  control=list(maxit = 20))"},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-4-run-simulations-1","dir":"Articles","previous_headings":"Example 2: Evaluation function as fitness criterion","what":"Step 4: Run simulations","title":"Optimization","text":"optimization simdesign, run_nl_dyn() function lets execute simulations. notable differences run_nl_all() run_nl_dyn(). First, parameterizations depend results previous runs, run_nl_dyn() can parallelized. Second, procedure automatically loop created random seeds simdesign. want repeat algorithm several times, just embed run_nl_dyn() function kind loop iterate nl@simdesign@simseeds vector. Third, output run_nl_dyn() reported objects specific optimization procedures tibble format. order attach results nl object, output needs converted tibble format first. However, attaching optimization results nl enable post-processing functions nlrx package relevant storing results together nl object. design decision made order allow application method specific summary functions results optimization.","code":"results <- run_nl_dyn(nl, seed = nl@simdesign@simseeds[1])"},{"path":"https://docs.ropensci.org/nlrx/articles/optimization.html","id":"step-5-investigate-output-1","dir":"Articles","previous_headings":"Example 2: Evaluation function as fitness criterion","what":"Step 5: Investigate output","title":"Optimization","text":"output list Simulated Annealing procedure contains four elements: value reports minimum final value evaluation criterion. par reports parameter settings final parameterisation order defined experiment nl object. trace.mat gives detailed information optimization process iterations. counts indicates often optimization procedure executed total. order store results together nl object need attach results nl object first. explained , need enframe results tibble.","code":"results setsim(nl, \"simoutput\") <- tibble::enframe(results) saveRDS(nl, file.path(nl@experiment@outpath, \"genSA_2.rds\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"sensitivity-analysis-with-nlrx","dir":"Articles","previous_headings":"","what":"Sensitivity Analysis with nlrx","title":"Sensitivity Analysis","text":"Different types sensitivity analyses can conducted using nlrx package. perform local sensitivity analysis, recommend using simdesign_distinct() specify local changes parameters. Afterwards proportion output change can easily calculated simulation results. nlrx package also provides simdesign helper functions conduct sophisticated methods Morris Elementary Effects Screening (simdesign_morris()), Sobol variance decomposition (simdesign_sobol(), simdesign_sobol2007(), simdesign_soboljansen()) Extended Fourier amplitude sensitivity test (simdesign_eFAST). Additionally, output Latin Hypercube Sampling designs (simdesign_lhs()) can used calculate parameter effects based Partial (rank) correlation coefficients Standardised (rank) regression coefficients. vignette, present example Morris Elementary Effects screening. sensitivity analyses simdesigns work quite similar way. Details specific methods can found corresponding simdesign help pages documentation sensitivity package. second example shows Latin Hypercube Sampling can used calculate Partial (rank) correlation coefficients Standardised (rank) regression coefficients.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"example-1-morris-elementary-effects-screening","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx","what":"Example 1: Morris elementary effects screening","title":"Sensitivity Analysis","text":"present simple example running Morris Sensitivity Analysis nlrx. use Wolf Sheep Predation model models library example.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-1-create-a-nl-object","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 1: Morris elementary effects screening","what":"Step 1: Create a nl object:","title":"Sensitivity Analysis","text":"","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-2-attach-an-experiment","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 1: Morris elementary effects screening","what":"Step 2: Attach an experiment","title":"Sensitivity Analysis","text":"example, want calculate sensitivity 3 outputs (number sheep, number wolves, number grass patches). vary numeric model parameters estimate sensitivity three defined output metrics. Thus, define parameter ranges distribution functions numeric model parameters. set runtime model 500 ticks measure metrics tick (tickmetrics = \"true\"). However, calculation sensitivity indices, want consider last 200 ticks. Thus, set evalticks seq(300,500).","code":"nl@experiment <- experiment(expname = \"wolf-sheep-morris\",                             outpath = outpath,                             repetition = 1,                                tickmetrics = \"true\",                             idsetup = \"setup\",                               idgo = \"go\",                                     runtime = 500,                             evalticks = seq(300,500),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list(\"initial-number-sheep\" = list(min=50, max=150, step=10, qfun=\"qunif\"),                                              \"initial-number-wolves\" = list(min=50, max=150, step=10, qfun=\"qunif\"),                                              \"grass-regrowth-time\" = list(min=0, max=100, step=10, qfun=\"qunif\"),                                              \"sheep-gain-from-food\" = list(min=0, max=50, step=10, qfun=\"qunif\"),                                              \"wolf-gain-from-food\" = list(min=0, max=100, step=10, qfun=\"qunif\"),                                              \"sheep-reproduce\" = list(min=0, max=20, step=5, qfun=\"qunif\"),                                              \"wolf-reproduce\" = list(min=0, max=20, step=5, qfun=\"qunif\")),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-3-attach-a-simulation-design","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 1: Morris elementary effects screening","what":"Step 3: Attach a simulation design","title":"Sensitivity Analysis","text":"use simdesgin_morris() function attach Morris Sensitivity Analysis design. morrislevels parameter sets number different values parameter (sampling density). morrisr paramater sets number repeated samplings (sampling size). morrisgridjump parameter sets number levels increased/decreased computing elementary effects. Morris recommendation set value levels / 2. can increase nseeds parameter order perform multiple runs parameter matrix different random seeds. variation repetitions indicator stochasticity effects within model. information Morris specific parameters can found description morris function sensitivity package (?morris).","code":"nl@simdesign <- simdesign_morris(nl=nl,                                  morristype=\"oat\",                                  morrislevels=4,                                  morrisr=1000,                                  morrisgridjump=2,                                  nseeds=5)"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-4-run-simulations","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 1: Morris elementary effects screening","what":"Step 4: Run simulations","title":"Sensitivity Analysis","text":"execute simulations, can use function run_nl_all(). Sensitivity analyses typically many runs need simulated, thus recommend parallelize model runs adjusting future plan (details parallelization can found “Advanced configuration” vignette).","code":"library(future) plan(multisession) results <- run_nl_all(nl)"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-5-investigate-output","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 1: Morris elementary effects screening","what":"Step 5: Investigate output","title":"Sensitivity Analysis","text":"First, need attach results nl object. results attached, can use analyze_nl() function calculate morris sensetivity indices.","code":"setsim(nl, \"simoutput\") <- results saveRDS(nl, file.path(nl@experiment@outpath, \"morris.rds\")) morris <- analyze_nl(nl)"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"example-2-latin-hypercube-sampling","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx","what":"Example 2: Latin Hypercube Sampling","title":"Sensitivity Analysis","text":"perform Latin Hypercube Sampling calculate Partial (rank) correlation coefficients Standardised (rank) regression coefficients.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-1-create-a-nl-object-1","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 2: Latin Hypercube Sampling","what":"Step 1: Create a nl object:","title":"Sensitivity Analysis","text":"","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-2-attach-an-experiment-1","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 2: Latin Hypercube Sampling","what":"Step 2: Attach an experiment","title":"Sensitivity Analysis","text":"example, want calculate sensitivity 3 outputs (number sheep, number wolves, number grass patches). vary numeric model parameters estimate sensitivity three defined output metrics. Thus, define parameter ranges distribution functions numeric model parameters. set runtime model 500 ticks measure metrics tick (evalticks = \"true\").","code":"nl@experiment <- experiment(expname = \"wolf-sheep-morris\",                             outpath = outpath,                             repetition = 1,                                tickmetrics = \"true\",                             idsetup = \"setup\",                               idgo = \"go\",                                     runtime = 500,                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list(\"initial-number-sheep\" = list(min=50, max=150, step=10, qfun=\"qunif\"),                                              \"initial-number-wolves\" = list(min=50, max=150, step=10, qfun=\"qunif\"),                                              \"grass-regrowth-time\" = list(min=0, max=100, step=10, qfun=\"qunif\"),                                              \"sheep-gain-from-food\" = list(min=0, max=50, step=10, qfun=\"qunif\"),                                              \"wolf-gain-from-food\" = list(min=0, max=100, step=10, qfun=\"qunif\"),                                              \"sheep-reproduce\" = list(min=0, max=20, step=5, qfun=\"qunif\"),                                              \"wolf-reproduce\" = list(min=0, max=20, step=5, qfun=\"qunif\")),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-3-attach-a-simulation-design-1","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 2: Latin Hypercube Sampling","what":"Step 3: Attach a simulation design","title":"Sensitivity Analysis","text":"want run Latin Hypercube Sampling, thus use simdesign_lhs() function.","code":"nl@simdesign <- simdesign_lhs(nl, samples=500, nseeds=1, precision=3)"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-4-run-simulations-1","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 2: Latin Hypercube Sampling","what":"Step 4: Run simulations","title":"Sensitivity Analysis","text":"execute simulations, can use function run_nl_all(). Sensitivity analyses typically many runs need simulated, thus recommend parallelize model runs adjusting future plan (details parallelization can found “Advanced configuration” vignette).","code":"library(future) plan(multisession) results <- run_nl_all(nl, split=10)"},{"path":"https://docs.ropensci.org/nlrx/articles/sensitivity.html","id":"step-5-investigate-output-1","dir":"Articles","previous_headings":"Sensitivity Analysis with nlrx > Example 2: Latin Hypercube Sampling","what":"Step 5: Investigate output","title":"Sensitivity Analysis","text":"First, need attach results nl object. results attached, need post-process data run pcc src function sensitivity package. first take parameter matrix (siminput) select columns variable parameters drop columns. also need rename columns pcc src support special characters (-) column names. simulation results measured tick, thus first need aggregate output. just calculate mean standard deviation outputs random-seed siminputrow combination. Afterwards, drop random seed siminputrow columns rename columns remove special characters. Finally, use datasets run pcc src functions. functions can compute coefficients one output time. Thus, nested function call inside purrr::map() function iterates column names output tibble. results reported nested list, outer element represents one calculated model outputs. inner list items represent different outputs pcc src functions. can example look pcc results one specific output using basic plot function: can also extract data tidy data format create nice plots ggplot package:","code":"setsim(nl, \"simoutput\") <- results saveRDS(nl, file.path(nl@experiment@outpath, \"lhs.rds\")) library(tidyverse) input <- getsim(nl, \"siminput\") %>%    # Take input parameter matrix   dplyr::select(names(getexp(nl, \"variables\"))) %>%  # Select variable parameters only   dplyr::rename_all(~str_replace_all(., c(\"-\" = \"_\", \"\\\\s+\" = \"_\"))) # Remove - and space characters.  output <- getsim(nl, \"simoutput\") %>%   # Take simulation output   dplyr::group_by(`random-seed`, siminputrow) %>% # Group by random seed and siminputrow   dplyr::summarise_at(getexp(nl, \"metrics\"), list(mean=mean, sd=sd)) %>% # Aggregate output   dplyr::ungroup() %>%  # Ungroup   dplyr::select(-`random-seed`, -siminputrow) %>%  # Only select metrics   dplyr::rename_all(~str_replace_all(., c(\"-\" = \"_\", \"\\\\s+\" = \"_\", \"\\\\[\" = \"_\", \"\\\\]\" = \"_\", \"=\" = \"\"))) # Remove - and space characters.  # Perform pcc and src for each output separately (map) pcc.result <- purrr::map(names(output), function(x) sensitivity::pcc(X=input, y=output[,x], nboot = 100, rank = FALSE))  src.result <- purrr::map(names(output), function(x) sensitivity::src(X=input, y=output[,x], nboot = 100, rank = FALSE)) plot(pcc.result[[1]]) pcc.result.tidy <- purrr::map_dfr(seq_along(pcc.result), function(x) {   pcc.result[[x]]$PCC %>%      tibble::rownames_to_column(var=\"parameter\") %>%      dplyr::mutate(metric = names(output)[x]) })  ggplot(pcc.result.tidy) +   coord_flip() +   facet_wrap(~metric) +   geom_point(aes(x=parameter, y=original, color=metric)) +   geom_errorbar(aes(x=parameter, ymin=`min. c.i.`, ymax=`max. c.i.`, color=metric), width=0.1)  src.result.tidy <- purrr::map_dfr(seq_along(src.result), function(x) {   src.result[[x]]$SRC %>%      tibble::rownames_to_column(var=\"parameter\") %>%      dplyr::mutate(metric = names(output)[x]) })  ggplot(src.result.tidy) +   coord_flip() +   facet_wrap(~metric) +   geom_point(aes(x=parameter, y=original, color=metric)) +   geom_errorbar(aes(x=parameter, ymin=`min. c.i.`, ymax=`max. c.i.`, color=metric), width=0.1)"},{"path":"https://docs.ropensci.org/nlrx/articles/simdesign-examples.html","id":"simdesign-examples-for-the-wolf-sheep-predation-model","dir":"Articles","previous_headings":"","what":"Simdesign examples for the Wolf Sheep Predation model","title":"Simdesign examples","text":"following section provides valid experiment setups supported simdesigns using Wolf Sheep Model NetLogo models library. First set nl object. use nl object simdesigns:","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/articles/simdesign-examples.html","id":"simple-simulation-using-constants-simdesign_simple","dir":"Articles","previous_headings":"","what":"Simple simulation using constants (simdesign_simple)","title":"Simdesign examples","text":"simple simdesign uses defined constants reports parameter matrix one parameterization. setup simple simdesign, variables defined. simple simdesign can used test specific parameterisation model. also useful creating animated output one specific parameterisation (see “Capturing Spatial NetLogo Output” vignette). simdesign_simple useful, want imitate pressing go button model NetLogo - just single run, defined parameterisation.","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=\"C:/out/\",                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             idfinal=NA_character_,                             idrunnum=NA_character_,                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list(),                             constants = list(\"initial-number-sheep\" = 20,                                              \"initial-number-wolves\" = 20,                                              \"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))  nl@simdesign <- simdesign_simple(nl=nl,                                  nseeds=3)"},{"path":"https://docs.ropensci.org/nlrx/articles/simdesign-examples.html","id":"distinct-parameter-combinations-simdesign_distinct","dir":"Articles","previous_headings":"","what":"Distinct parameter combinations (simdesign_distinct)","title":"Simdesign examples","text":"distinct simdesign can used run distinct parameter combinations. setup distinct simdesign, vectors values need defined variable. vectors must number elements across variables. first simulation run consist 1st elements variable vectors; second run uses 2nd values, .","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=\"C:/out/\",                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             idfinal=NA_character_,                             idrunnum=NA_character_,                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list('initial-number-sheep' = list(values=c(10, 20, 30, 40)),                                              'initial-number-wolves' = list(values=c(30, 40, 50, 60))),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))  nl@simdesign <- simdesign_distinct(nl=nl,                                    nseeds=3)"},{"path":"https://docs.ropensci.org/nlrx/articles/simdesign-examples.html","id":"full-factorial-simulation-simdesign_ff","dir":"Articles","previous_headings":"","what":"Full-factorial simulation (simdesign_ff)","title":"Simdesign examples","text":"full factorial simdesign creates full-factorial parameter matrix possible combinations parameter values. setup full-factorial simdesign, vectors values need defined variable. Alternatively, sequence can defined setting min, max step. However, (values min, max, step) defined, values vector prioritized.","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=\"C:/out/\",                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             idfinal=NA_character_,                             idrunnum=NA_character_,                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list('initial-number-sheep' = list(values=c(10, 20, 30, 40)),                                              'initial-number-wolves' = list(min=0, max=50, step=10)),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))  nl@simdesign <- simdesign_ff(nl=nl,                              nseeds=3)"},{"path":"https://docs.ropensci.org/nlrx/articles/simdesign-examples.html","id":"latin-hypercube-sampling-simdesign_lhs","dir":"Articles","previous_headings":"","what":"Latin Hypercube Sampling (simdesign_lhs)","title":"Simdesign examples","text":"latin hypercube simdesign creates Latin Hypercube sampling parameter matrix. method can used generate near-random sample parameter values defined parameter distributions. Details Latin Hypercube Sampling can found (McKay 1979) . nlrx uses lhs package generate Latin Hypercube parameter matrix. setup latin hypercube sampling simdesign, variable distributions need defined (min, max, qfun).","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=\"C:/out/\",                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             idfinal=NA_character_,                             idrunnum=NA_character_,                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list('initial-number-sheep' = list(min=50, max=150, qfun=\"qunif\"),                                              'initial-number-wolves' = list(min=50, max=150, qfun=\"qunif\")),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))  nl@simdesign <- simdesign_lhs(nl=nl,                                samples=100,                                nseeds=3,                                precision=3)"},{"path":"https://docs.ropensci.org/nlrx/articles/simdesign-examples.html","id":"sensitivity-analyses-simdesign_sobol-_sobol2007-_soboljansen-_morris-_efast","dir":"Articles","previous_headings":"","what":"Sensitivity Analyses (simdesign_sobol, _sobol2007, _soboljansen, _morris, _eFast)","title":"Simdesign examples","text":"Sensitivity analyses useful estimate importance model parameters scan parameter space efficient way. nlrx uses sensitivity package setup sensitivity analysis parameter matrices. supported sensitivity analysis simdesigns can used calculate sensitivity indices parameter-output combination. indices can calculated using analyze_nl() function attaching simulation results nl object. setup sensitivity analysis simdesigns, variable distributions (min, max, qfun) need defined.","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=\"C:/out/\",                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             idfinal=NA_character_,                             idrunnum=NA_character_,                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list('initial-number-sheep' = list(min=50, max=150, qfun=\"qunif\"),                                              'initial-number-wolves' = list(min=50, max=150, qfun=\"qunif\")),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))  nl@simdesign <- simdesign_lhs(nl=nl,                                samples=100,                                nseeds=3,                                precision=3)   nl@simdesign <- simdesign_sobol(nl=nl,                                  samples=200,                                  sobolorder=2,                                  sobolnboot=20,                                  sobolconf=0.95,                                  nseeds=3,                                  precision=3)  nl@simdesign <- simdesign_sobol2007(nl=nl,                                      samples=200,                                      sobolnboot=20,                                      sobolconf=0.95,                                      nseeds=3,                                      precision=3)  nl@simdesign <- simdesign_soboljansen(nl=nl,                                        samples=200,                                        sobolnboot=20,                                        sobolconf=0.95,                                        nseeds=3,                                        precision=3)   nl@simdesign <- simdesign_morris(nl=nl,                                   morristype=\"oat\",                                   morrislevels=4,                                   morrisr=100,                                   morrisgridjump=2,                                   nseeds=3)  nl@simdesign <- simdesign_eFast(nl=nl,                                  samples=100,                                  nseeds=3)"},{"path":"https://docs.ropensci.org/nlrx/articles/simdesign-examples.html","id":"optimization-techniques-simdesign_gensa-_genalg","dir":"Articles","previous_headings":"","what":"Optimization techniques (simdesign_GenSA, _GenAlg)","title":"Simdesign examples","text":"Optimization techniques powerful tool search parameter space specific solutions. approaches try minimize specified model output reporter systematically (genetic algorithm, utilizing genalg package) randomly (simulated annealing, utilizing genSA package) changing model parameters within allowed ranges. setup optimization simdesigns, variable ranges (min, max) need defined. Optimization simdesigns can executed using run_nl_dyn() function - instead run_nl_all() run_nl_one().","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=\"C:/out/\",                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             idfinal=NA_character_,                             idrunnum=NA_character_,                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list('initial-number-sheep' = list(min=50, max=150),                                              'initial-number-wolves' = list(min=50, max=150)),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))  nl@simdesign <- simdesign_GenAlg(nl=nl,                                   popSize = 200,                                   iters = 100,                                   evalcrit = 1,                                  elitism = NA,                                   mutationChance = NA,                                   nseeds = 1)  nl@simdesign <- simdesign_GenSA(nl=nl,                                 par=NULL,                                 evalcrit=1,                                 control=list(max.time = 600),                                 nseeds=1)"},{"path":"https://docs.ropensci.org/nlrx/articles/simdesign-examples.html","id":"calibration-simdesigns-approximate-bayesian-computation-abc","dir":"Articles","previous_headings":"","what":"Calibration simdesigns (Approximate Bayesian Computation (ABC))","title":"Simdesign examples","text":"Approximate bayesian computation (ABC) algorithms increasingly used calibration agent-based simulation models. nlrx package provides different algorithms EasyABC package. algorithms can used attaching corresponding simdesigns (simdesign_ABCmcmc_Marjoram(), simdesign_ABCmcmc_Marjoram_original(), simdesign_ABCmcmc_Wegmann()).","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=\"C:/out/\",                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             idfinal=NA_character_,                             idrunnum=NA_character_,                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list('initial-number-sheep' = list(min=50, max=150),                                              'initial-number-wolves' = list(min=50, max=150)),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))  nl@simdesign <- simdesign_ABCmcmc_Marjoram(nl=nl,                                            summary_stat_target = c(100, 80),                                            n_rec = 100,                                             n_calibration=200,                                            use_seed = TRUE,                                            progress_bar = TRUE,                                            nseeds = 1)  nl@simdesign <- simdesign_ABCmcmc_Marjoram_original(nl=nl,                                            summary_stat_target = c(100, 80),                                            n_rec = 10,                                             use_seed = TRUE,                                            progress_bar = TRUE,                                            nseeds = 1)  nl@simdesign <- simdesign_ABCmcmc_Wegmann(nl=nl,                                           summary_stat_target = c(100, 80),                                           n_rec = 10,                                            n_calibration=200,                                           use_seed = TRUE,                                           progress_bar = TRUE,                                           nseeds = 1)"},{"path":"https://docs.ropensci.org/nlrx/articles/spatial-output.html","id":"gathering-spatial-output-from-netlogo-model-simulations","dir":"Articles","previous_headings":"","what":"Gathering spatial output from NetLogo model simulations","title":"Spatial Output","text":"nlrx able gather spatial output NetLogo simulations. experiment class object provides slots measuring turtles, patches link variables: metrics.turtles - list named vectors strings defining valid turtles-variables taken output measurements (e.g. list(\"turtles\" = c(\"\", \"pxcor\", \"pycor\", \"color\")) metrics.patches - vector valid patches-variables used collect patches data (e.g. c(\"pxcor\", \"pycor\", \"pcolor\")) metrics.links - list named vectors strings defining valid links-variables taken output measurements (e.g. list(\"links\" = c(\"[] end1\", \"[] end2\"))) Basically, can enter variable model listed turtles-, patches-links-, however add variables contain strings, strings must contain whitespaces output data parsed correctly. model agent variables exist one specific breed (breed-), measuring variables turtles result runtime error. Thus, different vectors metrics can provided specific breed (e.g. metrics.turtles = list(\"breed_A\" = c(\"\", \"pxcor\", \"pycor\", \"var_of_breed_A\"), \"breed_B\" = c(\"\", \"pxcor\", \"pycor\", \"var_of_breed_B\"))). also works links breeds. experiment contains agent metrics, results metrics nested inside output results tibble. order utilize data, need postprocessed. nlrx provides two types postprocessing functions: unnest_simoutput() - function may used unnest data within output results tibble. reports long tibble containing parameters, variables agent metrics. format easily subsettable suited produce plots using ggplot package, create animations gganimate. nl_to_graph() - Reports igraph objects needs least turtle numbers numbers link ends (metrics.turtles = list(\"turtles\" = c(\"\")), metrics.links = list(\"links\" = c(\"[] end1\", \"[] end2\"))). Additional turtle link variables stored properties igraph nodes vertices. nl_to_raster() - Reports raster objects needs patch coordinates least one patch variable (metrics.patches = c(\"pxcor\", \"pycor\", \"pcolor\")). several patch variables provided, raster stack created rasters patch variable. nl_to_points() - Reports spatial point objects needs least turtle coordinates, either pxcor/pycor xcor/ycor (metrics.turtles = list(\"turtles\" = c(\"xcor\", \"ycor\", \"\", \"color\"))). Additional turtle variables stored properties spatial points.","code":""},{"path":"https://docs.ropensci.org/nlrx/articles/spatial-output.html","id":"application-example-1-wolf-sheep-predation","dir":"Articles","previous_headings":"","what":"Application Example 1: Wolf Sheep Predation","title":"Spatial Output","text":"use Wolf Sheep Model NetLogo models library capture metrics patches turtles. measure coordinates, numbers breed turtles, coordinates patches corresponding pcolor tick. define experiment accordingly run simulations: experiment run 100 ticks (runtime) collects metrics, metrics.turtles metrics.patches tick (evalticks). Thus, executing run_nl_all() report tibble containing metrics, metrics.turtles metrics.patches. However, spatial metrics contain one value, datasets stored lists inside output tibble. lists already contain measured agent metrics can example used analyze distributions variables specific agent groups.","code":"library(nlrx) library(ggplot2) library(gganimate) # devtools::install_github('thomasp85/gganimate') - if you have troubles installing gganimate, you most likely also need to install gifski as system dependency  # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  # Define nl object nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)  # Define experiment nl@experiment <- experiment(expname = \"nlrx_spatial\",                             outpath = outpath,                             repetition = 1,                                   tickmetrics = \"true\",                             idsetup = \"setup\",                                idgo = \"go\",                                      runtime = 100,                             metrics = c(\"count sheep\",\"count wolves\"),                             metrics.turtles = list(\"turtles\" = c(\"who\", \"pxcor\", \"pycor\")),                             metrics.patches = c(\"pxcor\", \"pycor\", \"pcolor\"),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              'initial-number-sheep' = 100,                                              'initial-number-wolves' = 50,                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\")                             )  # Attach simdesign simple using only constants nl@simdesign <- simdesign_simple(nl=nl,                                  nseeds=1)  # Run simulations and store output in results results <- run_nl_all(nl = nl)"},{"path":"https://docs.ropensci.org/nlrx/articles/spatial-output.html","id":"postprocessing-example-1-unnest_simoutput","dir":"Articles","previous_headings":"Application Example 1: Wolf Sheep Predation","what":"Postprocessing example 1: unnest_simoutput()","title":"Spatial Output","text":"use unnest_simoutput() function create large tibble format can use plotting. order use function, simulation output need attached nl object first (otherwise warning appear). simdesign class within nl object provides slot attaching output results (simoutput). output results tibble can attached slot using simdesign setter function setsim(nl, \"simoutput\"). spatial tibble output unnest_simoutput() can example used plot maps different ticks model simulation. example create facet plot using spatial simulation data every 10th simulation tick:  Using gganimate package(https://github.com/thomasp85/gganimate), even possible generate animated plots spatial data tibble. example plot generated running experiment postprocessing data unnest_simoutput().","code":"# Attach results to nl object: setsim(nl, \"simoutput\") <- results  # Report spatial data: results_unnest <- unnest_simoutput(nl) # Split tibble into turtles and patches tibbles and select each 10th step: results_unnest_turtles <- results_unnest %>%    dplyr::filter(agent==\"turtles\") %>%    dplyr::filter(`[step]` %in% seq(10,80,10)) results_unnest_patches <- results_unnest %>%    dplyr::filter(agent==\"patches\") %>%    dplyr::filter(`[step]` %in% seq(10,80,10))  # Create facet plot: ggplot() +   facet_wrap(~`[step]`, ncol=4) +   coord_equal() +   geom_tile(data=results_unnest_patches, aes(x=pxcor, y=pycor, fill=factor(pcolor))) +   geom_point(data=results_unnest_turtles, aes(x = pxcor, y = pycor, color = breed), size=1) +   scale_fill_manual(breaks=c(\"35\", \"55\"), values = c(\"35\" = \"#D9AF6B\", \"55\" = \"#68855C\")) +   scale_color_manual(breaks=c(\"sheep\", \"wolves\"), values = c(\"sheep\" = \"beige\", \"wolves\" = \"black\")) +   guides(fill=guide_legend(title=\"LandCover\")) +   theme_minimal() +   ggtitle(\"Output maps of each 10th simulation tick\") # Split tibble into turtles and patches tibbles: results_unnest_turtles <- results_unnest %>%    dplyr::filter(agent == \"turtles\") results_unnest_patches <- results_unnest %>%    dplyr::filter(agent == \"patches\")  # Create an animated plot, using the step column as animation variable p1 <- ggplot() +   geom_tile(data=results_unnest_patches, aes(x=pxcor, y=pycor, fill=factor(pcolor))) +   geom_point(data=results_unnest_turtles, aes(x = pxcor, y = pycor, group=who, color = breed), size=2) +   scale_fill_manual(breaks=c(\"35\", \"55\"), values = c(\"35\" = \"#D9AF6B\", \"55\" = \"#68855C\")) +   scale_color_manual(breaks=c(\"sheep\", \"wolves\"), values = c(\"sheep\" = \"beige\", \"wolves\" = \"black\")) +   guides(fill=guide_legend(title=\"LandCover\")) +   transition_time(`[step]`) +   coord_equal() +   labs(title = 'Step: {frame_time}') +   theme_void()  # Animate the plot and use 1 frame for each step of the model simulations gganimate::animate(p1, nframes = length(unique(results_unnest_patches$`[step]`)), width=400, height=400, fps=4) anim_save(\"wolfsheep_world.gif\")"},{"path":"https://docs.ropensci.org/nlrx/articles/spatial-output.html","id":"postprocessing-example-2-nl_to_raster-and-nl_to_points","dir":"Articles","previous_headings":"Application Example 1: Wolf Sheep Predation","what":"Postprocessing example 2: nl_to_raster() and nl_to_points()","title":"Spatial Output","text":"second option postprocess spatial data convert patches data raster objects turtles data spatial point objects. can handy spatial analyses carried , calculating landscape metrics (e.g. R-package landscapemetrics). example, use nl object attached simulation output previous example generate raster spatial point objects.","code":"## Create raster and point objects from patches and turtles data: library(raster) library(sf) nlraster <- nl_to_raster(nl) nlpoints <- nl_to_points(nl, coords = \"px\")  ## Plot raster and turtles of tick n: n <- 1 plot(nlraster$spatial.raster[[n]], col=c(\"35\" = \"#D9AF6B\", \"55\" = \"#68855C\")) plot(nlpoints$spatial.turtles[[n]][\"breed\"], add=TRUE, pch=16, col=c(\"sheep\" = \"beige\", \"wolves\" = \"black\"))"},{"path":"https://docs.ropensci.org/nlrx/articles/spatial-output.html","id":"application-example-2-giant-component","dir":"Articles","previous_headings":"","what":"Application example 2: Giant component","title":"Spatial Output","text":"use Giant Component model NetLogo models library capture metrics turtles links. nl_to_graph() function generates igraph objects measured turtles links data. produces igraph object row simoutput results tibble. Thus, reports one igraph network combination random-seed, siminputrow step. order generate igraph objects metrics mandatory: metrics.turtles slot experiment must contain “” numbers (see example experiment). Additional turtle metrics stored properties igraph vertices. metrics.links slot experiment must contain “” numbers link end1 end2 (see example experiment). Additional link metrics stored properties igraph edges. application example, mainly interested final network structure. want measure numbers color turtles, numbers end1 end2 links final tick. define experiment accordingly run simulations: order execute nl_to_graph() function, output results need attached nl object. Afterwards can create igraph object nl_to_graph(): igraph objects attached output results tibble newly generated column “spatial.links”. case, one row results thus one igraph object. can now extract object plotting, using igraph plotting function: can also calculate network metrics using igraph package:","code":"library(nlrx) library(igraph)  # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.4\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Networks/Giant Component.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.4\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Networks/Giant Component.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.4\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)  nl@experiment <- experiment(expname=\"networks\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"false\",                             idsetup=\"setup\",                             idgo=\"go\",                             runtime=50,                             metrics.turtles = list(\"turtles\" = c(\"who\", \"color\")),                             metrics.links = list(\"links\" = c(\"[who] of end1\", \"[who] of end2\")),                             constants = list(\"num-nodes\" = 80,                                              \"layout?\" = \"true\"))  nl@simdesign <- simdesign_simple(nl, 1) results <- run_nl_all(nl) # Attach results to nl object: setsim(nl, \"simoutput\") <- results # Create igraph: nl.graph <- nl_to_graph(nl) ## Extract graph of tick 1: nl.graph.i <- nl.graph$spatial.links[[1]] ## Set vertex colors by measured color variable: vcols <- c(\"7\" = \"grey\", \"15\" = \"red\") V(nl.graph.i)$color <- vcols[as.character(V(nl.graph.i)$color)] ## Set edge colors by measured link breed: ecols <- c(\"links\" = \"black\") E(nl.graph.i)$color <- ecols[E(nl.graph.i)$breed]  ## Plot: plot.igraph(nl.graph.i, vertex.size=8, vertex.label=NA, edge.arrow.size=0.2) ## Extract graph of tick 1: nl.graph.i <- nl.graph$spatial.links[[1]]  ## Vertex and edge betweenness centrality betweenness(nl.graph.i)  ## Clusters clusters(nl.graph.i)"},{"path":"https://docs.ropensci.org/nlrx/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan Salecker. Author. Marco Sciaini. Author. Marina Papadopoulou. Reviewer.            Marina reviewed package ropensci, see <https://github.com/ropensci/software-review/issues/262> Sebastian Hanss. Maintainer.            Package maintainer together Jan Salecker","code":""},{"path":"https://docs.ropensci.org/nlrx/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Salecker J, Sciaini M, Meyer KM, Wiegand K. nlrx r package: next-generation framework reproducible NetLogo model analyses. Methods Ecol Evol. 2019;2041–210X. doi:10.1111/2041-210X.13286","code":"@Article{,   title = {The nlrx r package: A next-generation framework for reproducible NetLogo model analyses},   author = {Jan Salecker and Marco Sciaini and Katrin M. Meyer and Kerstin Wiegand},   journal = {Methods in Ecololgy and Evolution},   volume = {00},   pages = {2041--210X},   year = {2019},   url = {https://doi.org/10.1111/2041-210X.13286},   doi = {10.1111/2041-210X.13286}, }"},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"nlrx-","dir":"","previous_headings":"","what":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"nlrx package provides tools setup execute NetLogo simulations R. NetLogo free, open-source cross-platform modelling environment simulating natural social phenomena. NetLogo focuses implementation agent-based spatially explicit simulation models, although system dynamics models supported well. NetLogo developed maintained Center Connected Learning Computer-Based Modeling, Northwestern University, Evanston, IL. details NetLogo available online: NetLogo online documentation NetLogo comes built-experiment tool Behavior Space allows setup execute model simulations different settings parameter variations collect model output. experiment tool can executed via command line combination XML file contains experiment specifications, runtime, variables, output measurements, stop conditions, . One limitation Behavior Space , supports full-factorial parameter designs, may appropriate complex model analyses. Furthermore, Behavior Space experiment specifications stored within NetLogo file easily accessible R. However, many cases useful store specifications along model output analyses results order enable fully reproducible model analyses. nlrx package utilizes commandline functionality Behavior Space execute NetLogo simulations directly R. Instead defining experiments within NetLogo Behavior Space, experiments defined R using class objects nlrx package. class objects hold information needed run experiments remotely R, path NetLogo installation folder, path model file experiment specifications . nlrx provides useful helper functions generate parameter input matrices parameter range definitions cover wide range parameter exploration approaches. storing relevant information simulation experiments, including output model simulations one class object, experiments can easily stored shared. summary, nlrx package uses similar structure NetLogos Behavior Space offers flexibility additional tools running reproducible complex model analyses directly R.","code":""},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"publication","dir":"","previous_headings":"","what":"Publication","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"information package functionality detailed code examples can found accompanying publication: Salecker J, Sciaini M, Meyer KM, Wiegand K. nlrx r package: next-generation framework reproducible NetLogo model analyses. Methods Ecol Evol. 2019;2041-210X. https://doi.org/10.1111/2041-210X.13286. Get citation information nlrx R citation(package = 'nlrx').","code":""},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"netlogo","dir":"","previous_headings":"Prerequirements","what":"NetLogo","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"order use nlrx package, NetLogo (>=5.3.1) needs installed system used execute model simulations (local/remote). remote execution, NetLogo needs installed remote machines well. nlrx package provides utility function (download_netlogo()) can used download unzip (unix systems) specified NetLogo version local folder. windows machines, downloaded file needs executed order install NetLogo local system. running MacOS, please use Linux tar.gz version NetLogo (either NetLogo Homepage using download_netlogo() function). dmg version NetLogo homepage compatible nlrx. code snippets homepage compatible Netlogo <= 6.2.2. version 6.3.0, folder structure NetLogo slightly updated, thus modelpath code snippets need adjusted accordingly (\"app/\" folder needs removed modelpath).","code":""},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"java","dir":"","previous_headings":"Prerequirements","what":"Java","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"NetLogo executed Java virtual machine, Java needs installed local/remote system well. recommend Oracle Java SE Development Kit 8 openjdk. nlrx package might work without setting Java system path explicitly, recommend make sure JAVA_HOME points correct Java installation system.","code":""},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"can install released version nlrx CRAN : development version GitHub :","code":"install.packages(\"nlrx\") # install.packages(\"remotes\") remotes::install_github(\"ropensci/nlrx\")"},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"get-started","dir":"","previous_headings":"","what":"Get started","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"General information needed run NetLogo simulations remotely, path NetLogo installation folder stored within nl class object. Nested within nl class classes experiment simdesign. experiment class stores experiment specifications. attaching valid experiment, simdesign class object can attached nl class object, using one simdesign helper functions. helper functions create different parameter input matrices experiment variable definitions can executed run_nl_one() run_nl_all() functions. nested design allows store everything related experiment within one R object. Additionally, different simdesign helper functions can applied nl object order repeat experiment different parameter exploration methods (simdesigns).","code":""},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"step-by-step-application-example","dir":"","previous_headings":"Get started","what":"Step by step application example","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"“Wolf Sheep Predation” model NetLogo models library used present basic example setup run NetLogo model simulations R.","code":""},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"step-1-create-a-nl-object","dir":"","previous_headings":"Get started > Step by step application example","what":"Step 1: Create a nl object:","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"nl object holds information NetLogo version, path NetLogo directory defined version, path model file, desired memory java virtual machine. Depending operation system, paths NetLogo model need adjusted.","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"step-2-attach-an-experiment","dir":"","previous_headings":"Get started > Step by step application example","what":"Step 2: Attach an experiment","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"experiment object organized similar fashion NetLogo Behavior Space experiments. contains information needed generate simulation parameter matrix execute NetLogo simulations. Details specific slots experiment class can found package documentation (?experiment) “Advanced configuration” vignette.","code":"nl@experiment <- experiment(expname=\"wolf-sheep\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"true\",                             idsetup=\"setup\",                             idgo=\"go\",                             runtime=50,                             evalticks=seq(40,50),                             metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                             variables = list('initial-number-sheep' = list(min=50, max=150, qfun=\"qunif\"),                                              'initial-number-wolves' = list(min=50, max=150, qfun=\"qunif\")),                             constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                              \"grass-regrowth-time\" = 30,                                              \"sheep-gain-from-food\" = 4,                                              \"wolf-gain-from-food\" = 20,                                              \"sheep-reproduce\" = 4,                                              \"wolf-reproduce\" = 5,                                              \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"step-3-attach-a-simulation-design","dir":"","previous_headings":"Get started > Step by step application example","what":"Step 3: Attach a simulation design","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"experiment defines variables specifications model, simulation design creates parameter input table based model specifications chosen simulation design method. nlrx provides bunch different simulation designs, full-factorial, latin-hypercube, sobol, morris eFast (see “Simdesign Examples” vignette information simdesigns). simdesign helper functions need properly defined nl object valid experiment design. simdesign helper also allows define number random seeds randomly generated can used execute repeated simulations parameter matrix different random-seeds (see “Advanced configuration” vignette information random-seed repetition management). simulation design attached nl object using one simdesign helper functions:","code":"nl@simdesign <- simdesign_lhs(nl=nl,                                samples=100,                                nseeds=3,                                precision=3)"},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"step-4-run-simulations","dir":"","previous_headings":"Get started > Step by step application example","what":"Step 4: Run simulations","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"information needed run simulations now stored within nl object. run_nl_one() function allows run one specific simulation siminput parameter table. run_nl_all() function runs loop simseeds rows parameter input table siminput. loops constructed way allows easy parallelisation, either locally remote HPC machines (see “Advanced configuration” vignette information parallelisation). running simulations might want check current nl object setup. eval_variables_constants(nl) evaluates defined variables constants correctly defined consistent attached model. print(nl) prints complete summary provided nl object including checkmarks might help indicate potential problems.","code":"# Evaluate nl object: eval_variables_constants(nl) print(nl)  # Run all simulations (loop over all siminputrows and simseeds) results <- run_nl_all(nl)"},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"step-5-attach-results-to-nl-and-run-analysis","dir":"","previous_headings":"Get started > Step by step application example","what":"Step 5: Attach results to nl and run analysis","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"nlrx provides method specific analysis functions simulation design. Depending chosen design, function reports tibble aggregated results sensitivity indices. order run analyze_nl function, simulation output attached nl object first. simdesign class within nl object provides slot attaching output results (simoutput). output results tibble can attached slot using simdesign setter function setsim(nl, \"simoutput\"). attaching simulation results, can also written defined outpath experiment object.","code":"# Attach results to nl object: setsim(nl, \"simoutput\") <- results  # Write output to outpath of experiment within nl write_simoutput(nl)  # Do further analysis: analyze_nl(nl)"},{"path":"https://docs.ropensci.org/nlrx/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Setup, Run and Analyze NetLogo Model Simulations from R via XML","text":"Please report issues bugs. License: GPL3 Get citation information nlrx R citation(package = 'nlrx') Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_eFast.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze NetLogo simulation output of simdesign eFast — analyze_eFast","title":"Analyze NetLogo simulation output of simdesign eFast — analyze_eFast","text":"Analyze NetLogo simulation output simdesign eFast","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_eFast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze NetLogo simulation output of simdesign eFast — analyze_eFast","text":"","code":"analyze_eFast(nl, metrics, funs)"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_eFast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze NetLogo simulation output of simdesign eFast — analyze_eFast","text":"nl nl object metrics vector strings defining metric columns evaluation. Defaults metrics experiment within nl object funs list summary metrics sensitivity results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_eFast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze NetLogo simulation output of simdesign eFast — analyze_eFast","text":"function calculates eFast sensitivity indices output results using sensitivity package.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_ff.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze NetLogo simulation output of simdesign full-factorial — analyze_ff","title":"Analyze NetLogo simulation output of simdesign full-factorial — analyze_ff","text":"Analyze NetLogo simulation output simdesign full-factorial","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_ff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze NetLogo simulation output of simdesign full-factorial — analyze_ff","text":"","code":"analyze_ff(nl, metrics, funs)"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_ff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze NetLogo simulation output of simdesign full-factorial — analyze_ff","text":"nl nl object metrics vector strings defining metric columns evaluation. Defaults metrics experiment within nl object funs list summary metrics sensitivity results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_ff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze NetLogo simulation output of simdesign full-factorial — analyze_ff","text":"function calculates aggregated output metrics dropping random seeds aggregating values provided functions.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_lhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze NetLogo simulation output of simdesign latin-hypercube — analyze_lhs","title":"Analyze NetLogo simulation output of simdesign latin-hypercube — analyze_lhs","text":"Analyze NetLogo simulation output simdesign latin-hypercube","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_lhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze NetLogo simulation output of simdesign latin-hypercube — analyze_lhs","text":"","code":"analyze_lhs(nl, metrics, funs)"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_lhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze NetLogo simulation output of simdesign latin-hypercube — analyze_lhs","text":"nl nl object metrics vector strings defining metric columns evaluation. Defaults metrics experiment within nl object funs list summary metrics sensitivity results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_lhs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze NetLogo simulation output of simdesign latin-hypercube — analyze_lhs","text":"function calculates aggregated output metrics dropping random seeds aggregating values provided functions.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_morris.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze NetLogo simulation output of simdesign morris — analyze_morris","title":"Analyze NetLogo simulation output of simdesign morris — analyze_morris","text":"Analyze NetLogo simulation output simdesign morris","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_morris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze NetLogo simulation output of simdesign morris — analyze_morris","text":"","code":"analyze_morris(nl, metrics, funs)"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_morris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze NetLogo simulation output of simdesign morris — analyze_morris","text":"nl nl object metrics vector strings defining metric columns evaluation. Defaults metrics experiment within nl object funs list summary metrics sensitivity results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_morris.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze NetLogo simulation output of simdesign morris — analyze_morris","text":"function calculates morris sensitivity indices output results using sensitivity package.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_nl.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze NetLogo simulation output — analyze_nl","title":"Analyze NetLogo simulation output — analyze_nl","text":"Analyze NetLogo simulation output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_nl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze NetLogo simulation output — analyze_nl","text":"","code":"analyze_nl(nl, metrics = getexp(nl, \"metrics\"), funs = list(mean = mean))"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_nl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze NetLogo simulation output — analyze_nl","text":"nl nl object metrics vector strings defining metric columns evaluation. Defaults metrics experiment within nl object funs list summary metrics sensitivity results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_nl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze NetLogo simulation output — analyze_nl","text":"analysis summary tibble","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_nl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze NetLogo simulation output — analyze_nl","text":"analyze_nl function runs basic analyses NetLogo simulation output. order execute function, simulation output needs attached simdesign first setsim(nl, \"output\") <- results. analyze_nl calls different post-processing analysis functions, depending specified method simdesign object nl object. following simdesign currently supported: simdesign_ff Calls analyze_ff. function calculates aggregated output metrics dropping random seeds aggregating values provided functions. simdesign_lhs Calls analyze_lhs. function calculates aggregated output metrics dropping random seeds aggregating values provided functions. simdesign_sobol Calls analyze_sobol. function calculates sobol sensitivity indices output results using sensitivity package. simdesign_sobol2007 Calls analyze_sobol2007. function calculates sobol sensitivity indices output results using sensitivity package. simdesign_soboljansen Calls analyze_soboljansen. function calculates sobol sensitivity indices output results using sensitivity package. simdesign_morris Calls analyze_morris. function calculates morris sensitivity indices output results using sensitivity package. simdesign_eFast Calls analyze_eFast. function calculates eFast sensitivity indices output results using sensitivity package. following simdesign postprocessing analysis function implemented yet: simdesign_simple, simdesign_distinct, simdesign_GenSA, simdesign_GenAlg","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_nl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze NetLogo simulation output — analyze_nl","text":"","code":"# Load nl object including output data from testdata nl <- nl_sobol  # Define aggregation measurements: myfuns <- list(mean=mean, sd=sd, min=min, max=max)  # Calculate sensitivity indices: analyze_nl(nl, funs = myfuns) #> [1] \"No missing combinations detected!\" #> # A tibble: 18 × 8 #>    original    bias `std. error` `min. c.i.` `max. c.i.` parameter  metric  seed #>       <dbl>   <dbl>        <dbl>       <dbl>       <dbl> <chr>      <chr>  <dbl> #>  1    0.114 0             0.149       0            0.408 initial-n… count…  8515 #>  2    0.554 0.00216       0.0992      0.310        0.748 initial-n… count…  8515 #>  3    0.346 0.0188        0.198       0            0.827 initial-n… count…  8515 #>  4    0.652 0.00627       0.0647      0.523        0.795 initial-n… count…  8515 #>  5    0     0.00492       0.0929      0            0.194 initial-n… count…  8515 #>  6    0.365 0             0.128       0.0881       0.651 initial-n… count…  8515 #>  7    0.114 0.0283        0.166       0            0.403 initial-n… count…  8515 #>  8    0.554 0             0.0957      0.360        0.740 initial-n… count…  8515 #>  9    0.346 0             0.216       0            0.801 initial-n… count…  8515 #> 10    0.652 0.00286       0.0633      0.508        0.766 initial-n… count…  8515 #> 11    0     0.00752       0.101       0            0.174 initial-n… count…  8515 #> 12    0.365 0             0.132       0.107        0.652 initial-n… count…  8515 #> 13    0.114 0             0.152       0            0.446 initial-n… count…  8515 #> 14    0.554 0             0.114       0.337        0.798 initial-n… count…  8515 #> 15    0.346 0.0228        0.222       0            0.685 initial-n… count…  8515 #> 16    0.652 0.0135        0.0635      0.484        0.769 initial-n… count…  8515 #> 17    0     0.00325       0.0969      0            0.179 initial-n… count…  8515 #> 18    0.365 0             0.126       0.120        0.648 initial-n… count…  8515"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze NetLogo simulation output of simdesign simple — analyze_simple","title":"Analyze NetLogo simulation output of simdesign simple — analyze_simple","text":"Analyze NetLogo simulation output simdesign simple","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze NetLogo simulation output of simdesign simple — analyze_simple","text":"","code":"analyze_simple(nl, metrics, funs)"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze NetLogo simulation output of simdesign simple — analyze_simple","text":"nl nl object metrics vector strings defining metric columns evaluation. Defaults metrics experiment within nl object funs list summary metrics sensitivity results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze NetLogo simulation output of simdesign simple — analyze_simple","text":"simdesign_simple analysis functions yet supported print warning message.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_sobol.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze NetLogo simulation output of simdesign sobol — analyze_sobol","title":"Analyze NetLogo simulation output of simdesign sobol — analyze_sobol","text":"Analyze NetLogo simulation output simdesign sobol","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_sobol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze NetLogo simulation output of simdesign sobol — analyze_sobol","text":"","code":"analyze_sobol(nl, metrics, funs)"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_sobol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze NetLogo simulation output of simdesign sobol — analyze_sobol","text":"nl nl object metrics vector strings defining metric columns evaluation. Defaults metrics experiment within nl object funs list summary metrics sensitivity results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_sobol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze NetLogo simulation output of simdesign sobol — analyze_sobol","text":"function calculates sobol sensitivity indices output results using sensitivity package.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_sobol2007.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze NetLogo simulation output of simdesign sobol2007 — analyze_sobol2007","title":"Analyze NetLogo simulation output of simdesign sobol2007 — analyze_sobol2007","text":"Analyze NetLogo simulation output simdesign sobol2007","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_sobol2007.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze NetLogo simulation output of simdesign sobol2007 — analyze_sobol2007","text":"","code":"analyze_sobol2007(nl, metrics, funs)"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_sobol2007.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze NetLogo simulation output of simdesign sobol2007 — analyze_sobol2007","text":"nl nl object metrics vector strings defining metric columns evaluation. Defaults metrics experiment within nl object funs list summary metrics sensitivity results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_sobol2007.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze NetLogo simulation output of simdesign sobol2007 — analyze_sobol2007","text":"function calculates sobol sensitivity indices output results using sensitivity package.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_soboljansen.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze NetLogo simulation output of simdesign soboljansen — analyze_soboljansen","title":"Analyze NetLogo simulation output of simdesign soboljansen — analyze_soboljansen","text":"Analyze NetLogo simulation output simdesign soboljansen","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_soboljansen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze NetLogo simulation output of simdesign soboljansen — analyze_soboljansen","text":"","code":"analyze_soboljansen(nl, metrics, funs)"},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_soboljansen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze NetLogo simulation output of simdesign soboljansen — analyze_soboljansen","text":"nl nl object metrics vector strings defining metric columns evaluation. Defaults metrics experiment within nl object funs list summary metrics sensitivity results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/analyze_soboljansen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze NetLogo simulation output of simdesign soboljansen — analyze_soboljansen","text":"function calculates sobol sensitivity indices output results using sensitivity package.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/check_netlogo_version.html","id":null,"dir":"Reference","previous_headings":"","what":"Check supported NetLogo versions — check_netlogo_version","title":"Check supported NetLogo versions — check_netlogo_version","text":"Auxiliary function check supported NetLogo version numbers","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/check_netlogo_version.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check supported NetLogo versions — check_netlogo_version","text":"","code":"check_netlogo_version(version, throw_error = FALSE)"},{"path":"https://docs.ropensci.org/nlrx/reference/check_netlogo_version.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check supported NetLogo versions — check_netlogo_version","text":"version Character string naming NetLogo Version check throw_error TRUE/FALSE, TRUE error thrown version supported","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/check_netlogo_version.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check supported NetLogo versions — check_netlogo_version","text":"logical, netlogo versions supported nlrx","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/check_netlogo_version.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check supported NetLogo versions — check_netlogo_version","text":"","code":"if (FALSE) { check_netlogo_version(\"6.2.0\") check_netlogo_version(\"1.0\") check_netlogo_version(\"1.0\", TRUE) }"},{"path":"https://docs.ropensci.org/nlrx/reference/download_netlogo.html","id":null,"dir":"Reference","previous_headings":"","what":"Download NetLogo — download_netlogo","title":"Download NetLogo — download_netlogo","text":"Auxiliary function download NetLogo","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/download_netlogo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download NetLogo — download_netlogo","text":"","code":"download_netlogo(to, version, os = NA, extract = FALSE)"},{"path":"https://docs.ropensci.org/nlrx/reference/download_netlogo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download NetLogo — download_netlogo","text":"Path folder downloaded file saved. version Character string naming NetLogo Version download (see Details) os operation system (\"win\", \"mac\", \"unix\") decides version netlogo (msi, dmg, tgz) downloaded. set NA (default) os detected automatically (util_get_os()) extract TRUE/FALSE, TRUE downloaded archive extracted subfolder (unix)","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/download_netlogo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download NetLogo — download_netlogo","text":"Retrieve supported Versions Download Usage (parameter version): supported_netlogo_versions()","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/download_netlogo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download NetLogo — download_netlogo","text":"","code":"if (FALSE) { dlpath <- tempdir()  # adjust path to your needs try(download_netlogo(dlpath, \"6.0.3\")) }"},{"path":"https://docs.ropensci.org/nlrx/reference/eval_simoutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate input/output integrity — eval_simoutput","title":"Evaluate input/output integrity — eval_simoutput","text":"Evaluate input/output integrity","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/eval_simoutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate input/output integrity — eval_simoutput","text":"","code":"eval_simoutput(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/eval_simoutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate input/output integrity — eval_simoutput","text":"nl nl object attached simulation output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/eval_simoutput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate input/output integrity — eval_simoutput","text":"function checks attached simulation output simoutput slot simdesign, corresponds defined siminput matrix. Warning messages thrown data missing simoutput tibble. Additionally, missing combinations siminputrow random seed data found can reported tibble. tibble can used directly rerun missing combinations conveniently (see examples )","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/eval_simoutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate input/output integrity — eval_simoutput","text":"","code":"if (FALSE) { # Check eval_simoutput for testdata nl_lhs: nl <- nl_lhs eval_simoutput(nl)  # Now remove one row of simoutput and check output: nl <- nl_lhs nl@simdesign@simoutput <- nl@simdesign@simoutput[-1,] check <- eval_simoutput(nl) check  # Rerun missing combinations within check tibble: rerun <- purrr::map_dfr(seq(nrow(check)), function(x) {   res <- run_nl_one(nl, siminputrow=check$siminputrow[x], seed=check$seed[x])     return(res)     }) %>%       dplyr::bind_rows(., nl@simdesign@simoutput)   }"},{"path":"https://docs.ropensci.org/nlrx/reference/eval_variables_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate variable validity — eval_variables_constants","title":"Evaluate variable validity — eval_variables_constants","text":"Evaluate variables constants defined experiment","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/eval_variables_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate variable validity — eval_variables_constants","text":"","code":"eval_variables_constants(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/eval_variables_constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate variable validity — eval_variables_constants","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/eval_variables_constants.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate variable validity — eval_variables_constants","text":"function checks variables constants defined experiment valid. loads model code NetLogo model checks variables constants really exist. case nonvalid entries, function throws error message, indicating variables constants valid. Please note, function might fail supported modelpath point existing nlogo file. might example happen, modelpath set remote cluster execution.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/eval_variables_constants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Evaluate variable validity — eval_variables_constants","text":"","code":"if (FALSE) { nl <- nl_lhs eval_variables_constants(nl) }"},{"path":"https://docs.ropensci.org/nlrx/reference/experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a new experiment object — experiment","title":"Construct a new experiment object — experiment","text":"Construct new experiment object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a new experiment object — experiment","text":"","code":"experiment(   expname = \"defaultexp\",   outpath = NA_character_,   repetition = 1,   tickmetrics = \"true\",   idsetup = \"setup\",   idgo = \"go\",   idfinal = NA_character_,   idrunnum = NA_character_,   runtime = 1,   evalticks = NA_integer_,   stopcond = NA_character_,   metrics = c(\"count turtles\"),   metrics.turtles = list(),   metrics.patches = NA_character_,   metrics.links = list(),   variables = list(),   constants = list(),   ... )"},{"path":"https://docs.ropensci.org/nlrx/reference/experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a new experiment object — experiment","text":"expname character string defining name experiment, whitespaces allowed outpath Path directory experiment output stored repetition number gives number repetitions row simulation design input tibble tickmetrics Character string \"true\" runs defined metrics simulation tick. \"false\" runs metrics simulation finished idsetup character string vector character strings, defining name NetLogo setup procedure idgo character string vector character strings, defining name NetLogo go procedure idfinal character string vector character strings, defining name NetLogo procedures run last tick idrunnum character string, defining name NetLogo global used parse current siminputrow model executions can used self-written output. runtime number model ticks run simulation evalticks vector tick numbers defining measurements taken. NA_integer_ measure tick stopcond NetLogo reporter reports TRUE/FALSE. reports TRUE current simulation run stopped (e.g. \"? turtles\") metrics vector strings defining valid NetLogo reporters taken output measurements (e.g. c(\"count turtles\", \"count patches\")) metrics.turtles list named vectors strings defining valid turtles-variables taken output measurements (e.g. list(\"turtles\" = c(\"\", \"pxcor\", \"pycor\", \"color\")) metrics.patches vector strings defining valid patches-variables taken output measurements (e.g. c(\"pxcor\", \"pycor\", \"pcolor\")) metrics.links list named vectors strings defining valid links-variables taken output measurements (e.g. list(\"links\" = c(\"end1\", \"end2\"))) variables nested list variables changed within simulation design. name sublist item valid global defined NetLogo model. Depending desired simdesign list item consist vector values, min value, max value, step value qfun (e.g. list(\"paramA\" = list(values=c(0, 0.5, 1), min=0, max=1, step=0.1, qfun=\"qunif\"))) constants list constants kept constant within simulation design. name list item valid global defined NetLogo model (e.g. list(\"pNUM\" = 12, \"pLOGIC\"=\"TRUE\", \"pSTRING\"=\"\\\"default\\\"\")) ... ...","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/experiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a new experiment object — experiment","text":"experiment S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/experiment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a new experiment object — experiment","text":"experiment class stores information related NetLogo simulation experiment. class holds information typically entered NetLogo Behavior Space experiments. setting experiment, usually attached already defined nl object (see examples). attaching experiment, different simdesign helper functions can used attach simdesign nl object simdesign. simdesign helper functions use variable definitions experiment within nl object generate parameter tibble simulations. following class slots obligatory run experiment: repetition cases, random seed controlled nlrx simdesigns, repitition set one random seeds differ simulations. cases, random seed set within NetLogo model, repitition can increased repeat parameterisation different random seeds. tickmetrics \"true\", defined output reporters collected simulation tick defined evalticks. \"false\" measurements taken last tick. idsetup, idgo two class slots accept strings, vectors strings, defining NetLogo model procedures executed model setup (idsetup) model execution (idgo). runtime Defines maximum number simulation ticks executed. Use 0 NA_integer_ execute simulations without predefined number ticks. Warning: recommended combination stop condition (see slot stopcond), NetLogo models built-stop condition. Otherwise, simulations might get stuck endless loops. Depending simdesign, following slots may obligatory: metrics vector valid netlogo reporters defines measurements taken. optimization simdesigns need least one defined metrics reporter fitness calculation optimization algorithm. constants, variables slots accept lists NetLogo parameters varied within simdesign (variables) kept constant (constants) simulation. NetLogo parameter entered least one two lists set constant default value NetLogo interface. possible enter NetLogo parameter lists (warning message appear simdesign attached experiment). simdesigns except simdesign_simple need defined variables setting parameter matrix. Variables can defined distinct values, value distributions range increment. information needed, depends chosen simdesign (details variable definition requirements can found helpfiles simdesign helper function). remaining slots optional: expname character string defining name experiment, useful documentation purposes. string must contain whitespaces. outpath valid path existing directory. directory used write_simoutput function store attached simulation results disk csv format. idfinal character string vector strings defining NetLogo procedures executed end simulation (e.g. cleanup self-written output procedures). idrunnum slot can used transfer current nlrx experiment name, random seed runnumber (siminputrow) NetLogo. use functionality, string input field widget needs created GUI NetLogo model. name widget can entered \"idrunnum\" field experiment. simulations, value widget automatically updated generated string contains current nlrx experiment name, random seed siminputrow (\"expname_seed_siminputrow\"). self-written output NetLogo, suggest include global variable allows referencing self-written output files collected output nlrx simulations R. evalticks applied tickmetrics = TRUE. Evalticks may contain vector integers, defining ticks defined metrics measured. Set evalticks NA_integer_ measure every tick. stopcond stopcond slot can used define stop condition providing string valid NetLogo code reports either true false. simulation stopped automatically, reporter reports true. metrics.patches metrics.patches slot accepts vector valid patches-variables NetLogo model. patch variables measured addition defined metrics. Results metrics nested inside output results tibble simulations. Please note NetLogo models may contain huge number patches output measurements agent variables tick may need lot ressources. metrics.turtles metrics.turtles slot accepts list named vectors valid turtle breed metrics. name vector list defines specified breed NetLogo model, whereas vector defines variables measured breed. example metrics.turtles = list(\"sheep\"=c(\"color\"), \"wolves\"=c(\"\")) - measure color sheep number wolf agent. measure turtles-variables turtles, use \"turtles\" = c(...). aware, NetLogo produce runtime errors measure breed-variables agents belong breed. Please note NetLogo models may contain huge number turtles output measurements agent variables tick may need lot ressources. metrics.links metrics.links slot accepts list named vectors valid link breed metrics. name vector list defines specified link breed NetLogo model, whereas vector defines variables measured link breed. example metrics.links = list(\"linktype-\"=c(\"end1\"), \"linktype-b\"=c(\"end2\")) - measure start agent linktype-link end agent linktype-b link. measure links-variables links, use \"links\" = c(...). aware, NetLogo produce runtime errors measure link-breed-variables agents belong breed. Please note NetLogo models may contain huge number turtles output measurements agent variables tick may need lot ressources.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/experiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a new experiment object — experiment","text":"","code":"# To attach an experiment, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  # Example for Wolf Sheep Predation model from NetLogo models library: nl <- nl_simple nl@experiment <- experiment(expname=\"wolf-sheep\",                              outpath=\"C:/out/\",                              repetition=1,                              tickmetrics=\"true\",                              idsetup=\"setup\",                              idgo=\"go\",                              idfinal=NA_character_,                              idrunnum=NA_character_,                              runtime=50,                              evalticks=seq(40,50),                              stopcond=\"not any? turtles\",                              metrics=c(\"count sheep\",                                        \"count wolves\",                                      \"count patches with [pcolor = green]\"),                              metrics.turtles=list(\"turtles\" = c(\"who\",                                                \"pxcor\",                                                \"pycor\",                                                \"color\")),                              metrics.patches=c(\"pxcor\", \"pycor\", \"pcolor\"),                              variables = list('initial-number-sheep' =                              list(min=50, max=150, step=10, qfun=\"qunif\"),                                               'initial-number-wolves' =                              list(min=50, max=150, step=10, qfun=\"qunif\")),                              constants = list(\"model-version\" =                                               \"\\\"sheep-wolves-grass\\\"\",                                               \"grass-regrowth-time\" = 30,                                               \"sheep-gain-from-food\" = 4,                                               \"wolf-gain-from-food\" = 20,                                               \"sheep-reproduce\" = 4,                                               \"wolf-reproduce\" = 5,                                               \"show-energy?\" = \"false\"))"},{"path":"https://docs.ropensci.org/nlrx/reference/export_nl.html","id":null,"dir":"Reference","previous_headings":"","what":"Export NetLogo Experiment — export_nl","title":"Export NetLogo Experiment — export_nl","text":"Export NetLogo Experiment zip file","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/export_nl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export NetLogo Experiment — export_nl","text":"","code":"export_nl(nl, path = dirname(getnl(nl, \"modelpath\")), tarfile)"},{"path":"https://docs.ropensci.org/nlrx/reference/export_nl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export NetLogo Experiment — export_nl","text":"nl nl object path Path folder contains files run NetLogo experiment tarfile Path folder experiments gets stored zip file","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/export_nl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export NetLogo Experiment — export_nl","text":"status value returned external command, invisibly.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/export_nl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export NetLogo Experiment — export_nl","text":"Exports folder contains data scripts NetLogo + nlrx analyses zip file. Furthermore, export_nl takes nl object saves zipped folder. enables person run experiment .","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/export_nl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export NetLogo Experiment — export_nl","text":"","code":"if (FALSE) {  # Load nl object from testdata: nl <- nl_lhs path <- getwd() # adjust path to your needs, path should point to a directory with model data outfile <- tempfile(fileext = \".zip\") # adjust file path to your needs export_nl(nl, path = path, tarfile = outfile) }"},{"path":"https://docs.ropensci.org/nlrx/reference/getexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter function to get a variable of an experiment object — getexp","title":"Getter function to get a variable of an experiment object — getexp","text":"Getter function get variable experiment object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/getexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter function to get a variable of an experiment object — getexp","text":"","code":"getexp(nl, var)"},{"path":"https://docs.ropensci.org/nlrx/reference/getexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter function to get a variable of an experiment object — getexp","text":"nl nl object var valid experiment variable string","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/getexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getter function to get a variable of an experiment object — getexp","text":"","code":"# Example for Wolf Sheep Predation model from NetLogo models library: nl <- nl(nlversion = \"6.0.3\", nlpath = \"/home/user/NetLogo 6.0.3/\", modelpath = \"/home/user/NetLogo 6.0.3/app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\", jvmmem = 1024)  # Set experiment name setexp(nl, \"expname\") <- \"experimentName\"  # Get experiment name getexp(nl, \"experiment\") #> NULL"},{"path":"https://docs.ropensci.org/nlrx/reference/getnl.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter function to get a variable of a nl object — getnl","title":"Getter function to get a variable of a nl object — getnl","text":"Getter function get variable nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/getnl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter function to get a variable of a nl object — getnl","text":"","code":"getnl(nl, var)"},{"path":"https://docs.ropensci.org/nlrx/reference/getnl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter function to get a variable of a nl object — getnl","text":"nl nl object var valid nl variable string","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/getnl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getter function to get a variable of a nl object — getnl","text":"","code":"# Example for Wolf Sheep Predation model from NetLogo models library: nl <- nl(nlversion = \"6.0.3\", nlpath = \"/home/user/NetLogo 6.0.3/\", modelpath = \"/home/user/NetLogo 6.0.3/app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\", jvmmem = 1024)  # get NetLogo version getnl(nl, \"nlversion\") #> [1] \"6.0.3\""},{"path":"https://docs.ropensci.org/nlrx/reference/getsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Getter function to get a variable of a simdesign object — getsim","title":"Getter function to get a variable of a simdesign object — getsim","text":"Getter function get variable simdesign object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/getsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getter function to get a variable of a simdesign object — getsim","text":"","code":"getsim(nl, var)"},{"path":"https://docs.ropensci.org/nlrx/reference/getsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getter function to get a variable of a simdesign object — getsim","text":"nl nl object var valid simdesign variable string","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/getsim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getter function to get a variable of a simdesign object — getsim","text":"","code":"# Example for Wolf Sheep Predation model from NetLogo models library: nl <- nl(nlversion = \"6.0.3\", nlpath = \"/home/user/NetLogo 6.0.3/\", modelpath = \"/home/user/NetLogo 6.0.3/app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\", jvmmem = 1024)  # Set simulation seeds setsim(nl, \"simseeds\") <- c(123, 456, 789)  # Set simulation seeds getsim(nl, \"simseeds\") #> [1] 123 456 789"},{"path":"https://docs.ropensci.org/nlrx/reference/import_nl.html","id":null,"dir":"Reference","previous_headings":"","what":"Import NetLogo Experiment — import_nl","title":"Import NetLogo Experiment — import_nl","text":"Import NetLogo Experiment export_nl","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/import_nl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import NetLogo Experiment — import_nl","text":"","code":"import_nl(tarfile, targetdir, new_session = FALSE)"},{"path":"https://docs.ropensci.org/nlrx/reference/import_nl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import NetLogo Experiment — import_nl","text":"tarfile Path tarfile contains files run NetLogo experiment targetdir Path folder experiments gets extracted new_session TRUE, opens new RStudio Session Rproj","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/import_nl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import NetLogo Experiment — import_nl","text":"status value returned external command, invisibly.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/import_nl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import NetLogo Experiment — import_nl","text":"Imports NetLogo experiments saved export_nl. folder comes .Rproj file (recommended relative paths enhance reproducability analysis), import_nl opens project loads nl object R environment.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/import_nl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import NetLogo Experiment — import_nl","text":"","code":"if (FALSE) {  infile <- \"/home/user/test.zip\" targetdirectory <- \"/home/user/test\" import_nl(infile, targetdirectory) }"},{"path":"https://docs.ropensci.org/nlrx/reference/init-classes.html","id":null,"dir":"Reference","previous_headings":"","what":"initClasses — init-classes","title":"initClasses — init-classes","text":"empty","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/init-classes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initClasses — init-classes","text":"","code":".initClasses()"},{"path":"https://docs.ropensci.org/nlrx/reference/nl.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a new nl object — nl","title":"Construct a new nl object — nl","text":"Construct new nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a new nl object — nl","text":"","code":"nl(   nlversion = \"6.0.2\",   nlpath = character(),   modelpath = character(),   jvmmem = 1024,   experiment = methods::new(\"experiment\"),   simdesign = methods::new(\"simdesign\"),   ... )"},{"path":"https://docs.ropensci.org/nlrx/reference/nl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a new nl object — nl","text":"nlversion character string defining NetLogo version used nlpath Path NetLogo main directory matching defined version modelpath Path NetLogo model file (*.nlogo) used simulations jvmmem Java virtual machine memory capacity megabytes experiment Holds experiment S4 class object simdesign Holds simdesign S4 class object ... ...","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a new nl object — nl","text":"nl S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a new nl object — nl","text":"nl objects main class objects used nlrx package. objects store information needed run NetLogo simulations. nl objects initialized basic information Netlogo model. setting nl object, experiment needs attached. experiment class stores information related NetLogo simulation experiment, runtime, variables, constants, measurements, . attaching experiment, different simdesign helper functions can used attach simdesign nl object. simdesign helper functions use variable definitions experiment within nl object generate parameter tibble simulations.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a new nl object — nl","text":"","code":"# Example for Wolf Sheep Predation model from NetLogo models library: # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: simdesign distinct — nl_distinct","title":"Wolf Sheep model sample data: simdesign distinct — nl_distinct","text":"dataset contains complete nl object. nl object used setup run distinct simulation design. also contains model outputs within simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: simdesign distinct — nl_distinct","text":"","code":"nl_distinct"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_distinct.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: simdesign distinct — nl_distinct","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_eFast.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: simdesign eFast — nl_eFast","title":"Wolf Sheep model sample data: simdesign eFast — nl_eFast","text":"dataset contains complete nl object. nl object used setup run eFast simulation design. also contains model outputs within simdesign object. analysis output can derived submitting dataset analyze_nl().","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_eFast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: simdesign eFast — nl_eFast","text":"","code":"nl_eFast"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_eFast.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: simdesign eFast — nl_eFast","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_ff.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: simdesign ff — nl_ff","title":"Wolf Sheep model sample data: simdesign ff — nl_ff","text":"dataset contains complete nl object. nl object used setup run full-factorial simulation design. also contains model outputs within simdesign object. analysis output can derived submitting dataset analyze_nl().","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_ff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: simdesign ff — nl_ff","text":"","code":"nl_ff"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_ff.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: simdesign ff — nl_ff","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_gensa.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: gensa — nl_gensa","title":"Wolf Sheep model sample data: gensa — nl_gensa","text":"dataset contains complete nl object. nl object used setup run simulated annealing simulation design.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_gensa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: gensa — nl_gensa","text":"","code":"nl_gensa"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_gensa.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: gensa — nl_gensa","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_lhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: simdesign lhs — nl_lhs","title":"Wolf Sheep model sample data: simdesign lhs — nl_lhs","text":"dataset contains complete nl object. nl object used setup run latin hypercube simulation design. also contains model outputs within simdesign object. analysis output can derived submitting dataset analyze_nl().","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_lhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: simdesign lhs — nl_lhs","text":"","code":"nl_lhs"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_lhs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: simdesign lhs — nl_lhs","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_morris.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: simdesign morris — nl_morris","title":"Wolf Sheep model sample data: simdesign morris — nl_morris","text":"dataset contains complete nl object. nl object used setup run morris simulation design. also contains model outputs within simdesign object. analysis output can derived submitting dataset analyze_nl().","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_morris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: simdesign morris — nl_morris","text":"","code":"nl_morris"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_morris.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: simdesign morris — nl_morris","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: simdesign simple — nl_simple","title":"Wolf Sheep model sample data: simdesign simple — nl_simple","text":"dataset contains complete nl object. nl object used setup run simple simulation design. also contains model outputs within simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: simdesign simple — nl_simple","text":"","code":"nl_simple"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_simple.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: simdesign simple — nl_simple","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_sobol.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: simdesign sobol — nl_sobol","title":"Wolf Sheep model sample data: simdesign sobol — nl_sobol","text":"dataset contains complete nl object. nl object used setup run sobol simulation design. also contains model outputs within simdesign object. analysis output can derived submitting dataset analyze_nl().","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_sobol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: simdesign sobol — nl_sobol","text":"","code":"nl_sobol"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_sobol.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: simdesign sobol — nl_sobol","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_sobol2007.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: simdesign sobol2007 — nl_sobol2007","title":"Wolf Sheep model sample data: simdesign sobol2007 — nl_sobol2007","text":"dataset contains complete nl object. nl object used setup run sobol2007 simulation design. also contains model outputs within simdesign object. analysis output can derived submitting dataset analyze_nl().","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_sobol2007.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: simdesign sobol2007 — nl_sobol2007","text":"","code":"nl_sobol2007"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_sobol2007.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: simdesign sobol2007 — nl_sobol2007","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_soboljansen.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: simdesign soboljansen — nl_soboljansen","title":"Wolf Sheep model sample data: simdesign soboljansen — nl_soboljansen","text":"dataset contains complete nl object. nl object used setup run soboljansen simulation design. also contains model outputs within simdesign object. analysis output can derived submitting dataset analyze_nl().","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_soboljansen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: simdesign soboljansen — nl_soboljansen","text":"","code":"nl_soboljansen"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_soboljansen.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: simdesign soboljansen — nl_soboljansen","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_spatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Wolf Sheep model sample data: spatial — nl_spatial","title":"Wolf Sheep model sample data: spatial — nl_spatial","text":"dataset contains complete nl object. nl object used setup run simple simulation design. simulations, spatial agent output collected. metrics.turtles set measure turtle coordinates. metrics.patches set measure colors cells. also contains model outputs within simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_spatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wolf Sheep model sample data: spatial — nl_spatial","text":"","code":"nl_spatial"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_spatial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Wolf Sheep model sample data: spatial — nl_spatial","text":"nl object defined experiment, simdesign model output","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate igraph objects from measured turtles and links metrics — nl_to_graph","title":"Generate igraph objects from measured turtles and links metrics — nl_to_graph","text":"Generate igraph objects measured turtles links metrics","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate igraph objects from measured turtles and links metrics — nl_to_graph","text":"","code":"nl_to_graph(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate igraph objects from measured turtles and links metrics — nl_to_graph","text":"nl nl object Generate igraph objects measured turtles links metrics. Output attached simdesign first simoutput(nl) <- results graph objects created automatically combination random-seed, siminputrow step. additional column igraph objects attached original output results tibble nl object. order generate igraph objects metrics mandatory: metrics.turtles slot experiment must contain \"\" numbers (see example experiment). Additional turtle metrics stored properties igraph vertices. metrics.links slot experiment must contain \"\" numbers link end1 end2 (see example experiment). Additional link metrics stored properties igraph edges.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate igraph objects from measured turtles and links metrics — nl_to_graph","text":"","code":"if (FALSE) { ## Example running the Giant Component model from the NetLogo models library: library(nlrx) library(igraph) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.4\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Networks/Giant Component.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.4\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Networks/Giant Component.nlogo\") outpath <- file.path(\"/home/out\")  nl <- nl(nlversion = \"6.0.4\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024)  nl@experiment <- experiment(expname=\"networks\",                             outpath=outpath,                             repetition=1,                             tickmetrics=\"false\",                             idsetup=\"setup\",                             idgo=\"go\",                             runtime=50,                             metrics.turtles = list(\"turtles\" = c(\"who\", \"color\")),                             metrics.links = list(\"links\" = c(\"[who] of end1\", \"[who] of end2\")),                             constants = list(\"num-nodes\" = 80,                                              \"layout?\" = \"true\"))  nl@simdesign <- simdesign_simple(nl, 1) nl@simdesign@simoutput <- run_nl_all(nl) nl.graph <- nl_to_graph(nl)  ## Extract graph of tick 1: nl.graph.i <- nl.graph$spatial.links[[1]] ## Set vertex colors by measured color variable: vcols <- c(\"7\" = \"grey\", \"15\" = \"red\") V(nl.graph.i)$color <- vcols[as.character(V(nl.graph.i)$color)] ## Set edge colors by measured link breed: ecols <- c(\"links\" = \"black\") E(nl.graph.i)$color <- ecols[E(nl.graph.i)$breed]  ## Plot: plot.igraph(nl.graph.i, vertex.size=8, vertex.label=NA, edge.arrow.size=0.2)  }"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial data from metrics.turtles output — nl_to_points","title":"Get spatial data from metrics.turtles output — nl_to_points","text":"Turn turtle metrics NetLogo spatial data objects","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial data from metrics.turtles output — nl_to_points","text":"","code":"nl_to_points(nl, coords)"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial data from metrics.turtles output — nl_to_points","text":"nl nl object coords nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get spatial data from metrics.turtles output — nl_to_points","text":"tibble spatial data objects","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get spatial data from metrics.turtles output — nl_to_points","text":"Converts measured metrics.turtles spatial sf point objects. order , pair turtle coordinates needs measured. additional metrics stored properties spatial points. turtle coordinates NetLogo can measured two formats, pxcor/pycor xcor/ycor coordinates, type coordinate used transformation spatial objects need defined, using parameter coords: \"px\" pxcor/pycor coordinates, \"x\" xcor/ycor coordinates. order use function, simulation results need attached nl object first.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get spatial data from metrics.turtles output — nl_to_points","text":"","code":"# Load nl object (with spatial output data already attached) from test data: nl <- nl_spatial  # Convert turtle metrics (pxcor/pycor) to spatial point objects: results.sf <- nl_to_points(nl, coords=\"px\")"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial data from metrics.patches output — nl_to_raster","title":"Get spatial data from metrics.patches output — nl_to_raster","text":"Turn patch metrics NetLogo spatial data objects","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial data from metrics.patches output — nl_to_raster","text":"","code":"nl_to_raster(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial data from metrics.patches output — nl_to_raster","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get spatial data from metrics.patches output — nl_to_raster","text":"tibble spatial data objects","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get spatial data from metrics.patches output — nl_to_raster","text":"Converts measured metrics.patches spatial raster objects. order , patch coordinates needs measured (pxcor/pycor). additional patch metric, raster created using measured coordinates x y additional metric z dimension. case multiple measured metrics, raster stack one raster metric reported. order use function, simulation results need attached nl object first.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nl_to_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get spatial data from metrics.patches output — nl_to_raster","text":"","code":"# Load nl object (with spatial output data already attached) from test data: nl <- nl_spatial  # Convert patch metrics to spatial raster objects: results.raster <- nl_to_raster(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NetLogo documentation — nldoc","title":"Create NetLogo documentation — nldoc","text":"Create NetLogo documentation","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NetLogo documentation — nldoc","text":"","code":"nldoc(   modelfiles,   outpath,   infotab = TRUE,   gui = TRUE,   bs = TRUE,   output_format = \"html\",   number_sections = TRUE,   theme = \"journal\",   date = as.Date(Sys.time()),   toc = TRUE )"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NetLogo documentation — nldoc","text":"modelfiles vector filepaths model files outpath Path folder rendered documentation created infotab TRUE/FALSE, TRUE infotab section included documentation gui TRUE/FALSE, TRUE table GUI elements model included documentation bs TRUE/FALSE, TRUE table behavior space experiments included documentation output_format either \"html\", \"pdf\" \"docx\" number_sections TRUE/FALSE, TRUE sections documentation numbered theme markdown theme, supported themes \"journal\", \"cerulean\", \"flatly\", \"readable\", \"spacelab\", \"united\", \"cosmo\" date date printed documentation header toc TRUE/FALSE, TRUE documentation contains table contents - html pdf output format","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create NetLogo documentation — nldoc","text":"nldoc reads model code provided model files. code split several groups (code, gui, behavior space). procedures finds noxygen commands within NetLogo model code. complete list noxygen commands type ?nldoc commands translated markdown documentation file. needed, tables gui elements behavior space experiments added markdown file. Finally, document rendered specified format.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create NetLogo documentation — nldoc","text":"","code":"if (FALSE) {  # List model files (.nls subfiles are also supported) modelfiles <- c(\"https://raw.githubusercontent.com/nldoc/nldoc_pg/master/WSP.nlogo\",                 \"https://raw.githubusercontent.com/nldoc/nldoc_pg/master/WSP.nls\")  # Define output directory: outdir <- tempdir()  # adjust path to your needs  # Create documentation: nldoc(modelfiles = modelfiles,       infotab=TRUE,       gui=TRUE,       bs=TRUE,       outpath = outdir,       output_format = \"html\",       number_sections = TRUE,       theme = \"cosmo\",       date = date(),       toc = TRUE) }"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_find_procedure_calls.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine procedure calls — nldoc_find_procedure_calls","title":"Determine procedure calls — nldoc_find_procedure_calls","text":"Determine procedure calls","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_find_procedure_calls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine procedure calls — nldoc_find_procedure_calls","text":"","code":"nldoc_find_procedure_calls(nlogocode)"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_find_procedure_calls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine procedure calls — nldoc_find_procedure_calls","text":"nlogocode vector netlogo code strings","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_find_procedure_calls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine procedure calls — nldoc_find_procedure_calls","text":"tibble procedure names procedure calls","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_find_procedure_calls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine procedure calls — nldoc_find_procedure_calls","text":"procedure searches netlogo code procedure definitions calls. information stored within tibble can processed.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_network.html","id":null,"dir":"Reference","previous_headings":"","what":"Create NetLogo procedure network — nldoc_network","title":"Create NetLogo procedure network — nldoc_network","text":"Create NetLogo procedure network","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create NetLogo procedure network — nldoc_network","text":"","code":"nldoc_network(modelfiles)"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create NetLogo procedure network — nldoc_network","text":"modelfiles vector filepaths model files","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create NetLogo procedure network — nldoc_network","text":"network model procedures (igraph)","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_network.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create NetLogo procedure network — nldoc_network","text":"Reads model code provided model files. procedure identifies NetLogo procedures searches procedure calls within code. data, igraph network created returned. network can used plot model procedure network identify model components.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create NetLogo procedure network — nldoc_network","text":"","code":"if (FALSE) {  # List model files (.nls subfiles are also supported) modelfiles <- c(\"https://raw.githubusercontent.com/nldoc/nldoc_pg/master/WSP.nlogo\",                 \"https://raw.githubusercontent.com/nldoc/nldoc_pg/master/WSP.nls\")  # Determine the function network: nw <- nldoc_network(modelfiles)  # Determine communities within the network and plot using Igraph package: library(igraph) com <- walktrap.community(nw) V(nw)$community <- com$membership rain <- rainbow(14, alpha=.5) V(nw)$color <- rain[V(nw)$community]  plot(nw,      edge.arrow.size=.2,      vertex.label.color=\"black\",      vertex.label.dist=1,      vertex.size=5,      edge.curved=0,      vertex.label.cex=.5,      layout=layout_with_fr(nw, niter = 2000))  # Interactive plot using igraph::tkplot tkplot(nw, layout=layout_with_fr(nw, niter = 2000)) }"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_parse_modelcode.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse model code — nldoc_parse_modelcode","title":"Parse model code — nldoc_parse_modelcode","text":"Parse model code","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_parse_modelcode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse model code — nldoc_parse_modelcode","text":"","code":"nldoc_parse_modelcode(nlogocode)"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_parse_modelcode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse model code — nldoc_parse_modelcode","text":"nlogocode vector netlogo code strings","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_parse_modelcode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse model code — nldoc_parse_modelcode","text":"tibble structured netlogo code","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_parse_modelcode.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse model code — nldoc_parse_modelcode","text":"procedure searches noxygen commands within NetLogo code. information used structure netlogo code strings tibble. Additionally, tibbles gui behavior space information created.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_read_nlogo.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NetLogo model code from files — nldoc_read_nlogo","title":"Read NetLogo model code from files — nldoc_read_nlogo","text":"Read NetLogo model code files","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_read_nlogo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NetLogo model code from files — nldoc_read_nlogo","text":"","code":"nldoc_read_nlogo(modelfiles)"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_read_nlogo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NetLogo model code from files — nldoc_read_nlogo","text":"modelfiles vector filepaths model files","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_read_nlogo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NetLogo model code from files — nldoc_read_nlogo","text":"vector strings containing NetLogo model code","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_read_nlogo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read NetLogo model code from files — nldoc_read_nlogo","text":"procedure reads text provided model files reports code vector strings.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_bs.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NetLogo behavior space experiments from files — nldoc_table_bs","title":"Read NetLogo behavior space experiments from files — nldoc_table_bs","text":"Read NetLogo behavior space experiments files","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_bs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NetLogo behavior space experiments from files — nldoc_table_bs","text":"","code":"nldoc_table_bs(modelfiles)"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_bs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NetLogo behavior space experiments from files — nldoc_table_bs","text":"modelfiles vector filepaths model files","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_bs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NetLogo behavior space experiments from files — nldoc_table_bs","text":"list containing NetLogo behavior space experiments","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_bs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read NetLogo behavior space experiments from files — nldoc_table_bs","text":"procedure reads text provided model files reports list behavior space experiments.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_gui.html","id":null,"dir":"Reference","previous_headings":"","what":"Read NetLogo GUI elements from files — nldoc_table_gui","title":"Read NetLogo GUI elements from files — nldoc_table_gui","text":"Read NetLogo GUI elements files","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_gui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read NetLogo GUI elements from files — nldoc_table_gui","text":"","code":"nldoc_table_gui(modelfiles)"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_gui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read NetLogo GUI elements from files — nldoc_table_gui","text":"modelfiles vector filepaths model files","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_gui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read NetLogo GUI elements from files — nldoc_table_gui","text":"list containing NetLogo GUI elements","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_table_gui.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read NetLogo GUI elements from files — nldoc_table_gui","text":"procedure reads text provided model files reports list GUI elements.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_write_nldoc.html","id":null,"dir":"Reference","previous_headings":"","what":"Write NetLogo documentation — nldoc_write_nldoc","title":"Write NetLogo documentation — nldoc_write_nldoc","text":"Write NetLogo documentation","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_write_nldoc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write NetLogo documentation — nldoc_write_nldoc","text":"","code":"nldoc_write_nldoc(   noxygen,   noxygen_it,   noxygen_gui,   noxygen_bs,   outpath,   output_format,   number_sections,   theme,   date,   toc )"},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_write_nldoc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write NetLogo documentation — nldoc_write_nldoc","text":"noxygen list parsed processed noxygen tags NetLogo model code noxygen_it list parsed processed infotab strings noxygen_gui list parsed processed noxygen tags NetLogo GUI elements noxygen_bs list parsed processed noxygen tags NetLogo behavior space experiments outpath Path folder rendered documentation created output_format either \"html\", \"pdf\" \"docx\" theme markdown theme, supported themes \"journal\", \"cerulean\", \"flatly\", \"readable\", \"spacelab\", \"united\", \"cosmo\" date date printed documentation header toc TRUE/FALSE, TRUE documentation contains table contents - html pdf output format number_ections TRUE/FALSE, TRUE sections documentation numbered","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_write_nldoc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write NetLogo documentation — nldoc_write_nldoc","text":"list containing NetLogo GUI elements","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nldoc_write_nldoc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write NetLogo documentation — nldoc_write_nldoc","text":"procedure uses parsed processed noxygen tags create render markdown documentation specified format.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nlrx-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nlrx: A package for running NetLogo simulations from R. — nlrx-package","title":"nlrx: A package for running NetLogo simulations from R. — nlrx-package","text":"nlrx package provides tools setup NetLogo simulations R. uses similar structure NetLogos Behavior Space offers flexibility additional tools running sensitivity analyses.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/nlrx-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"nlrx: A package for running NetLogo simulations from R. — nlrx-package","text":"Get started: General information needed run NetLogo simulations remotely, path NetLogo installation folder stored within nl class object. Nested within nl class classes experiment simdesign. experiment class stores experiment specifications. attaching valid experiment, simdesign class object can attached nl class object, using one simdesign helper functions. helper functions create different parameter input matrices experiment variable definitions can executed run_nl_one() run_nl_all() functions. nested design allows store everything related experiment within one R object. Additionally, different simdesign helper functions can applied nl object order repeat experiment different parameter exploration methods (simdesigns). Step step application example \"Wolf Sheep Predation\" model NetLogo models library used present basic example setup run NetLogo model simulations R. Step 1: Create nl object: nl object holds information NetLogo version, path NetLogo directory defined version, path model file, desired memory java virtual machine. Depending operation system, paths NetLogo model need adjusted.   Step 2: Attach experiment experiment object organized similar fashion NetLogo Behavior Space experiments. contains information needed generate simulation parameter matrix execute NetLogo simulations. Details specific slots experiment class can found package documentation (?experiment) \"Advanced configuration\" vignette.   Step 3: Attach simulation design experiment defines variables specifications model, simulation design creates parameter input table based model specifications chosen simulation design method. nlrx provides bunch different simulation designs, full-factorial, latin-hypercube, sobol, morris eFast (see \"Simdesign Examples\" vignette information simdesigns). simdesign helper functions need properly defined nl object valid experiment design. simdesign helper also allows define number random seeds randomly generated can used execute repeated simulations parameter matrix different random-seeds (see \"Advanced configuration\" vignette information random-seed repetition management). simulation design attached nl object using one simdesign helper functions:   Step 4: Run simulations information needed run simulations now stored within nl object. run_nl_one() function allows run one specific simulation siminput parameter table. run_nl_all() function runs loop simseeds rows parameter input table siminput. loops constructed way allows easy parallelisation, either locally remote HPC machines (see \"Advanced configuration\" vignette information parallelisation).   Step 5: Attach results nl run analysis nlrx provides method specific analysis functions simulation design. Depending chosen design, function reports tibble aggregated results sensitivity indices. order run analyze_nl() function, simulation output attached nl object first. attaching simulation results, can also written defined outpath experiment object.","code":"library(nlrx) # Windows default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"C:/Program Files/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"C:/out\") # Unix default NetLogo installation path (adjust to your needs!): netlogopath <- file.path(\"/home/NetLogo 6.0.3\") modelpath <- file.path(netlogopath, \"app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\") outpath <- file.path(\"/home/out\") nl <- nl(nlversion = \"6.0.3\",          nlpath = netlogopath,          modelpath = modelpath,          jvmmem = 1024) nl@experiment <- experiment(expname=\"wolf-sheep\",                              outpath=outpath,                              repetition=1,                              tickmetrics=\"true\",                              idsetup=\"setup\",                              idgo=\"go\",                              runtime=50,                              evalticks=seq(40,50),                              metrics=c(\"count sheep\", \"count wolves\", \"count patches with [pcolor = green]\"),                              variables = list('initial-number-sheep' = list(min=50, max=150, qfun=\"qunif\"),                                               'initial-number-wolves' = list(min=50, max=150, qfun=\"qunif\")),                              constants = list(\"model-version\" = \"\\\"sheep-wolves-grass\\\"\",                                               \"grass-regrowth-time\" = 30,                                               \"sheep-gain-from-food\" = 4,                                               \"wolf-gain-from-food\" = 20,                                               \"sheep-reproduce\" = 4,                                               \"wolf-reproduce\" = 5,                                               \"show-energy?\" = \"false\")) nl@simdesign <- simdesign_lhs(nl=nl,                                samples=100,                                nseeds=3,                                precision=3) results <- run_nl_all(nl = nl) # Attach results to nl object: setsim(nl, \"simoutput\") <- results # Write output to outpath of experiment within nl write_simoutput(nl) # Do further analysis: analyze_nl(nl)"},{"path":[]},{"path":"https://docs.ropensci.org/nlrx/reference/nlrx-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nlrx: A package for running NetLogo simulations from R. — nlrx-package","text":"Jan Salecker jan.salecker@posteo.de","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://docs.ropensci.org/nlrx/reference/print.nl.html","id":null,"dir":"Reference","previous_headings":"","what":"Print content of nl object — print.nl","title":"Print content of nl object — print.nl","text":"Print content nl object embedded experiment simdesign objects console","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/print.nl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print content of nl object — print.nl","text":"","code":"# S3 method for nl print(x, ...)"},{"path":"https://docs.ropensci.org/nlrx/reference/print.nl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print content of nl object — print.nl","text":"x nl object print ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/print.nl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print content of nl object — print.nl","text":"Print content provided nl object readable format.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/print.nl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print content of nl object — print.nl","text":"","code":"print(nl_lhs) #>  #>    NL OBJECT    #> NetLogo version = 6.0.4 #> NetLogo path    = C:/Program Files/NetLogo 6.0.4/ #> Model path      = C:/Program Files/NetLogo 6.0.4/app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo #> JVM memory      = 1000 #>  #>    EXPERIMENT    #> Experiment name        = nlrx #> Output path            = C:/out #> NetLogo repetitions    = 1 #> Measure on each tick?  = false #> Setup procedure(s)     = setup #> Go procedure(s)        = go #> Final procedure(s)     = NA #> Run nr. widget name    = NA #> Runtime (ticks)        = 10 #> Report output on ticks = 10 #> Stop condition         = NA #> Metrics (output)       = count sheep, count wolves #>  #> Turtle metrics (output) #>      =  #>  #> Patch metrics (output) #>     NA #>  #> Link metrics (output) #>      =  #>  #> Variable parameters (input) #>     initial-number-sheep = list(min = 50, max = 150, step = 10, qfun = \"qunif\") #>     initial-number-wolves = list(min = 50, max = 150, step = 10, qfun = \"qunif\") #>  #> Constant parameters (input) #>     model-version = \"sheep-wolves-grass\" #>     grass-regrowth-time = 30 #>     sheep-gain-from-food = 4 #>     wolf-gain-from-food = 20 #>     sheep-reproduce = 4 #>     wolf-reproduce = 5 #>     show-energy? = false #>  #>    SIMDESIGN    #> Simulation method      = lhs #> Simulation object      =  #> Generated random seeds = -108303981 #>  #> Parameter matrix (input) #> # A tibble: 100 × 9 #>    `initial-number-sheep` `initial-number-wolves` `model-version`          #>                     <dbl>                   <dbl> <chr>                    #>  1                  117.                    109.  \"\\\"sheep-wolves-grass\\\"\" #>  2                   99.6                    56.1 \"\\\"sheep-wolves-grass\\\"\" #>  3                   91.7                    82.3 \"\\\"sheep-wolves-grass\\\"\" #>  4                  115.                     57.5 \"\\\"sheep-wolves-grass\\\"\" #>  5                   84.6                   111.  \"\\\"sheep-wolves-grass\\\"\" #>  6                  120.                    125.  \"\\\"sheep-wolves-grass\\\"\" #>  7                   54.6                   139.  \"\\\"sheep-wolves-grass\\\"\" #>  8                   90.5                   147.  \"\\\"sheep-wolves-grass\\\"\" #>  9                   50.3                    93.7 \"\\\"sheep-wolves-grass\\\"\" #> 10                  111.                    119.  \"\\\"sheep-wolves-grass\\\"\" #>    `grass-regrowth-time` `sheep-gain-from-food` `wolf-gain-from-food` #>                    <dbl>                  <dbl>                 <dbl> #>  1                    30                      4                    20 #>  2                    30                      4                    20 #>  3                    30                      4                    20 #>  4                    30                      4                    20 #>  5                    30                      4                    20 #>  6                    30                      4                    20 #>  7                    30                      4                    20 #>  8                    30                      4                    20 #>  9                    30                      4                    20 #> 10                    30                      4                    20 #>    `sheep-reproduce` `wolf-reproduce` `show-energy?` #>                <dbl>            <dbl> <chr>          #>  1                 4                5 false          #>  2                 4                5 false          #>  3                 4                5 false          #>  4                 4                5 false          #>  5                 4                5 false          #>  6                 4                5 false          #>  7                 4                5 false          #>  8                 4                5 false          #>  9                 4                5 false          #> 10                 4                5 false          #> # ℹ 90 more rows #>  #> Simulation results (output) #> # A tibble: 100 × 15 #>    `[run number]` `initial-number-sheep` `initial-number-wolves` #>             <dbl>                  <dbl>                   <dbl> #>  1              1                  117.                    109.  #>  2              1                   99.6                    56.1 #>  3              1                   91.7                    82.3 #>  4              1                  115.                     57.5 #>  5              1                   84.6                   111.  #>  6              1                  120.                    125.  #>  7              1                   54.6                   139.  #>  8              1                   90.5                   147.  #>  9              1                   50.3                    93.7 #> 10              1                  111.                    119.  #>    `model-version`    `grass-regrowth-time` `sheep-gain-from-food` #>    <chr>                              <dbl>                  <dbl> #>  1 sheep-wolves-grass                    30                      4 #>  2 sheep-wolves-grass                    30                      4 #>  3 sheep-wolves-grass                    30                      4 #>  4 sheep-wolves-grass                    30                      4 #>  5 sheep-wolves-grass                    30                      4 #>  6 sheep-wolves-grass                    30                      4 #>  7 sheep-wolves-grass                    30                      4 #>  8 sheep-wolves-grass                    30                      4 #>  9 sheep-wolves-grass                    30                      4 #> 10 sheep-wolves-grass                    30                      4 #>    `wolf-gain-from-food` `sheep-reproduce` `wolf-reproduce` `show-energy?` #>                    <dbl>             <dbl>            <dbl> <lgl>          #>  1                    20                 4                5 FALSE          #>  2                    20                 4                5 FALSE          #>  3                    20                 4                5 FALSE          #>  4                    20                 4                5 FALSE          #>  5                    20                 4                5 FALSE          #>  6                    20                 4                5 FALSE          #>  7                    20                 4                5 FALSE          #>  8                    20                 4                5 FALSE          #>  9                    20                 4                5 FALSE          #> 10                    20                 4                5 FALSE          #>    `random-seed` `[step]` `count sheep` `count wolves` siminputrow #>            <dbl>    <dbl>         <dbl>          <dbl>       <dbl> #>  1    -108303981       10           102            115           1 #>  2    -108303981       10            80             86           2 #>  3    -108303981       10            78            100           3 #>  4    -108303981       10           101             65           4 #>  5    -108303981       10            78            118           5 #>  6    -108303981       10            93            141           6 #>  7    -108303981       10            42            145           7 #>  8    -108303981       10            64            154           8 #>  9    -108303981       10            37            100           9 #> 10    -108303981       10            76            123          10 #> # ℹ 90 more rows #>  #>    SUMMARY    #> supported nlversion: ✓ #> nlpath exists on local system: ✗ #> modelpath exists on local system: ✗ #> valid jvm memory: ✓ #> valid experiment name: ✓ #> outpath exists on local system: ✗ #> setup and go defined: ✓ #> variables defined: ✓ #> constants defined: ✓ #> metrics defined: ✓ #> spatial Metrics defined: ✓ #> simdesign attached: ✓ #> siminput parameter matrix: ✓ #> number of siminputrows: 100 #> number of random seeds: 1 #> estimated number of runs: 100 #> simoutput results attached: ✓ #> number of runs calculated: 100"},{"path":"https://docs.ropensci.org/nlrx/reference/report_model_parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Report globals from a NetLogo model that is defined within a nl object — report_model_parameters","title":"Report globals from a NetLogo model that is defined within a nl object — report_model_parameters","text":"Report globals NetLogo model defined within nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/report_model_parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report globals from a NetLogo model that is defined within a nl object — report_model_parameters","text":"","code":"report_model_parameters(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/report_model_parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report globals from a NetLogo model that is defined within a nl object — report_model_parameters","text":"nl nl object defined modelpath points NetLogo model (*.nlogo)","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/report_model_parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Report globals from a NetLogo model that is defined within a nl object — report_model_parameters","text":"function reads NetLogo model file defined within nl object reports global parameters defined widget elements GUI NetLogo model. globals found function valid globals can entered variables constants vector experiment object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/report_model_parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report globals from a NetLogo model that is defined within a nl object — report_model_parameters","text":"","code":"if (FALSE) { nl <- nl_lhs report_model_parameters(nl) }"},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute all NetLogo simulations from a nl object — run_nl_all","title":"Execute all NetLogo simulations from a nl object — run_nl_all","text":"Execute NetLogo simulations nl object defined experiment simdesign","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute all NetLogo simulations from a nl object — run_nl_all","text":"","code":"run_nl_all(   nl,   split = 1,   cleanup.csv = TRUE,   cleanup.xml = TRUE,   cleanup.bat = TRUE,   writeRDS = FALSE )"},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute all NetLogo simulations from a nl object — run_nl_all","text":"nl nl object split number parts job split cleanup.csv TRUE/FALSE, TRUE temporary created csv output files deleted gathering results. cleanup.xml TRUE/FALSE, TRUE temporary created xml output files deleted gathering results. cleanup.bat TRUE/FALSE, TRUE temporary created bat/sh output files deleted gathering results. writeRDS TRUE/FALSE, TRUE, single simulation rds file simulation results written defined outpath folder experiment within nl object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute all NetLogo simulations from a nl object — run_nl_all","text":"tibble simulation output results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_all.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute all NetLogo simulations from a nl object — run_nl_all","text":"run_nl_all executes simulations specified NetLogo model within provided nl object. function loops random seeds rows siminput table simdesign nl. loops created calling future_map_dfr, allows running function either locally remote HPC machines. logical cleanup variables can set FALSE preserve temporary generated output files (e.g. debugging). cleanup.csv deletes/keeps temporary generated model output files run. cleanup.xml deletes/keeps temporary generated experiment xml files run. cleanup.bat deletes/keeps temporary generated batch/sh commandline files run. using run_nl_all parallelized environment (e.g. setting future plan using future package), outer loop function (random seeds) creates jobs distributed available cores current machine. inner loop (siminputrows) distributes simulation tasks cores. However, might advantageous split large jobs smaller jobs example reduce total runtime job. can done using split parameter. split > 1 siminput matrix split smaller parts. Jobs created combination part random seed. split parameter set siminput matrix can splitted equal parts, procedure stop throw error message.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_all.html","id":"debugging-temporary-simulation-output-file-not-found-error-message-","dir":"Reference","previous_headings":"","what":"Debugging \"Temporary simulation output file not found\" error message:","title":"Execute all NetLogo simulations from a nl object — run_nl_all","text":"Whenever error message appears means simulation produce output. Two main reasons can lead problem, either simulation even start simulation crashed runtime. can happen several reasons hints debugging : Missing software: Make sure java installed available terminal (java -version). Make sure NetLogo installed available terminal. Wrong path definitions: Make sure nlpath points folder containing NetLogo. Make sure modelpath points *.nlogo model file. Make sure nlversion within nl object matches NetLogo version nlpath. Use convenience function nlrx checking nl object (print(nl), eval_variables_constants(nl)). Temporary files cleanup: Due automatic temp file cleanup unix systems temporary output might deleted. Try reassigning default temp folder R session (unixtools package neat function). NetLogo runtime crashes: can happen NetLogo model started failed produce output NetLogo runtime error. Make sure model working correctly track progress using print statements. Sometimes java virtual machine crashes due memory constraints.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute all NetLogo simulations from a nl object — run_nl_all","text":"","code":"if (FALSE) {  # Load nl object from test data: nl <- nl_lhs  # Execute all simulations from an nl object with properly attached simdesign. results <- run_nl_all(nl)  # Run in parallel on local machine: library(future) plan(multisession) results <- run_nl_all(nl)  }"},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_dyn.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute NetLogo simulation without pregenerated parametersets — run_nl_dyn","title":"Execute NetLogo simulation without pregenerated parametersets — run_nl_dyn","text":"Execute NetLogo simulation nl object defined experiment simdesign pregenerated input parametersets","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_dyn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute NetLogo simulation without pregenerated parametersets — run_nl_dyn","text":"","code":"run_nl_dyn(   nl,   seed,   cleanup.csv = TRUE,   cleanup.xml = TRUE,   cleanup.bat = TRUE )"},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_dyn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute NetLogo simulation without pregenerated parametersets — run_nl_dyn","text":"nl nl object seed random seed NetLogo simulation cleanup.csv TRUE/FALSE, TRUE temporary created csv output files deleted gathering results. cleanup.xml TRUE/FALSE, TRUE temporary created xml output files deleted gathering results. cleanup.bat TRUE/FALSE, TRUE temporary created bat/sh output files deleted gathering results.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_dyn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute NetLogo simulation without pregenerated parametersets — run_nl_dyn","text":"simulation output results can tibble, list, ...","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_dyn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute NetLogo simulation without pregenerated parametersets — run_nl_dyn","text":"run_nl_dyn can used simdesigns predefined parametersets exist. case dynamic designs, Simulated Annealing Genetic Algorithms, parametersets dynamically generated, based output previous simulations. logical cleanup variables can set FALSE preserve temporary generated output files (e.g. debugging). cleanup.csv deletes/keeps temporary generated model output files run. cleanup.xml deletes/keeps temporary generated experiment xml files run. cleanup.bat deletes/keeps temporary generated batch/sh commandline files run.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_dyn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute NetLogo simulation without pregenerated parametersets — run_nl_dyn","text":"","code":"if (FALSE) {  # Load nl object form test data: nl <- nl_lhs  # Add genalg simdesign: nl@simdesign <- simdesign_GenAlg(nl=nl,                                   popSize = 200,                                   iters = 100,                                   evalcrit = 1,                                   nseeds = 1)  # Run simulations: results <- run_nl_dyn(nl)  }"},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_one.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute one NetLogo simulation from a nl object — run_nl_one","title":"Execute one NetLogo simulation from a nl object — run_nl_one","text":"Execute one NetLogo simulation nl object defined experiment simdesign","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_one.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute one NetLogo simulation from a nl object — run_nl_one","text":"","code":"run_nl_one(   nl,   seed,   siminputrow,   cleanup.csv = TRUE,   cleanup.xml = TRUE,   cleanup.bat = TRUE,   writeRDS = FALSE )"},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_one.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute one NetLogo simulation from a nl object — run_nl_one","text":"nl nl object seed random seed NetLogo simulation siminputrow rownumber input tibble within attached simdesign object executed cleanup.csv TRUE/FALSE, TRUE temporary created csv output files deleted gathering results. cleanup.xml TRUE/FALSE, TRUE temporary created xml output files deleted gathering results. cleanup.bat TRUE/FALSE, TRUE temporary created bat/sh output files deleted gathering results. writeRDS TRUE/FALSE, TRUE rds file simulation results written defined outpath folder experiment within nl object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_one.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute one NetLogo simulation from a nl object — run_nl_one","text":"tibble simulation output results","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_one.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute one NetLogo simulation from a nl object — run_nl_one","text":"run_nl_one executes one simulation specified NetLogo model within provided nl object. random seed set within NetLogo model control stochasticity. siminputrow number defines row input data tibble within simdesign object provided nl object executed. logical cleanup variables can set FALSE preserve temporary generated output files (e.g. debugging). cleanup.csv deletes/keeps temporary generated model output files run. cleanup.xml deletes/keeps temporary generated experiment xml files run. cleanup.bat deletes/keeps temporary generated batch/sh commandline files run. function can used run single simulations NetLogo model.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/run_nl_one.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute one NetLogo simulation from a nl object — run_nl_one","text":"","code":"if (FALSE) {  # Load nl object from test data: nl <- nl_lhs  # Run one simulation: results <- run_nl_one(nl = nl,                       seed = getsim(nl, \"simseeds\")[1],                       siminputrow = 1)  }"},{"path":"https://docs.ropensci.org/nlrx/reference/setexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter function to set a variable of an experiment object — setexp<-","title":"Setter function to set a variable of an experiment object — setexp<-","text":"Setter function set variable experiment object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/setexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter function to set a variable of an experiment object — setexp<-","text":"","code":"setexp(nl, var) <- value"},{"path":"https://docs.ropensci.org/nlrx/reference/setexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter function to set a variable of an experiment object — setexp<-","text":"nl nl object var valid experiment variable string value valid value specified variable","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/setexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter function to set a variable of an experiment object — setexp<-","text":"","code":"# Example for Wolf Sheep Predation model from NetLogo models library: nl <- nl(nlversion = \"6.0.3\", nlpath = \"/home/user/NetLogo 6.0.3/\", modelpath = \"/home/user/NetLogo 6.0.3/app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\", jvmmem = 1024)  # Set experiment name setexp(nl, \"expname\") <- \"experimentName\""},{"path":"https://docs.ropensci.org/nlrx/reference/setnl.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter function to set a variable of a nl object — setnl<-","title":"Setter function to set a variable of a nl object — setnl<-","text":"Setter function set variable nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/setnl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter function to set a variable of a nl object — setnl<-","text":"","code":"setnl(nl, var) <- value"},{"path":"https://docs.ropensci.org/nlrx/reference/setnl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter function to set a variable of a nl object — setnl<-","text":"nl nl object var valid nl variable string value valid value specified variable","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/setnl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter function to set a variable of a nl object — setnl<-","text":"","code":"# Example for Wolf Sheep Predation model from NetLogo models library: nl <- nl( nlpath = \"/home/user/NetLogo 6.0.3/\", modelpath = \"/home/user/NetLogo 6.0.3/app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\", jvmmem = 1024)  # set NetLogo version setnl(nl, \"nlversion\") <- \"6.0.3\""},{"path":"https://docs.ropensci.org/nlrx/reference/setsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Setter function to set a variable of a simdesign object — setsim<-","title":"Setter function to set a variable of a simdesign object — setsim<-","text":"Setter function set variable simdesign object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/setsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setter function to set a variable of a simdesign object — setsim<-","text":"","code":"setsim(nl, var) <- value"},{"path":"https://docs.ropensci.org/nlrx/reference/setsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setter function to set a variable of a simdesign object — setsim<-","text":"nl nl object var valid simdesign variable string value valid value specified variable","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/setsim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setter function to set a variable of a simdesign object — setsim<-","text":"","code":"# Example for Wolf Sheep Predation model from NetLogo models library: nl <- nl(nlversion = \"6.0.3\", nlpath = \"/home/user/NetLogo 6.0.3/\", modelpath = \"/home/user/NetLogo 6.0.3/app/models/Sample Models/Biology/Wolf Sheep Predation.nlogo\", jvmmem = 1024)  # Set simulation seeds setsim(nl, \"simseeds\") <- c(123, 456, 789)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a new simdesign object — simdesign","title":"Construct a new simdesign object — simdesign","text":"Construct new simdesign object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a new simdesign object — simdesign","text":"","code":"simdesign(   simmethod = character(),   siminput = tibble::tibble(),   simobject = list(),   simseeds = NA_integer_,   simoutput = tibble::tibble(),   ... )"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a new simdesign object — simdesign","text":"simmethod character string defining method simulation design siminput tibble providing input parameterisations NetLogo model (cols=parameter, rows=runs) simobject used methods store additional information (sobol, morris, eFast) simseeds vector model random seeds simoutput tibble containing model results ... ...","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a new simdesign object — simdesign","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a new simdesign object — simdesign","text":"simulation design class holds information input parameter design model simulations. also stores information needed run method specific analysis functions. simseeds can used run model simulations defined within siminput tibble several times changing random-seeds. possible add simdesign directly function, suggest use simdesign_helper functions. simulation design can attached nl object using one simdesign_helper functions already defined nl object valid experiment. simdesign helpers use defined constants variables experiment create siminput tibble. NetLogo parameters defined constants variables set default value NetLogo interface. Currently, following simdesign_helper functions provided: simdesign_simple simple simdesign uses defined constants reports parameter matrix one parameterization. setup simple simdesign, variables defined. simdesign_distinct distinct simdesign can used run distinct parameter combinations. setup distinct simdesign, vectors values need defined variable. vectors must number elements across variables. first simulation run consist 1st elements variable vectors; second run uses 2nd values, . simdesign_ff full factorial simdesign creates full-factorial parameter matrix possible combinations parameter values. setup full-factorial simdesign, vectors values need defined variable. Alternatively, sequence can defined setting min, max step. However, (values min, max, step) defined, values vector prioritized. simdesign_lhs latin hypercube simdesign creates Latin Hypercube sampling parameter matrix. method can used generate near-random sample parameter values defined parameter distributions. Details Latin Hypercube Sampling can found McKay (1979) doi:10.1080/00401706.1979.10489755 . nlrx uses lhs package generate Latin Hypercube parameter matrix. setup latin hypercube sampling simdesign, variable distributions need defined (min, max, qfun). Sensitivity Analyses: simdesign_sobol, simdesign_sobol2007, simdesign_soboljansen, simdesign_morris, simdesign_eFast Sensitivity analyses useful estimate importance model parameters scan parameter space efficient way. nlrx uses sensitivity package setup sensitivity analysis parameter matrices. supported sensitivity analysis simdesigns can used calculate sensitivity indices parameter-output combination. indices can calculated using analyze_nl function attaching simulation results nl object. setup sensitivity analysis simdesigns, variable distributions (min, max, qfun) need defined. Optimization techniques: simdesign_GenSA, simdesign_GenAlg Optimization techniques powerful tool search parameter space specific solutions. approaches try minimize specified model output reporter systematically (genetic algorithm, utilizing genalg package) randomly (simulated annealing, utilizing genSA package) changing model parameters within allowed ranges. setup optimization simdesigns, variable ranges (min, max) need defined. Optimization simdesigns can executed using run_nl_dyn function instead run_nl_all run_nl_one.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a new simdesign object — simdesign","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load nl objects from test data.  # Simdesign examples for Wolf Sheep Predation model from NetLogo models library:  nl <- nl_simple nl@simdesign <- simdesign_simple(nl = nl,                                  nseeds = 3) #> Creating simple simulation design  nl <- nl_distinct nl@simdesign <- simdesign_distinct(nl = nl,                                    nseeds = 3) #> Creating distinct simulation design  nl <- nl_ff nl@simdesign <- simdesign_ff(nl = nl,                              nseeds = 3) #> Creating full factorial simulation design  nl <- nl_lhs nl@simdesign <- simdesign_lhs(nl=nl,                               samples=100,                               nseeds=3,                               precision=3) #> Creating latin hypercube simulation design  nl <- nl_sobol nl@simdesign <- simdesign_sobol(nl=nl,                                 samples=200,                                 sobolorder=2,                                 sobolnboot=20,                                 sobolconf=0.95,                                 nseeds=3,                                 precision=3) #> Creating sobol simulation design  nl <- nl_sobol2007 nl@simdesign <- simdesign_sobol2007(nl=nl,                                     samples=200,                                     sobolnboot=20,                                     sobolconf=0.95,                                     nseeds=3,                                     precision=3) #> Creating sobol2007 simulation design  nl <- nl_soboljansen nl@simdesign <- simdesign_soboljansen(nl=nl,                                       samples=200,                                       sobolnboot=20,                                       sobolconf=0.95,                                       nseeds=3,                                       precision=3) #> Creating soboljansen simulation design  nl <- nl_morris nl@simdesign <- simdesign_morris(nl=nl,                                  morristype=\"oat\",                                  morrislevels=4,                                  morrisr=100,                                  morrisgridjump=2,                                  nseeds=3) #> Creating morris simulation design #> Warning: keeping 30 repetitions out of 100  nl <- nl_eFast nl@simdesign <- simdesign_eFast(nl=nl,                                 samples=100,                                 nseeds=3) #> Creating eFast simulation design  nl <- nl_lhs nl@simdesign <- simdesign_GenAlg(nl=nl,                                  popSize = 200,                                  iters = 100,                                  evalcrit = 1,                                  elitism = NA,                                  mutationChance = NA,                                  nseeds = 1) #> Creating GenAlg simulation design  nl <- nl_lhs nl@simdesign <- simdesign_GenSA(nl=nl,                                 par=NULL,                                 evalcrit=1,                                 control=list(max.time = 600),                                 nseeds=1) #> Creating GenSA simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Marjoram_original.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram Original algorithm to a nl object — simdesign_ABCmcmc_Marjoram_original","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram Original algorithm to a nl object — simdesign_ABCmcmc_Marjoram_original","text":"Add Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using Majoram Original algorithm nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Marjoram_original.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram Original algorithm to a nl object — simdesign_ABCmcmc_Marjoram_original","text":"","code":"simdesign_ABCmcmc_Marjoram_original(   nl,   postpro_function = NULL,   summary_stat_target,   prior_test = NULL,   n_rec,   n_between_sampling = 10,   n_cluster = 1,   use_seed = FALSE,   dist_weights = NULL,   dist_max = 0,   tab_normalization = summary_stat_target,   proposal_range = vector(mode = \"numeric\", length = length(getexp(nl, \"variables\"))),   seed_count = 0,   progress_bar = FALSE,   nseeds )"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Marjoram_original.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram Original algorithm to a nl object — simdesign_ABCmcmc_Marjoram_original","text":"nl nl object defined experiment postpro_function default NULL. Allows provide function called post-process output Tibble NetLogo simulations. function must accept nl object attached results input argument. function must return one-dimensional vector output metrics corresponds leght order specified summary_stat_target. summary_stat_target vector target values order defined metrics experiment prior_test string expressing constraints model parameters. expression evaluated logical expression, can use logical operators including \"<\", \">\", ... parameter designated \"X1\", \"X2\", ... order prior definition. Set NULL disable. n_rec Number samples along MCMC n_between_sampling positive integer equal desired spacing sampled points along MCMC. n_cluster number cores parallelize simulations. Due design EasyABC parallelization currently possible use feature cores > 1. use_seed TRUE, seeds automatically created new model run dist_weights vector containing weights apply distance computed targeted statistics. weights can used give importance summary statistic example. weights normalized applying . Set NULL disable. dist_max positive number. tolerance threshold used MCMC. provided user, automatically computed half distance first simulation target summary statistics warning printed. tab_normalization vector length summary_stat_target. element contains positive number summary statistics must divided computation Euclidean distance simulations data. provided user, simulated summary statistics divided target summary statistics warning printed. proposal_range vector length number model parameters, used method \"Marjoram_original\". element contains positive number defining range MCMC jumps model parameter. provided user, default value used parameter warning printed. default value 1/50 prior range uniform distributions, 1/20 standard deviation prior distribution normal distributions, 1/20 * exp ( sigma * sigma seed_count positive integer, initial seed value provided function model (use_seed=TRUE). value incremented 1 call function model. progress_bar logical, FALSE default. TRUE, ABC_mcmc output bar progression estimated remaining computing time. Option available multiple cores. nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Marjoram_original.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram Original algorithm to a nl object — simdesign_ABCmcmc_Marjoram_original","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Marjoram_original.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram Original algorithm to a nl object — simdesign_ABCmcmc_Marjoram_original","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min, max shape distribution (qunif, qnorm, qlnorm, qexp)(e.g. list(min=1, max=4, qfun=\"qunif\")). function uses EasyABC package set ABC_mcmc function. details ABC_mcmc function parameters see ?EasyABC::ABC_mcmc Finally, function reports simdesign object. Approximate Bayesian Computation simdesigns can executed using run_nl_dyn function instead run_nl_all run_nl_one.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Marjoram_original.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram Original algorithm to a nl object — simdesign_ABCmcmc_Marjoram_original","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_lhs  # Attach the simdesign to the nl object nl@simdesign <- simdesign_ABCmcmc_Marjoram_original(nl = nl,                                                      summary_stat_target = c(100, 80),                                                      n_rec = 100,                                                      n_between_sampling = 10,                                                      nseeds = 1) #> Creating ABC Monte-Carlo Markov-Chain simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Wegmann.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Wegmann algorithm to a nl object — simdesign_ABCmcmc_Wegmann","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Wegmann algorithm to a nl object — simdesign_ABCmcmc_Wegmann","text":"Add Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using Wegmann algorithm nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Wegmann.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Wegmann algorithm to a nl object — simdesign_ABCmcmc_Wegmann","text":"","code":"simdesign_ABCmcmc_Wegmann(   nl,   postpro_function = NULL,   summary_stat_target,   prior_test = NULL,   n_rec,   n_between_sampling = 10,   n_cluster = 1,   use_seed = FALSE,   dist_weights = NULL,   n_calibration = 10000,   tolerance_quantile = 0.01,   proposal_phi = 1,   numcomp = 0,   seed_count = 0,   progress_bar = FALSE,   nseeds )"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Wegmann.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Wegmann algorithm to a nl object — simdesign_ABCmcmc_Wegmann","text":"nl nl object defined experiment postpro_function default NULL. Allows provide function called post-process output Tibble NetLogo simulations. function must accept nl object attached results input argument. function must return one-dimensional vector output metrics corresponds leght order specified summary_stat_target. summary_stat_target vector target values order defined metrics experiment prior_test string expressing constraints model parameters. expression evaluated logical expression, can use logical operators including \"<\", \">\", ... parameter designated \"X1\", \"X2\", ... order prior definition. Set NULL disable. n_rec Number samples along MCMC n_between_sampling positive integer equal desired spacing sampled points along MCMC. n_cluster number cores parallelize simulations. Due design EasyABC parallelization currently possible use feature cores > 1. use_seed TRUE, seeds automatically created new model run dist_weights vector containing weights apply distance computed targeted statistics. weights can used give importance summary statistic example. weights normalized applying . Set NULL disable. n_calibration positive integer. number simulations performed calibration step. Default value 10000. tolerance_quantile positive number 0 1 (strictly). percentage simulations retained calibration step determine tolerance threshold used MCMC. Default value 0.01. proposal_phi positive number. scaling factor defining range MCMC jumps. Default value 1. numcomp positive integer. number components used PLS transformations. Default value 0 encodes number equal number summary statistics. seed_count positive integer, initial seed value provided function model (use_seed=TRUE). value incremented 1 call function model. progress_bar logical, FALSE default. TRUE, ABC_mcmc output bar progression estimated remaining computing time. Option available multiple cores. nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Wegmann.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Wegmann algorithm to a nl object — simdesign_ABCmcmc_Wegmann","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Wegmann.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Wegmann algorithm to a nl object — simdesign_ABCmcmc_Wegmann","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min, max shape distribution (qunif, qnorm, qlnorm, qexp)(e.g. list(min=1, max=4, qfun=\"qunif\")). function uses EasyABC package set ABC_mcmc function. details ABC_mcmc function parameters see ?EasyABC::ABC_mcmc Finally, function reports simdesign object. Approximate Bayesian Computation simdesigns can executed using run_nl_dyn function instead run_nl_all run_nl_one.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_Wegmann.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Wegmann algorithm to a nl object — simdesign_ABCmcmc_Wegmann","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_lhs  # Attach the simdesign to the nl object nl@simdesign <- simdesign_ABCmcmc_Wegmann(nl = nl,                                             summary_stat_target = c(100, 80),                                             n_rec = 100,                                             n_between_sampling = 10,                                             n_cluster = 1,                                             use_seed = FALSE,                                             n_calibration = 10000,                                             tolerance_quantile = 0.01,                                             proposal_phi = 1,                                             progress_bar = FALSE,                                             nseeds = 1) #> Creating ABC Monte-Carlo Markov-Chain simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_marjoram.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram algorithm to a nl object — simdesign_ABCmcmc_Marjoram","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram algorithm to a nl object — simdesign_ABCmcmc_Marjoram","text":"Add Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using Majoram algorithm nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_marjoram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram algorithm to a nl object — simdesign_ABCmcmc_Marjoram","text":"","code":"simdesign_ABCmcmc_Marjoram(   nl,   postpro_function = NULL,   summary_stat_target,   prior_test = NULL,   n_rec,   n_between_sampling = 10,   n_cluster = 1,   use_seed = FALSE,   dist_weights = NULL,   n_calibration = 10000,   tolerance_quantile = 0.01,   proposal_phi = 1,   seed_count = 0,   progress_bar = FALSE,   nseeds )"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_marjoram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram algorithm to a nl object — simdesign_ABCmcmc_Marjoram","text":"nl nl object defined experiment postpro_function default NULL. Allows provide function called post-process output Tibble NetLogo simulations. function must accept nl object attached results input argument. function must return one-dimensional vector output metrics corresponds length order specified summary_stat_target. summary_stat_target vector target values order defined metrics experiment prior_test string expressing constraints model parameters. expression evaluated logical expression, can use logical operators including \"<\", \">\", ... parameter designated \"X1\", \"X2\", ... order prior definition. Set NULL disable. n_rec Number samples along MCMC n_between_sampling positive integer equal desired spacing sampled points along MCMC. n_cluster number cores parallelize simulations. Due design EasyABC parallelization currently possible use feature cores > 1. use_seed TRUE, seeds automatically created new model run dist_weights vector containing weights apply distance computed targeted statistics. weights can used give importance summary statistic example. weights normalized applying . Set NULL disable. n_calibration positive integer. number simulations performed calibration step. Default value 10000. tolerance_quantile positive number 0 1 (strictly). percentage simulations retained calibration step determine tolerance threshold used MCMC. Default value 0.01. proposal_phi positive number. scaling factor defining range MCMC jumps. Default value 1. seed_count positive integer, initial seed value provided function model (use_seed=TRUE). value incremented 1 call function model. progress_bar logical, FALSE default. TRUE, ABC_mcmc output bar progression estimated remaining computing time. Option available multiple cores. nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_marjoram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram algorithm to a nl object — simdesign_ABCmcmc_Marjoram","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_marjoram.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram algorithm to a nl object — simdesign_ABCmcmc_Marjoram","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min, max shape distribution (qunif, qnorm, qlnorm, qexp)(e.g. list(min=1, max=4, qfun=\"qunif\")). function uses EasyABC package set ABC_mcmc function. details ABC_mcmc function parameters see ?EasyABC::ABC_mcmc Finally, function reports simdesign object. Approximate Bayesian Computation simdesigns can executed using run_nl_dyn function instead run_nl_all run_nl_one.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ABCmcmc_marjoram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an Approximate Bayesian Computation (Monte-Carlo Markov-Chain) simdesign using the Majoram algorithm to a nl object — simdesign_ABCmcmc_Marjoram","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_lhs  # Attach the simdesign to the nl object nl@simdesign <- simdesign_ABCmcmc_Marjoram(nl = nl,                                             summary_stat_target = c(100, 80),                                             n_rec = 100,                                             n_between_sampling = 10,                                             n_cluster = 1,                                             use_seed = FALSE,                                             n_calibration = 10000,                                             tolerance_quantile = 0.01,                                             proposal_phi = 1,                                             progress_bar = FALSE,                                             nseeds = 1) #> Creating ABC Monte-Carlo Markov-Chain simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenAlg.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Genetic Algorithm simdesign to a nl object — simdesign_GenAlg","title":"Add a Genetic Algorithm simdesign to a nl object — simdesign_GenAlg","text":"Add Genetic Algorithm simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenAlg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Genetic Algorithm simdesign to a nl object — simdesign_GenAlg","text":"","code":"simdesign_GenAlg(   nl,   popSize = 200,   iters = 100,   evalcrit = 1,   elitism = NA,   mutationChance = NA,   nseeds = 1 )"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenAlg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Genetic Algorithm simdesign to a nl object — simdesign_GenAlg","text":"nl nl object defined experiment popSize population Size parameter genetic algorithm iters number iterations genetic algorithm function evalcrit position evaluation criterion within defined NetLogo metrics nl experiment function reports single numeric value elitism elitism rate genetic algorithm function mutationChance mutation rate genetic algorithm function nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenAlg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Genetic Algorithm simdesign to a nl object — simdesign_GenAlg","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenAlg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a Genetic Algorithm simdesign to a nl object — simdesign_GenAlg","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min max (e.g. list(min=1, max=4)). GenAlg simdesign generates Genetic Algorithm experiment within defined min max parameter boundaries defined variables field experiment object within nl object. evalcrit reporter defines evaluation criterion Genetic algorithm procedure. two options evaluate fitness value iteration algorithm: Use reporter defined within experiment metrics vector. can just enter position metric within experiment metrics vector (e.g. 1 use first defined metric experiment evaluate iteration). algorithm automatically calculates mean value reporter evalticks defined measure multiple ticks simulation. Use self-defined evaluation function can define function post-processes NetLogo output calculate evaluation value. function must accept nl object input return one single numeric value. nl object provided evaluation function results current iteration attached. results can accessed via simoutput slot simdesign. can pass function evalcrit. applied output iteration. function uses genalg package set Genetic Algorithm function. details genalg function parameters see ?genalg::rbga Finally, function reports simdesign object. Genetic Algorithm simdesigns can executed using run_nl_dyn function instead run_nl_all run_nl_one.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenAlg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Genetic Algorithm simdesign to a nl object — simdesign_GenAlg","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_lhs  # Example 1: Using a metric from the experiment metrics vector for evaluation: nl@simdesign <- simdesign_GenAlg(nl=nl,                                   evalcrit=1,                                   nseeds=1) #> Creating GenAlg simulation design  # Example 2: Using a self-defined evaluation function # For demonstration we define a simple function that calculates # the maximum value of count sheep output. critfun <- function(nl) { results <- nl@simdesign@simoutput crit <- as.integer(max(results$`count sheep`)) return(crit) }  nl@simdesign <- simdesign_GenAlg(nl=nl,                                   evalcrit=critfun,                                   nseeds=1) #> Creating GenAlg simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a Simulated Annealing simdesign to a nl object — simdesign_GenSA","title":"Add a Simulated Annealing simdesign to a nl object — simdesign_GenSA","text":"Add Simulated Annealing simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a Simulated Annealing simdesign to a nl object — simdesign_GenSA","text":"","code":"simdesign_GenSA(nl, par = NULL, evalcrit = 1, control = list(), nseeds = 1)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a Simulated Annealing simdesign to a nl object — simdesign_GenSA","text":"nl nl object defined experiment par optional vector start values parameter defined variables experiment evalcrit position evaluation criterion within defined NetLogo metrics nl experiment function reports single numeric value control list arguments passed GenSA function (see ?GenSA details) nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenSA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a Simulated Annealing simdesign to a nl object — simdesign_GenSA","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenSA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a Simulated Annealing simdesign to a nl object — simdesign_GenSA","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min max (e.g. list(min=1, max=4)). GenSA simdesign generates simulated Annealing experiment within defined min max parameter boundaries defined variables field experiment object within nl object. evalcrit reporter defines evaluation criterion simulated annealing procedure. two options evaluate fitness value iteration algorithm: Use reporter defined within experiment metrics vector. can just enter position metric within experiment metrics vector (e.g. 1 use first defined metric experiment evaluate iteration). algorithm automatically calculates mean value reporter evalticks defined measure multiple ticks simulation. can define function post-processes NetLogo output calculate evaluation value. function must accept nl object input return one single numeric value. nl object provided evaluation function results current iteration attached. results can accessed via simoutput slot simdesign. can pass function evalcrit. applied output iteration. function uses GenSA package set Simulated Annealing function. details GenSA function parameters see ?GenSA Finally, function reports simdesign object. Simulated Annealing simdesigns can executed using run_nl_dyn function instead run_nl_all run_nl_one.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_GenSA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a Simulated Annealing simdesign to a nl object — simdesign_GenSA","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_lhs  # Example 1: Using a metric from the experiment metrics vector for evaluation: nl@simdesign <- simdesign_GenSA(nl=nl,                                  par=NULL,                                  evalcrit=1,                                  control=list(max.time = 600),                                  nseeds=1) #> Creating GenSA simulation design   # Example 2: Using a self-defined evaluation function # For demonstration we define a simple function that calculates # the maximum value of count sheep output. critfun <- function(nl) { results <- nl@simdesign@simoutput crit <- as.integer(max(results$`count sheep`)) return(crit) }  nl@simdesign <- simdesign_GenSA(nl=nl,                                  par=NULL,                                  evalcrit=critfun,                                  control=list(max.time = 600),                                  nseeds=1) #> Creating GenSA simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a distinct simdesign to a nl object — simdesign_distinct","title":"Add a distinct simdesign to a nl object — simdesign_distinct","text":"Add distinct simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a distinct simdesign to a nl object — simdesign_distinct","text":"","code":"simdesign_distinct(nl, nseeds)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a distinct simdesign to a nl object — simdesign_distinct","text":"nl nl object defined experiment nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_distinct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a distinct simdesign to a nl object — simdesign_distinct","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_distinct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a distinct simdesign to a nl object — simdesign_distinct","text":"function creates simdesign S4 class can added nl object. distinct simdesign allows create parameter matrix distinct parameterisations. Variables experiment variable list need provide vector distinct values (e.g. list(values=c(1,2,3,4)). vectors values must length across variables. distinct simdesign creates one simulation run first elements values vectors, one run second items, . function, multiple distinct simulations can run . Finally, function reports simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_distinct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a distinct simdesign to a nl object — simdesign_distinct","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_distinct nl@simdesign <- simdesign_distinct(nl = nl, nseeds = 3) #> Creating distinct simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_eFast.html","id":null,"dir":"Reference","previous_headings":"","what":"Add an eFast simdesign to a nl object — simdesign_eFast","title":"Add an eFast simdesign to a nl object — simdesign_eFast","text":"Add eFast simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_eFast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add an eFast simdesign to a nl object — simdesign_eFast","text":"","code":"simdesign_eFast(nl, samples, nseeds)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_eFast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add an eFast simdesign to a nl object — simdesign_eFast","text":"nl nl object defined experiment samples number samples eFast sensitivity analysis nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_eFast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add an eFast simdesign to a nl object — simdesign_eFast","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_eFast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add an eFast simdesign to a nl object — simdesign_eFast","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min, max qfun (e.g. list(min=1, max=4, qfun=\"qunif\")). eFast simdesign uses sensitivity package set fast99 elementary effects sensitivity analysis, including simobject class fast99 input tibble simulations. details method specific sensitivity analysis function parameters see ?fast99 Finally, function reports simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_eFast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add an eFast simdesign to a nl object — simdesign_eFast","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_eFast nl@simdesign <- simdesign_eFast(nl=nl,                                  samples=100,                                  nseeds=1) #> Creating eFast simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ff.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a full-factorial simdesign to a nl object — simdesign_ff","title":"Add a full-factorial simdesign to a nl object — simdesign_ff","text":"Add full-factorial simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a full-factorial simdesign to a nl object — simdesign_ff","text":"","code":"simdesign_ff(nl, nseeds)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a full-factorial simdesign to a nl object — simdesign_ff","text":"nl nl object defined experiment nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ff.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a full-factorial simdesign to a nl object — simdesign_ff","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a full-factorial simdesign to a nl object — simdesign_ff","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide vector distinct values (e.g. list(values=c(1,2,3,4)). sequence definition min, max step (e.g. list=(min=1, max=4, step=1)). (values sequence) defined, full-factorial design gives priority values. full-factorial simdesign uses defined parameter ranges within nl object. full-factorial matrix parameter combinations created input tibble simdesign. Finally, function reports simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_ff.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a full-factorial simdesign to a nl object — simdesign_ff","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_ff nl@simdesign <- simdesign_ff(nl = nl, nseeds = 3) #> Creating full factorial simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_lhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a latin-hypercube simdesign to a nl object — simdesign_lhs","title":"Add a latin-hypercube simdesign to a nl object — simdesign_lhs","text":"Add latin-hypercube simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_lhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a latin-hypercube simdesign to a nl object — simdesign_lhs","text":"","code":"simdesign_lhs(nl, samples, nseeds, precision)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_lhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a latin-hypercube simdesign to a nl object — simdesign_lhs","text":"nl nl object defined experiment samples number samples latin hypercube nseeds number seeds simulation design precision number digits decimal fraction parameter values","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_lhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a latin-hypercube simdesign to a nl object — simdesign_lhs","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_lhs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a latin-hypercube simdesign to a nl object — simdesign_lhs","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min, max qfun (e.g. list(min=1, max=4, qfun=\"qunif\")). latin hypercube simdesign creates parameter matrix based defined distributions. Finally, function reports simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_lhs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a latin-hypercube simdesign to a nl object — simdesign_lhs","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_lhs nl@simdesign <- simdesign_lhs(nl=nl,                                samples=100,                                nseeds=3,                                precision=3) #> Creating latin hypercube simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_morris.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a morris elementary effects simdesign to a nl object — simdesign_morris","title":"Add a morris elementary effects simdesign to a nl object — simdesign_morris","text":"Add morris elementary effects simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_morris.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a morris elementary effects simdesign to a nl object — simdesign_morris","text":"","code":"simdesign_morris(nl, morristype, morrislevels, morrisr, morrisgridjump, nseeds)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_morris.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a morris elementary effects simdesign to a nl object — simdesign_morris","text":"nl nl object defined experiment morristype morris design type morrislevels number parameter levels morrisr morris r value morrisgridjump morris grid jump value nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_morris.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a morris elementary effects simdesign to a nl object — simdesign_morris","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_morris.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a morris elementary effects simdesign to a nl object — simdesign_morris","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min, max qfun (e.g. list(min=1, max=4, qfun=\"qunif\")). morris simdesign uses sensitivity package set morris elementary effects sensitivity analysis, including simobject class morris input tibble simulations. details method specific sensitivity analysis function parameters see ?morris Finally, function reports simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_morris.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a morris elementary effects simdesign to a nl object — simdesign_morris","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_morris nl@simdesign <- simdesign_morris(nl=nl,                                   morristype=\"oat\",                                   morrislevels=4,                                   morrisr=20,                                   morrisgridjump=2,                                   nseeds=3) #> Creating morris simulation design #> Warning: keeping 13 repetitions out of 20"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_simple.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a simple simdesign to a nl object — simdesign_simple","title":"Add a simple simdesign to a nl object — simdesign_simple","text":"Add simple simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_simple.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a simple simdesign to a nl object — simdesign_simple","text":"","code":"simdesign_simple(nl, nseeds)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_simple.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a simple simdesign to a nl object — simdesign_simple","text":"nl nl object defined experiment nseeds number seeds simulation design","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_simple.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a simple simdesign to a nl object — simdesign_simple","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_simple.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a simple simdesign to a nl object — simdesign_simple","text":"function creates simdesign S4 class can added nl object. simple simdesign uses model parameters defined constants field experiment object within nl object. Thus, resulting input tibble simdesign one run constant parameterisations. can useful run one simulation specific parameterset. Finally, function reports simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_simple.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a simple simdesign to a nl object — simdesign_simple","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_simple nl@simdesign <- simdesign_simple(nl = nl, nseeds = 3) #> Creating simple simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a sobol simdesign to a nl object — simdesign_sobol","title":"Add a sobol simdesign to a nl object — simdesign_sobol","text":"Add sobol simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a sobol simdesign to a nl object — simdesign_sobol","text":"","code":"simdesign_sobol(   nl,   samples,   sobolorder,   sobolnboot,   sobolconf,   nseeds,   precision )"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a sobol simdesign to a nl object — simdesign_sobol","text":"nl nl object defined experiment samples number samples sobol sensitivity analysis sobolorder order interactions sobol sensitivity analysis sobolnboot number bootstrap replicates sobol sensitivity analysis sobolconf confidence level bootstrap confidence intervals nseeds number seeds simulation design precision number digits decimal fraction parameter values","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a sobol simdesign to a nl object — simdesign_sobol","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a sobol simdesign to a nl object — simdesign_sobol","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min, max qfun (e.g. list(min=1, max=4, qfun=\"qunif\")). sobol simdesign uses sensitivity package set sobol sensitivity analysis, including simobject class sobol input tibble simulations. details method specific sensitivity analysis function parameters see ?sobol Finally, function reports simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a sobol simdesign to a nl object — simdesign_sobol","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_sobol nl@simdesign <- simdesign_sobol(nl=nl, samples=1000, sobolorder=2, sobolnboot=100, sobolconf=0.95, nseeds=3, precision=3) #> Creating sobol simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol2007.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a sobol2007 simdesign to a nl object — simdesign_sobol2007","title":"Add a sobol2007 simdesign to a nl object — simdesign_sobol2007","text":"Add sobol2007 simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol2007.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a sobol2007 simdesign to a nl object — simdesign_sobol2007","text":"","code":"simdesign_sobol2007(nl, samples, sobolnboot, sobolconf, nseeds, precision)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol2007.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a sobol2007 simdesign to a nl object — simdesign_sobol2007","text":"nl nl object defined experiment samples number samples sobol sensitivity analysis sobolnboot number bootstrap replicates sobol sensitivity analysis sobolconf confidence level bootstrap confidence intervals nseeds number seeds simulation design precision number digits decimal fraction parameter values","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol2007.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a sobol2007 simdesign to a nl object — simdesign_sobol2007","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol2007.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a sobol2007 simdesign to a nl object — simdesign_sobol2007","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min, max qfun (e.g. list(min=1, max=4, qfun=\"qunif\")). sobol2007 simdesign uses sensitivity package set sobol2007 sensitivity analysis, including simobject class sobol input tibble simulations. details method specific sensitivity analysis function parameters see ?sobol2007 Finally, function reports simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_sobol2007.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a sobol2007 simdesign to a nl object — simdesign_sobol2007","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_sobol2007 nl@simdesign <- simdesign_sobol2007(nl=nl, samples=1000, sobolnboot=100, sobolconf=0.95, nseeds=3, precision=3) #> Creating sobol2007 simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_soboljansen.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a soboljansen simdesign to a nl object — simdesign_soboljansen","title":"Add a soboljansen simdesign to a nl object — simdesign_soboljansen","text":"Add soboljansen simdesign nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_soboljansen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a soboljansen simdesign to a nl object — simdesign_soboljansen","text":"","code":"simdesign_soboljansen(nl, samples, sobolnboot, sobolconf, nseeds, precision)"},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_soboljansen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a soboljansen simdesign to a nl object — simdesign_soboljansen","text":"nl nl object defined experiment samples number samples sobol sensitivity analysis sobolnboot number bootstrap replicates sobol sensitivity analysis sobolconf confidence level bootstrap confidence intervals nseeds number seeds simulation design precision number digits decimal fraction parameter values","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_soboljansen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a soboljansen simdesign to a nl object — simdesign_soboljansen","text":"simdesign S4 class object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_soboljansen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add a soboljansen simdesign to a nl object — simdesign_soboljansen","text":"function creates simdesign S4 class can added nl object. Variables experiment variable list need provide numeric distribution min, max qfun (e.g. list(min=1, max=4, qfun=\"qunif\")). soboljansen simdesign uses sensitivity package set soboljansen sensitivity analysis, including simobject class sobol input tibble simulations. details method specific sensitivity analysis function parameters see ?soboljansen Finally, function reports simdesign object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/simdesign_soboljansen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a soboljansen simdesign to a nl object — simdesign_soboljansen","text":"","code":"# To attach a simdesign, a nl object needs to be created first (see ?nl). # For this example, we load a nl object from test data.  nl <- nl_soboljansen nl@simdesign <- simdesign_soboljansen(nl=nl, samples=1000, sobolnboot=100, sobolconf=0.95, nseeds=3, precision=3) #> Creating soboljansen simulation design"},{"path":"https://docs.ropensci.org/nlrx/reference/supported_netlogo_versions.html","id":null,"dir":"Reference","previous_headings":"","what":"Report supported NetLogo versions — supported_netlogo_versions","title":"Report supported NetLogo versions — supported_netlogo_versions","text":"Auxiliary function report supported NetLogo version numbers","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/supported_netlogo_versions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report supported NetLogo versions — supported_netlogo_versions","text":"","code":"supported_netlogo_versions()"},{"path":"https://docs.ropensci.org/nlrx/reference/supported_netlogo_versions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report supported NetLogo versions — supported_netlogo_versions","text":"vector supported Versions Download Usage (parameter version):","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/supported_netlogo_versions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report supported NetLogo versions — supported_netlogo_versions","text":"","code":"if (FALSE) { supported_netlogo_versions() }"},{"path":"https://docs.ropensci.org/nlrx/reference/test_nlrx.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if nlrx runs on the local system — test_nlrx","title":"Test if nlrx runs on the local system — test_nlrx","text":"Runs short test nlrx runs local system","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/test_nlrx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if nlrx runs on the local system — test_nlrx","text":"","code":"test_nlrx(nlpath, nlversion)"},{"path":"https://docs.ropensci.org/nlrx/reference/test_nlrx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if nlrx runs on the local system — test_nlrx","text":"nlpath Provide path netlogo folder nlversion Matching version string provided NetLogo folder (e.g. \"6.1.1\")","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/test_nlrx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if nlrx runs on the local system — test_nlrx","text":"Runs short test nlrx runs local system. Reports TRUE successful!","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/test_nlrx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if nlrx runs on the local system — test_nlrx","text":"","code":"if (FALSE) { test_nlrx(nlpath=\"/Users/xyz/netlogo/NetLogo 6.1.1\", nlversion=\"6.1.1\") }"},{"path":"https://docs.ropensci.org/nlrx/reference/unnest_simoutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Get spatial data from metrics.turtles and metrics.patches output — unnest_simoutput","title":"Get spatial data from metrics.turtles and metrics.patches output — unnest_simoutput","text":"Turn results NetLogo spatial data objects","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/unnest_simoutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get spatial data from metrics.turtles and metrics.patches output — unnest_simoutput","text":"","code":"unnest_simoutput(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/unnest_simoutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get spatial data from metrics.turtles and metrics.patches output — unnest_simoutput","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/unnest_simoutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get spatial data from metrics.turtles and metrics.patches output — unnest_simoutput","text":"tibble spatial data objects","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/unnest_simoutput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get spatial data from metrics.turtles and metrics.patches output — unnest_simoutput","text":"Unnests output run_nl long format.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/unnest_simoutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get spatial data from metrics.turtles and metrics.patches output — unnest_simoutput","text":"","code":"# To unnest data a nl object containing spatial output data is needed. # For this example, we load a nl object from test data.  nl <- nl_spatial unnest_simoutput(nl) #> # A tibble: 30,370 × 21 #>    `[run number]` `model-version`  `initial-number-sheep` initial-number-wolve…¹ #>             <dbl> <chr>                             <dbl>                  <dbl> #>  1              1 sheep-wolves-gr…                    100                     50 #>  2              1 sheep-wolves-gr…                    100                     50 #>  3              1 sheep-wolves-gr…                    100                     50 #>  4              1 sheep-wolves-gr…                    100                     50 #>  5              1 sheep-wolves-gr…                    100                     50 #>  6              1 sheep-wolves-gr…                    100                     50 #>  7              1 sheep-wolves-gr…                    100                     50 #>  8              1 sheep-wolves-gr…                    100                     50 #>  9              1 sheep-wolves-gr…                    100                     50 #> 10              1 sheep-wolves-gr…                    100                     50 #> # ℹ 30,360 more rows #> # ℹ abbreviated name: ¹​`initial-number-wolves` #> # ℹ 17 more variables: `grass-regrowth-time` <dbl>, #> #   `sheep-gain-from-food` <dbl>, `wolf-gain-from-food` <dbl>, #> #   `sheep-reproduce` <dbl>, `wolf-reproduce` <dbl>, `show-energy?` <lgl>, #> #   `random-seed` <dbl>, `[step]` <dbl>, `count sheep` <dbl>, #> #   `count wolves` <dbl>, breed <chr>, who <dbl>, pxcor <dbl>, pycor <dbl>, …"},{"path":"https://docs.ropensci.org/nlrx/reference/util_call_nl.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup and execute NetLogo via command line — util_call_nl","title":"Setup and execute NetLogo via command line — util_call_nl","text":"Setup execute NetLogo via command line","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_call_nl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup and execute NetLogo via command line — util_call_nl","text":"","code":"util_call_nl(nl, xmlfile, outfile, batchfile)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_call_nl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup and execute NetLogo via command line — util_call_nl","text":"nl nl object xmlfile file location experiment xml file outfile file location output results batchfile file location system specific batch file call NetLogo via command line","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_cleanup.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete temporary files — util_cleanup","title":"Delete temporary files — util_cleanup","text":"Delete temporary files","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_cleanup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete temporary files — util_cleanup","text":"","code":"util_cleanup(   nl,   cleanup.csv = TRUE,   cleanup.xml = TRUE,   cleanup.bat = TRUE,   cleanup.files )"},{"path":"https://docs.ropensci.org/nlrx/reference/util_cleanup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete temporary files — util_cleanup","text":"nl nl object cleanup.csv TRUE/FALSE, TRUE temporary created csv output files deleted gathering results. cleanup.xml TRUE/FALSE, TRUE temporary created xml output files deleted gathering results. cleanup.bat TRUE/FALSE, TRUE temporary created bat/sh output files deleted gathering results. cleanup.files vector paths temporary created files (csv, xml, bat)","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_create_agentset_reporter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create turtle/patches/links owns reporter — util_create_agentset_reporter","title":"Create turtle/patches/links owns reporter — util_create_agentset_reporter","text":"reporter used measure agent variables NetLogo parse readable format","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_create_agentset_reporter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create turtle/patches/links owns reporter — util_create_agentset_reporter","text":"","code":"util_create_agentset_reporter(metrics, breed)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_create_agentset_reporter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create turtle/patches/links owns reporter — util_create_agentset_reporter","text":"metrics character vector, names variables measure breed character, corresponding breed/agentset (e.g. \"turtles\", \"patches\", \"links\", \"wolves\", ...)","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_create_lhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and report the current OS — util_create_lhs","title":"Identify and report the current OS — util_create_lhs","text":"Identify report current OS","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_create_lhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and report the current OS — util_create_lhs","text":"","code":"util_create_lhs(input, samples, precision)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_create_lhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify and report the current OS — util_create_lhs","text":"input list variables value ranges samples number lhs samples precision number digits decimal fraction parameter values","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_create_sim_XML.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a temporary behavior space xml file to setup NetLogo via command line — util_create_sim_XML","title":"Create a temporary behavior space xml file to setup NetLogo via command line — util_create_sim_XML","text":"Create temporary behavior space xml file setup NetLogo via command line","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_create_sim_XML.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a temporary behavior space xml file to setup NetLogo via command line — util_create_sim_XML","text":"","code":"util_create_sim_XML(nl, seed, siminputrow, xmlfile)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_create_sim_XML.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a temporary behavior space xml file to setup NetLogo via command line — util_create_sim_XML","text":"nl nl object seed random-seed NetLogo simulation siminputrow row id simulation input tibble simdesign within provided nl object xmlfile filepath xml file stored","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate if constants list of an experiment object is empty — util_eval_constants","title":"Evaluate if constants list of an experiment object is empty — util_eval_constants","text":"Evaluate constants list experiment object empty","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate if constants list of an experiment object is empty — util_eval_constants","text":"","code":"util_eval_constants(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate if constants list of an experiment object is empty — util_eval_constants","text":"nl nl object util_eval_constants checks constants list experiment within nl object empty. reports error message constants defined. evaluation done simdesign_simple.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate all slots of an experiment object — util_eval_experiment","title":"Evaluate all slots of an experiment object — util_eval_experiment","text":"Evaluate slots experiment object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate all slots of an experiment object — util_eval_experiment","text":"","code":"util_eval_experiment(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate all slots of an experiment object — util_eval_experiment","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_experiment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate all slots of an experiment object — util_eval_experiment","text":"util_eval_experiment checks information stored within experiment slots valid.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_simdesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate all slots of a simdesign object — util_eval_simdesign","title":"Evaluate all slots of a simdesign object — util_eval_simdesign","text":"Evaluate slots simdesign object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_simdesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate all slots of a simdesign object — util_eval_simdesign","text":"","code":"util_eval_simdesign(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_simdesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate all slots of a simdesign object — util_eval_simdesign","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_simdesign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate all slots of a simdesign object — util_eval_simdesign","text":"util_eval_simdesign checks information stored within simdesign slots valid.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate if variables list of an experiment object is empty — util_eval_variables","title":"Evaluate if variables list of an experiment object is empty — util_eval_variables","text":"Evaluate variables list experiment object empty","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate if variables list of an experiment object is empty — util_eval_variables","text":"","code":"util_eval_variables(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate if variables list of an experiment object is empty — util_eval_variables","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate if variables list of an experiment object is empty — util_eval_variables","text":"util_eval_variables checks variables list experiment within nl object empty. reports error message variables defined.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_distinct.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate variables list of an experiment object for distinct simdesign — util_eval_variables_distinct","title":"Evaluate variables list of an experiment object for distinct simdesign — util_eval_variables_distinct","text":"Evaluate variables list experiment object distinct simdesign","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_distinct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate variables list of an experiment object for distinct simdesign — util_eval_variables_distinct","text":"","code":"util_eval_variables_distinct(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_distinct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate variables list of an experiment object for distinct simdesign — util_eval_variables_distinct","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_distinct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate variables list of an experiment object for distinct simdesign — util_eval_variables_distinct","text":"util_eval_variables_distinct checks variables list experiment within nl object enough information create simdesign_distinct. reports error message least one variable vector distinct values mismatch length values vectors.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_ff.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate variables list of an experiment object for full-factorial simdesign — util_eval_variables_ff","title":"Evaluate variables list of an experiment object for full-factorial simdesign — util_eval_variables_ff","text":"Evaluate variables list experiment object full-factorial simdesign","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_ff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate variables list of an experiment object for full-factorial simdesign — util_eval_variables_ff","text":"","code":"util_eval_variables_ff(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_ff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate variables list of an experiment object for full-factorial simdesign — util_eval_variables_ff","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_ff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate variables list of an experiment object for full-factorial simdesign — util_eval_variables_ff","text":"util_eval_variables_ff checks variables list experiment within nl object enough information create simdesign_ff. reports error message least one variable defined sequence (min, max, step) vector distinct values.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_op.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate variables list of an experiment object for optimization simdesigns — util_eval_variables_op","title":"Evaluate variables list of an experiment object for optimization simdesigns — util_eval_variables_op","text":"Evaluate variables list experiment object optimization simdesigns","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_op.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate variables list of an experiment object for optimization simdesigns — util_eval_variables_op","text":"","code":"util_eval_variables_op(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_op.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate variables list of an experiment object for optimization simdesigns — util_eval_variables_op","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_op.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate variables list of an experiment object for optimization simdesigns — util_eval_variables_op","text":"util_eval_variables_op checks variables list experiment within nl object enough information create optimization simdesign. reports error message least one variable defined range (min, max).","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_sa.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate variables list of an experiment object for sensitivity analysis simdesigns — util_eval_variables_sa","title":"Evaluate variables list of an experiment object for sensitivity analysis simdesigns — util_eval_variables_sa","text":"Evaluate variables list experiment object sensitivity analysis simdesigns","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_sa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate variables list of an experiment object for sensitivity analysis simdesigns — util_eval_variables_sa","text":"","code":"util_eval_variables_sa(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_sa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate variables list of an experiment object for sensitivity analysis simdesigns — util_eval_variables_sa","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_eval_variables_sa.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Evaluate variables list of an experiment object for sensitivity analysis simdesigns — util_eval_variables_sa","text":"util_eval_variables_sa checks variables list experiment within nl object enough information create sensitivity analysis simdesign. reports error message least one variable defined distribution (min, max, qfun).","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_gather_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Load output file from simulations — util_gather_results","title":"Load output file from simulations — util_gather_results","text":"Load output file simulations","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_gather_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load output file from simulations — util_gather_results","text":"","code":"util_gather_results(nl, outfile, seed, siminputrow)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_gather_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load output file from simulations — util_gather_results","text":"nl nl object outfile file location output results seed model random-seed siminputrow current row siminput tibble","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_generate_seeds.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a vector of random seeds — util_generate_seeds","title":"Generate a vector of random seeds — util_generate_seeds","text":"Generate vector random seeds","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_generate_seeds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a vector of random seeds — util_generate_seeds","text":"","code":"util_generate_seeds(nseeds)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_generate_seeds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a vector of random seeds — util_generate_seeds","text":"nseeds desired length random seeds vector","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_get_os.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify and report the current OS — util_get_os","title":"Identify and report the current OS — util_get_os","text":"Identify report current OS","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_get_os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify and report the current OS — util_get_os","text":"","code":"util_get_os()"},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.experiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Print experiment object content — util_print.experiment","title":"Print experiment object content — util_print.experiment","text":"Print experiment object content","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.experiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print experiment object content — util_print.experiment","text":"","code":"util_print.experiment(x, ...)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.experiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print experiment object content — util_print.experiment","text":"x experiment object ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.experiment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print experiment object content — util_print.experiment","text":"Print content experiment object nice formatted overview console","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.nl.html","id":null,"dir":"Reference","previous_headings":"","what":"Print nl object content — util_print.nl","title":"Print nl object content — util_print.nl","text":"Print nl object content","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.nl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print nl object content — util_print.nl","text":"","code":"util_print.nl(x, ...)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.nl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print nl object content — util_print.nl","text":"x nl object ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.nl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print nl object content — util_print.nl","text":"Print content nl object nice formatted overview console","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.simdesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Print simdesign object content — util_print.simdesign","title":"Print simdesign object content — util_print.simdesign","text":"Print simdesign object content","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.simdesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print simdesign object content — util_print.simdesign","text":"","code":"util_print.simdesign(x, ...)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.simdesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print simdesign object content — util_print.simdesign","text":"x simdesign object ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.simdesign.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print simdesign object content — util_print.simdesign","text":"Print content simdesign object nice formatted overview console","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print nl object summary — util_print.summary","title":"Print nl object summary — util_print.summary","text":"Print nl object summary","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print nl object summary — util_print.summary","text":"","code":"util_print.summary(x, ...)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print nl object summary — util_print.summary","text":"x nl object ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_print.summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Print nl object summary — util_print.summary","text":"Print summary nl object embedded experiment simdesign objects nice formatted overview console","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_read_write_batch.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a modified batchfile that executes NetLogo — util_read_write_batch","title":"Write a modified batchfile that executes NetLogo — util_read_write_batch","text":"Write modified batchfile executes NetLogo","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_read_write_batch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a modified batchfile that executes NetLogo — util_read_write_batch","text":"","code":"util_read_write_batch(nl)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_read_write_batch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a modified batchfile that executes NetLogo — util_read_write_batch","text":"nl nl object","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_ABCmcmc.html","id":null,"dir":"Reference","previous_headings":"","what":"ABCmcmc call simulations function — util_run_nl_dyn_ABCmcmc","title":"ABCmcmc call simulations function — util_run_nl_dyn_ABCmcmc","text":"ABCmcmc call simulations function","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_ABCmcmc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ABCmcmc call simulations function — util_run_nl_dyn_ABCmcmc","text":"","code":"util_run_nl_dyn_ABCmcmc(   nl,   seed,   cleanup.csv = TRUE,   cleanup.xml = TRUE,   cleanup.bat = TRUE )"},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_ABCmcmc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ABCmcmc call simulations function — util_run_nl_dyn_ABCmcmc","text":"nl nl object seed current model seed cleanup.csv TRUE/FALSE, TRUE temporary created csv output files deleted gathering results. cleanup.xml TRUE/FALSE, TRUE temporary created xml output files deleted gathering results. cleanup.bat TRUE/FALSE, TRUE temporary created bat/sh output files deleted gathering results.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenAlg.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic Algorithm call simulations function — util_run_nl_dyn_GenAlg","title":"Genetic Algorithm call simulations function — util_run_nl_dyn_GenAlg","text":"Genetic Algorithm call simulations function","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenAlg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genetic Algorithm call simulations function — util_run_nl_dyn_GenAlg","text":"","code":"util_run_nl_dyn_GenAlg(nl, seed, cleanup.csv, cleanup.xml, cleanup.bat)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenAlg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genetic Algorithm call simulations function — util_run_nl_dyn_GenAlg","text":"nl nl object seed current model seed cleanup.csv TRUE/FALSE, TRUE temporary created csv output files deleted gathering results. cleanup.xml TRUE/FALSE, TRUE temporary created xml output files deleted gathering results. cleanup.bat TRUE/FALSE, TRUE temporary created bat/sh output files deleted gathering results.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenAlg_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Genetic Algorithm run simulation function — util_run_nl_dyn_GenAlg_fn","title":"Genetic Algorithm run simulation function — util_run_nl_dyn_GenAlg_fn","text":"Genetic Algorithm run simulation function Genetic Algorithm run simulation function","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenAlg_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Genetic Algorithm run simulation function — util_run_nl_dyn_GenAlg_fn","text":"","code":"util_run_nl_dyn_GenAlg_fn(   param,   nl,   evalcrit,   seed,   cleanup.csv,   cleanup.xml,   cleanup.bat )  util_run_nl_dyn_ABCmcmc_fn(param)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenAlg_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Genetic Algorithm run simulation function — util_run_nl_dyn_GenAlg_fn","text":"param vector model parameters passed ABC_mcmc function. use_seeds = TRUE, first element vector random seed nl nl object evalcrit evaluation criterion simulated annealing seed current model seed cleanup.csv TRUE/FALSE, TRUE temporary created csv output files deleted gathering results. cleanup.xml TRUE/FALSE, TRUE temporary created xml output files deleted gathering results. cleanup.bat TRUE/FALSE, TRUE temporary created bat/sh output files deleted gathering results.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenSA.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Annealing call simulations function — util_run_nl_dyn_GenSA","title":"Simulated Annealing call simulations function — util_run_nl_dyn_GenSA","text":"Simulated Annealing call simulations function","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenSA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Annealing call simulations function — util_run_nl_dyn_GenSA","text":"","code":"util_run_nl_dyn_GenSA(nl, seed, cleanup.csv, cleanup.xml, cleanup.bat)"},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenSA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated Annealing call simulations function — util_run_nl_dyn_GenSA","text":"nl nl object seed current model seed cleanup.csv TRUE/FALSE, TRUE temporary created csv output files deleted gathering results. cleanup.xml TRUE/FALSE, TRUE temporary created xml output files deleted gathering results. cleanup.bat TRUE/FALSE, TRUE temporary created bat/sh output files deleted gathering results.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenSA_fn.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Annealing run simulation function — util_run_nl_dyn_GenSA_fn","title":"Simulated Annealing run simulation function — util_run_nl_dyn_GenSA_fn","text":"Simulated Annealing run simulation function","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenSA_fn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Annealing run simulation function — util_run_nl_dyn_GenSA_fn","text":"","code":"util_run_nl_dyn_GenSA_fn(   param,   nl,   evalcrit,   seed,   cleanup.csv,   cleanup.xml,   cleanup.bat )"},{"path":"https://docs.ropensci.org/nlrx/reference/util_run_nl_dyn_GenSA_fn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulated Annealing run simulation function — util_run_nl_dyn_GenSA_fn","text":"param vector model parameters, generated GenSA function nl nl object evalcrit evaluation criterion simulated annealing seed current model seed cleanup.csv TRUE/FALSE, TRUE temporary created csv output files deleted gathering results. cleanup.xml TRUE/FALSE, TRUE temporary created xml output files deleted gathering results. cleanup.bat TRUE/FALSE, TRUE temporary created bat/sh output files deleted gathering results.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/write_simoutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Write attached NetLogo simulation output to file — write_simoutput","title":"Write attached NetLogo simulation output to file — write_simoutput","text":"Write attached NetLogo simulation output file","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/write_simoutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write attached NetLogo simulation output to file — write_simoutput","text":"","code":"write_simoutput(nl, outpath = NA)"},{"path":"https://docs.ropensci.org/nlrx/reference/write_simoutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write attached NetLogo simulation output to file — write_simoutput","text":"nl nl object outpath optional path directory output written Write NetLogo simulation output csv file directory outpath nl object Output attached simdesign first simoutput(nl) <- results outpath argument can optionally used write output different directory defined outpath nl object.","code":""},{"path":"https://docs.ropensci.org/nlrx/reference/write_simoutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write attached NetLogo simulation output to file — write_simoutput","text":"","code":"# Load nl object including output data from testdata nl <- nl_lhs  # Write output to outpath directory write_simoutput(nl, outpath=tempdir()) #> Warning: The `path` argument of `write_csv()` is deprecated as of readr 1.4.0. #> ℹ Please use the `file` argument instead. #> ℹ The deprecated feature was likely used in the nlrx package. #>   Please report the issue at <https://github.com/ropensci/nlrx/issues/>."},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"nlrx-044","dir":"Changelog","previous_headings":"","what":"nlrx 0.4.4","title":"nlrx 0.4.4","text":"CRAN release: 2023-05-16","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"functionality-0-4-4","dir":"Changelog","previous_headings":"","what":"Functionality","title":"nlrx 0.4.4","text":"added support download_netLogo() NetLogo version 6.3.0 adjusted test_nlrx() work new NetLogo directory structure (6.3.0) added writeRDS parameter run_nl_all() storing intermediate results","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"bugfixes-0-4-4","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"nlrx 0.4.4","text":"updating Java Version Requirement DESCRIPTION refactoring download_netlogo function Fix readr problems util_runnl() (deprecated path argument write_lines) Fix path problems Fix allow list output agent variables (metrics.turtles, metrics.patches, metrics.links)","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"nlrx-043","dir":"Changelog","previous_headings":"","what":"nlrx 0.4.3","title":"nlrx 0.4.3","text":"CRAN release: 2021-09-20","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"functionality-0-4-3","dir":"Changelog","previous_headings":"","what":"Functionality","title":"nlrx 0.4.3","text":"added test_nlrx() function check functionality package added support download_netLogo() NetLogo version 6.2.0","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"bugfixes-0-4-3","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"nlrx 0.4.3","text":"changed timestamp nldoc function lubridate base date fixed error function parser nldoc procedure fixed bug calculation number computed runs print_nl()","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"nlrx-042","dir":"Changelog","previous_headings":"","what":"nlrx 0.4.2","title":"nlrx 0.4.2","text":"CRAN release: 2020-11-13","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"functionality-0-4-2","dir":"Changelog","previous_headings":"","what":"Functionality","title":"nlrx 0.4.2","text":"added option run_nl_one allows store results rds files added eval_simoutput option check missing combinations siminputrow random-seeds added support progressr progress bars run_nl_all function (details see notes vignette) removed silent parameter run_nl_all function","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"bugfixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"nlrx 0.4.2","text":"hotfix another dependency external files nldoc roxygen examples small bugfix analyze_morris: warning now thrown NA present simulation data bugfix random seed generator bugfix sobol simulation design sobolorder higher available number variables analyze_nl now prints warning missing combinations detected simulation output updated testdata user rights temporary sh scripts now set correctly","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"nlrx-041","dir":"Changelog","previous_headings":"","what":"nlrx 0.4.1","title":"nlrx 0.4.1","text":"CRAN release: 2020-02-07 fixed dependency external file source nldoc automated tests files now included package added link documentation website description","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"nlrx-040","dir":"Changelog","previous_headings":"","what":"nlrx 0.4.0","title":"nlrx 0.4.0","text":"CRAN release: 2019-12-03 Added new simdesigns simdesign_ABCmcmc_Marjoram, simdesign_ABCmcmc_Marjoram_original simdesign_ABCmcmc_Wegmann perform approximate bayesian computation Added print function nl objects Added dependencies: crayon, EasyABC Added pandoc system requirements Added additional pandoc_available() check nldoc function Added support download_netLogo() NetLogo version 6.1.1 Added new vignette showing example approximate bayesian computation nlrx Updated “Sensitivity Analyses nlrx”” vignette Updated “Advanced Configuration” vignette Updated package tests","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"nlrx-030","dir":"Changelog","previous_headings":"","what":"nlrx 0.3.0","title":"nlrx 0.3.0","text":"CRAN release: 2019-09-26 Added support self-defined evaluation functions optimization functions simdesign_GenAlg simdesign_GenSA. Added support simdesign_simple() models without GUI parameters Added support download_netLogo() NetLogo version 6.1.0 Added new vignette showing example Sensitivity Analysis nlrx. Added new vignette showing example Optimization nlrx. Updated “Advanced Configuration” vignette. Updated citation information package. Hotfix unnest_simoutput(). previous package version, circumstances error occured due NA data. Corrected spelling errors vignettes documentation files.","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"nlrx-020","dir":"Changelog","previous_headings":"","what":"nlrx 0.2.0","title":"nlrx 0.2.0","text":"CRAN release: 2019-03-28 nl_to_raster() hotfix","code":""},{"path":"https://docs.ropensci.org/nlrx/news/index.html","id":"nlrx-010","dir":"Changelog","previous_headings":"","what":"nlrx 0.1.0","title":"nlrx 0.1.0","text":"CRAN release: 2019-03-18 First release CRAN.","code":""}]
